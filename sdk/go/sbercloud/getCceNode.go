// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupCceNode(ctx *pulumi.Context, args *LookupCceNodeArgs, opts ...pulumi.InvokeOption) (*LookupCceNodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCceNodeResult
	err := ctx.Invoke("sbercloud:index/getCceNode:getCceNode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCceNode.
type LookupCceNodeArgs struct {
	ClusterId string  `pulumi:"clusterId"`
	Name      *string `pulumi:"name"`
	NodeId    *string `pulumi:"nodeId"`
	Region    *string `pulumi:"region"`
	Status    *string `pulumi:"status"`
}

// A collection of values returned by getCceNode.
type LookupCceNodeResult struct {
	AvailabilityZone    string                     `pulumi:"availabilityZone"`
	BillingMode         int                        `pulumi:"billingMode"`
	ClusterId           string                     `pulumi:"clusterId"`
	DataVolumes         []GetCceNodeDataVolume     `pulumi:"dataVolumes"`
	EcsGroupId          string                     `pulumi:"ecsGroupId"`
	EnterpriseProjectId string                     `pulumi:"enterpriseProjectId"`
	FlavorId            string                     `pulumi:"flavorId"`
	HostnameConfigs     []GetCceNodeHostnameConfig `pulumi:"hostnameConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id          string                 `pulumi:"id"`
	KeyPair     string                 `pulumi:"keyPair"`
	Name        string                 `pulumi:"name"`
	NodeId      string                 `pulumi:"nodeId"`
	Os          string                 `pulumi:"os"`
	PrivateIp   string                 `pulumi:"privateIp"`
	PublicIp    string                 `pulumi:"publicIp"`
	Region      string                 `pulumi:"region"`
	RootVolumes []GetCceNodeRootVolume `pulumi:"rootVolumes"`
	ServerId    string                 `pulumi:"serverId"`
	Status      string                 `pulumi:"status"`
	SubnetId    string                 `pulumi:"subnetId"`
	Tags        map[string]string      `pulumi:"tags"`
}

func LookupCceNodeOutput(ctx *pulumi.Context, args LookupCceNodeOutputArgs, opts ...pulumi.InvokeOption) LookupCceNodeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCceNodeResultOutput, error) {
			args := v.(LookupCceNodeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getCceNode:getCceNode", args, LookupCceNodeResultOutput{}, options).(LookupCceNodeResultOutput), nil
		}).(LookupCceNodeResultOutput)
}

// A collection of arguments for invoking getCceNode.
type LookupCceNodeOutputArgs struct {
	ClusterId pulumi.StringInput    `pulumi:"clusterId"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	NodeId    pulumi.StringPtrInput `pulumi:"nodeId"`
	Region    pulumi.StringPtrInput `pulumi:"region"`
	Status    pulumi.StringPtrInput `pulumi:"status"`
}

func (LookupCceNodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCceNodeArgs)(nil)).Elem()
}

// A collection of values returned by getCceNode.
type LookupCceNodeResultOutput struct{ *pulumi.OutputState }

func (LookupCceNodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCceNodeResult)(nil)).Elem()
}

func (o LookupCceNodeResultOutput) ToLookupCceNodeResultOutput() LookupCceNodeResultOutput {
	return o
}

func (o LookupCceNodeResultOutput) ToLookupCceNodeResultOutputWithContext(ctx context.Context) LookupCceNodeResultOutput {
	return o
}

func (o LookupCceNodeResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodeResult) int { return v.BillingMode }).(pulumi.IntOutput)
}

func (o LookupCceNodeResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) DataVolumes() GetCceNodeDataVolumeArrayOutput {
	return o.ApplyT(func(v LookupCceNodeResult) []GetCceNodeDataVolume { return v.DataVolumes }).(GetCceNodeDataVolumeArrayOutput)
}

func (o LookupCceNodeResultOutput) EcsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.EcsGroupId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.FlavorId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) HostnameConfigs() GetCceNodeHostnameConfigArrayOutput {
	return o.ApplyT(func(v LookupCceNodeResult) []GetCceNodeHostnameConfig { return v.HostnameConfigs }).(GetCceNodeHostnameConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCceNodeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.NodeId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.Os }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) RootVolumes() GetCceNodeRootVolumeArrayOutput {
	return o.ApplyT(func(v LookupCceNodeResult) []GetCceNodeRootVolume { return v.RootVolumes }).(GetCceNodeRootVolumeArrayOutput)
}

func (o LookupCceNodeResultOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.ServerId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodeResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupCceNodeResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCceNodeResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCceNodeResultOutput{})
}
