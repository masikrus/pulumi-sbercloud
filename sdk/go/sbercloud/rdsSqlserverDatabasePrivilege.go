// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsSqlserverDatabasePrivilege struct {
	pulumi.CustomResourceState

	// Specifies the database name.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the ID of the RDS SQL Server instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
	// Specifies the account that associated with the database
	Users RdsSqlserverDatabasePrivilegeUserArrayOutput `pulumi:"users"`
}

// NewRdsSqlserverDatabasePrivilege registers a new resource with the given unique name, arguments, and options.
func NewRdsSqlserverDatabasePrivilege(ctx *pulumi.Context,
	name string, args *RdsSqlserverDatabasePrivilegeArgs, opts ...pulumi.ResourceOption) (*RdsSqlserverDatabasePrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsSqlserverDatabasePrivilege
	err := ctx.RegisterResource("sbercloud:index/rdsSqlserverDatabasePrivilege:RdsSqlserverDatabasePrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsSqlserverDatabasePrivilege gets an existing RdsSqlserverDatabasePrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsSqlserverDatabasePrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsSqlserverDatabasePrivilegeState, opts ...pulumi.ResourceOption) (*RdsSqlserverDatabasePrivilege, error) {
	var resource RdsSqlserverDatabasePrivilege
	err := ctx.ReadResource("sbercloud:index/rdsSqlserverDatabasePrivilege:RdsSqlserverDatabasePrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsSqlserverDatabasePrivilege resources.
type rdsSqlserverDatabasePrivilegeState struct {
	// Specifies the database name.
	DbName *string `pulumi:"dbName"`
	// Specifies the ID of the RDS SQL Server instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Specifies the account that associated with the database
	Users []RdsSqlserverDatabasePrivilegeUser `pulumi:"users"`
}

type RdsSqlserverDatabasePrivilegeState struct {
	// Specifies the database name.
	DbName pulumi.StringPtrInput
	// Specifies the ID of the RDS SQL Server instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	// Specifies the account that associated with the database
	Users RdsSqlserverDatabasePrivilegeUserArrayInput
}

func (RdsSqlserverDatabasePrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlserverDatabasePrivilegeState)(nil)).Elem()
}

type rdsSqlserverDatabasePrivilegeArgs struct {
	// Specifies the database name.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of the RDS SQL Server instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Specifies the account that associated with the database
	Users []RdsSqlserverDatabasePrivilegeUser `pulumi:"users"`
}

// The set of arguments for constructing a RdsSqlserverDatabasePrivilege resource.
type RdsSqlserverDatabasePrivilegeArgs struct {
	// Specifies the database name.
	DbName pulumi.StringInput
	// Specifies the ID of the RDS SQL Server instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
	// Specifies the account that associated with the database
	Users RdsSqlserverDatabasePrivilegeUserArrayInput
}

func (RdsSqlserverDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlserverDatabasePrivilegeArgs)(nil)).Elem()
}

type RdsSqlserverDatabasePrivilegeInput interface {
	pulumi.Input

	ToRdsSqlserverDatabasePrivilegeOutput() RdsSqlserverDatabasePrivilegeOutput
	ToRdsSqlserverDatabasePrivilegeOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeOutput
}

func (*RdsSqlserverDatabasePrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlserverDatabasePrivilege)(nil)).Elem()
}

func (i *RdsSqlserverDatabasePrivilege) ToRdsSqlserverDatabasePrivilegeOutput() RdsSqlserverDatabasePrivilegeOutput {
	return i.ToRdsSqlserverDatabasePrivilegeOutputWithContext(context.Background())
}

func (i *RdsSqlserverDatabasePrivilege) ToRdsSqlserverDatabasePrivilegeOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverDatabasePrivilegeOutput)
}

// RdsSqlserverDatabasePrivilegeArrayInput is an input type that accepts RdsSqlserverDatabasePrivilegeArray and RdsSqlserverDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `RdsSqlserverDatabasePrivilegeArrayInput` via:
//
//	RdsSqlserverDatabasePrivilegeArray{ RdsSqlserverDatabasePrivilegeArgs{...} }
type RdsSqlserverDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToRdsSqlserverDatabasePrivilegeArrayOutput() RdsSqlserverDatabasePrivilegeArrayOutput
	ToRdsSqlserverDatabasePrivilegeArrayOutputWithContext(context.Context) RdsSqlserverDatabasePrivilegeArrayOutput
}

type RdsSqlserverDatabasePrivilegeArray []RdsSqlserverDatabasePrivilegeInput

func (RdsSqlserverDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlserverDatabasePrivilege)(nil)).Elem()
}

func (i RdsSqlserverDatabasePrivilegeArray) ToRdsSqlserverDatabasePrivilegeArrayOutput() RdsSqlserverDatabasePrivilegeArrayOutput {
	return i.ToRdsSqlserverDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i RdsSqlserverDatabasePrivilegeArray) ToRdsSqlserverDatabasePrivilegeArrayOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverDatabasePrivilegeArrayOutput)
}

// RdsSqlserverDatabasePrivilegeMapInput is an input type that accepts RdsSqlserverDatabasePrivilegeMap and RdsSqlserverDatabasePrivilegeMapOutput values.
// You can construct a concrete instance of `RdsSqlserverDatabasePrivilegeMapInput` via:
//
//	RdsSqlserverDatabasePrivilegeMap{ "key": RdsSqlserverDatabasePrivilegeArgs{...} }
type RdsSqlserverDatabasePrivilegeMapInput interface {
	pulumi.Input

	ToRdsSqlserverDatabasePrivilegeMapOutput() RdsSqlserverDatabasePrivilegeMapOutput
	ToRdsSqlserverDatabasePrivilegeMapOutputWithContext(context.Context) RdsSqlserverDatabasePrivilegeMapOutput
}

type RdsSqlserverDatabasePrivilegeMap map[string]RdsSqlserverDatabasePrivilegeInput

func (RdsSqlserverDatabasePrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlserverDatabasePrivilege)(nil)).Elem()
}

func (i RdsSqlserverDatabasePrivilegeMap) ToRdsSqlserverDatabasePrivilegeMapOutput() RdsSqlserverDatabasePrivilegeMapOutput {
	return i.ToRdsSqlserverDatabasePrivilegeMapOutputWithContext(context.Background())
}

func (i RdsSqlserverDatabasePrivilegeMap) ToRdsSqlserverDatabasePrivilegeMapOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverDatabasePrivilegeMapOutput)
}

type RdsSqlserverDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (RdsSqlserverDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlserverDatabasePrivilege)(nil)).Elem()
}

func (o RdsSqlserverDatabasePrivilegeOutput) ToRdsSqlserverDatabasePrivilegeOutput() RdsSqlserverDatabasePrivilegeOutput {
	return o
}

func (o RdsSqlserverDatabasePrivilegeOutput) ToRdsSqlserverDatabasePrivilegeOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeOutput {
	return o
}

// Specifies the database name.
func (o RdsSqlserverDatabasePrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabasePrivilege) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS SQL Server instance.
func (o RdsSqlserverDatabasePrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabasePrivilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RdsSqlserverDatabasePrivilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabasePrivilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the account that associated with the database
func (o RdsSqlserverDatabasePrivilegeOutput) Users() RdsSqlserverDatabasePrivilegeUserArrayOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabasePrivilege) RdsSqlserverDatabasePrivilegeUserArrayOutput { return v.Users }).(RdsSqlserverDatabasePrivilegeUserArrayOutput)
}

type RdsSqlserverDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (RdsSqlserverDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlserverDatabasePrivilege)(nil)).Elem()
}

func (o RdsSqlserverDatabasePrivilegeArrayOutput) ToRdsSqlserverDatabasePrivilegeArrayOutput() RdsSqlserverDatabasePrivilegeArrayOutput {
	return o
}

func (o RdsSqlserverDatabasePrivilegeArrayOutput) ToRdsSqlserverDatabasePrivilegeArrayOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeArrayOutput {
	return o
}

func (o RdsSqlserverDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) RdsSqlserverDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsSqlserverDatabasePrivilege {
		return vs[0].([]*RdsSqlserverDatabasePrivilege)[vs[1].(int)]
	}).(RdsSqlserverDatabasePrivilegeOutput)
}

type RdsSqlserverDatabasePrivilegeMapOutput struct{ *pulumi.OutputState }

func (RdsSqlserverDatabasePrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlserverDatabasePrivilege)(nil)).Elem()
}

func (o RdsSqlserverDatabasePrivilegeMapOutput) ToRdsSqlserverDatabasePrivilegeMapOutput() RdsSqlserverDatabasePrivilegeMapOutput {
	return o
}

func (o RdsSqlserverDatabasePrivilegeMapOutput) ToRdsSqlserverDatabasePrivilegeMapOutputWithContext(ctx context.Context) RdsSqlserverDatabasePrivilegeMapOutput {
	return o
}

func (o RdsSqlserverDatabasePrivilegeMapOutput) MapIndex(k pulumi.StringInput) RdsSqlserverDatabasePrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsSqlserverDatabasePrivilege {
		return vs[0].(map[string]*RdsSqlserverDatabasePrivilege)[vs[1].(string)]
	}).(RdsSqlserverDatabasePrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverDatabasePrivilegeInput)(nil)).Elem(), &RdsSqlserverDatabasePrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverDatabasePrivilegeArrayInput)(nil)).Elem(), RdsSqlserverDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverDatabasePrivilegeMapInput)(nil)).Elem(), RdsSqlserverDatabasePrivilegeMap{})
	pulumi.RegisterOutputType(RdsSqlserverDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(RdsSqlserverDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(RdsSqlserverDatabasePrivilegeMapOutput{})
}
