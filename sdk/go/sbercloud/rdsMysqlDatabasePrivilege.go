// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsMysqlDatabasePrivilege struct {
	pulumi.CustomResourceState

	// Specifies the database name.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
	// Specifies the account that associated with the database.
	Users RdsMysqlDatabasePrivilegeUserArrayOutput `pulumi:"users"`
}

// NewRdsMysqlDatabasePrivilege registers a new resource with the given unique name, arguments, and options.
func NewRdsMysqlDatabasePrivilege(ctx *pulumi.Context,
	name string, args *RdsMysqlDatabasePrivilegeArgs, opts ...pulumi.ResourceOption) (*RdsMysqlDatabasePrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsMysqlDatabasePrivilege
	err := ctx.RegisterResource("sbercloud:index/rdsMysqlDatabasePrivilege:RdsMysqlDatabasePrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsMysqlDatabasePrivilege gets an existing RdsMysqlDatabasePrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsMysqlDatabasePrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsMysqlDatabasePrivilegeState, opts ...pulumi.ResourceOption) (*RdsMysqlDatabasePrivilege, error) {
	var resource RdsMysqlDatabasePrivilege
	err := ctx.ReadResource("sbercloud:index/rdsMysqlDatabasePrivilege:RdsMysqlDatabasePrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsMysqlDatabasePrivilege resources.
type rdsMysqlDatabasePrivilegeState struct {
	// Specifies the database name.
	DbName *string `pulumi:"dbName"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Specifies the account that associated with the database.
	Users []RdsMysqlDatabasePrivilegeUser `pulumi:"users"`
}

type RdsMysqlDatabasePrivilegeState struct {
	// Specifies the database name.
	DbName pulumi.StringPtrInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	// Specifies the account that associated with the database.
	Users RdsMysqlDatabasePrivilegeUserArrayInput
}

func (RdsMysqlDatabasePrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsMysqlDatabasePrivilegeState)(nil)).Elem()
}

type rdsMysqlDatabasePrivilegeArgs struct {
	// Specifies the database name.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Specifies the account that associated with the database.
	Users []RdsMysqlDatabasePrivilegeUser `pulumi:"users"`
}

// The set of arguments for constructing a RdsMysqlDatabasePrivilege resource.
type RdsMysqlDatabasePrivilegeArgs struct {
	// Specifies the database name.
	DbName pulumi.StringInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
	// Specifies the account that associated with the database.
	Users RdsMysqlDatabasePrivilegeUserArrayInput
}

func (RdsMysqlDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsMysqlDatabasePrivilegeArgs)(nil)).Elem()
}

type RdsMysqlDatabasePrivilegeInput interface {
	pulumi.Input

	ToRdsMysqlDatabasePrivilegeOutput() RdsMysqlDatabasePrivilegeOutput
	ToRdsMysqlDatabasePrivilegeOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeOutput
}

func (*RdsMysqlDatabasePrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsMysqlDatabasePrivilege)(nil)).Elem()
}

func (i *RdsMysqlDatabasePrivilege) ToRdsMysqlDatabasePrivilegeOutput() RdsMysqlDatabasePrivilegeOutput {
	return i.ToRdsMysqlDatabasePrivilegeOutputWithContext(context.Background())
}

func (i *RdsMysqlDatabasePrivilege) ToRdsMysqlDatabasePrivilegeOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlDatabasePrivilegeOutput)
}

// RdsMysqlDatabasePrivilegeArrayInput is an input type that accepts RdsMysqlDatabasePrivilegeArray and RdsMysqlDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `RdsMysqlDatabasePrivilegeArrayInput` via:
//
//	RdsMysqlDatabasePrivilegeArray{ RdsMysqlDatabasePrivilegeArgs{...} }
type RdsMysqlDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToRdsMysqlDatabasePrivilegeArrayOutput() RdsMysqlDatabasePrivilegeArrayOutput
	ToRdsMysqlDatabasePrivilegeArrayOutputWithContext(context.Context) RdsMysqlDatabasePrivilegeArrayOutput
}

type RdsMysqlDatabasePrivilegeArray []RdsMysqlDatabasePrivilegeInput

func (RdsMysqlDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsMysqlDatabasePrivilege)(nil)).Elem()
}

func (i RdsMysqlDatabasePrivilegeArray) ToRdsMysqlDatabasePrivilegeArrayOutput() RdsMysqlDatabasePrivilegeArrayOutput {
	return i.ToRdsMysqlDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i RdsMysqlDatabasePrivilegeArray) ToRdsMysqlDatabasePrivilegeArrayOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlDatabasePrivilegeArrayOutput)
}

// RdsMysqlDatabasePrivilegeMapInput is an input type that accepts RdsMysqlDatabasePrivilegeMap and RdsMysqlDatabasePrivilegeMapOutput values.
// You can construct a concrete instance of `RdsMysqlDatabasePrivilegeMapInput` via:
//
//	RdsMysqlDatabasePrivilegeMap{ "key": RdsMysqlDatabasePrivilegeArgs{...} }
type RdsMysqlDatabasePrivilegeMapInput interface {
	pulumi.Input

	ToRdsMysqlDatabasePrivilegeMapOutput() RdsMysqlDatabasePrivilegeMapOutput
	ToRdsMysqlDatabasePrivilegeMapOutputWithContext(context.Context) RdsMysqlDatabasePrivilegeMapOutput
}

type RdsMysqlDatabasePrivilegeMap map[string]RdsMysqlDatabasePrivilegeInput

func (RdsMysqlDatabasePrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsMysqlDatabasePrivilege)(nil)).Elem()
}

func (i RdsMysqlDatabasePrivilegeMap) ToRdsMysqlDatabasePrivilegeMapOutput() RdsMysqlDatabasePrivilegeMapOutput {
	return i.ToRdsMysqlDatabasePrivilegeMapOutputWithContext(context.Background())
}

func (i RdsMysqlDatabasePrivilegeMap) ToRdsMysqlDatabasePrivilegeMapOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlDatabasePrivilegeMapOutput)
}

type RdsMysqlDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (RdsMysqlDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsMysqlDatabasePrivilege)(nil)).Elem()
}

func (o RdsMysqlDatabasePrivilegeOutput) ToRdsMysqlDatabasePrivilegeOutput() RdsMysqlDatabasePrivilegeOutput {
	return o
}

func (o RdsMysqlDatabasePrivilegeOutput) ToRdsMysqlDatabasePrivilegeOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeOutput {
	return o
}

// Specifies the database name.
func (o RdsMysqlDatabasePrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabasePrivilege) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS Mysql instance.
func (o RdsMysqlDatabasePrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabasePrivilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RdsMysqlDatabasePrivilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabasePrivilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the account that associated with the database.
func (o RdsMysqlDatabasePrivilegeOutput) Users() RdsMysqlDatabasePrivilegeUserArrayOutput {
	return o.ApplyT(func(v *RdsMysqlDatabasePrivilege) RdsMysqlDatabasePrivilegeUserArrayOutput { return v.Users }).(RdsMysqlDatabasePrivilegeUserArrayOutput)
}

type RdsMysqlDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (RdsMysqlDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsMysqlDatabasePrivilege)(nil)).Elem()
}

func (o RdsMysqlDatabasePrivilegeArrayOutput) ToRdsMysqlDatabasePrivilegeArrayOutput() RdsMysqlDatabasePrivilegeArrayOutput {
	return o
}

func (o RdsMysqlDatabasePrivilegeArrayOutput) ToRdsMysqlDatabasePrivilegeArrayOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeArrayOutput {
	return o
}

func (o RdsMysqlDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) RdsMysqlDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsMysqlDatabasePrivilege {
		return vs[0].([]*RdsMysqlDatabasePrivilege)[vs[1].(int)]
	}).(RdsMysqlDatabasePrivilegeOutput)
}

type RdsMysqlDatabasePrivilegeMapOutput struct{ *pulumi.OutputState }

func (RdsMysqlDatabasePrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsMysqlDatabasePrivilege)(nil)).Elem()
}

func (o RdsMysqlDatabasePrivilegeMapOutput) ToRdsMysqlDatabasePrivilegeMapOutput() RdsMysqlDatabasePrivilegeMapOutput {
	return o
}

func (o RdsMysqlDatabasePrivilegeMapOutput) ToRdsMysqlDatabasePrivilegeMapOutputWithContext(ctx context.Context) RdsMysqlDatabasePrivilegeMapOutput {
	return o
}

func (o RdsMysqlDatabasePrivilegeMapOutput) MapIndex(k pulumi.StringInput) RdsMysqlDatabasePrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsMysqlDatabasePrivilege {
		return vs[0].(map[string]*RdsMysqlDatabasePrivilege)[vs[1].(string)]
	}).(RdsMysqlDatabasePrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlDatabasePrivilegeInput)(nil)).Elem(), &RdsMysqlDatabasePrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlDatabasePrivilegeArrayInput)(nil)).Elem(), RdsMysqlDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlDatabasePrivilegeMapInput)(nil)).Elem(), RdsMysqlDatabasePrivilegeMap{})
	pulumi.RegisterOutputType(RdsMysqlDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(RdsMysqlDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(RdsMysqlDatabasePrivilegeMapOutput{})
}
