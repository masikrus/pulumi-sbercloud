// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CceNodeAttach struct {
	pulumi.CustomResourceState

	AvailabilityZone    pulumi.StringOutput                `pulumi:"availabilityZone"`
	ChargingMode        pulumi.StringOutput                `pulumi:"chargingMode"`
	ClusterId           pulumi.StringOutput                `pulumi:"clusterId"`
	DataVolumes         CceNodeAttachDataVolumeArrayOutput `pulumi:"dataVolumes"`
	DockerBaseSize      pulumi.IntPtrOutput                `pulumi:"dockerBaseSize"`
	EcsGroupId          pulumi.StringOutput                `pulumi:"ecsGroupId"`
	EnterpriseProjectId pulumi.StringOutput                `pulumi:"enterpriseProjectId"`
	FlavorId            pulumi.StringOutput                `pulumi:"flavorId"`
	HostnameConfig      CceNodeAttachHostnameConfigOutput  `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               pulumi.StringPtrOutput   `pulumi:"imageId"`
	InitializedConditions pulumi.StringArrayOutput `pulumi:"initializedConditions"`
	KeyPair               pulumi.StringPtrOutput   `pulumi:"keyPair"`
	Labels                pulumi.StringMapOutput   `pulumi:"labels"`
	LvmConfig             pulumi.StringPtrOutput   `pulumi:"lvmConfig"`
	MaxPods               pulumi.IntPtrOutput      `pulumi:"maxPods"`
	Name                  pulumi.StringOutput      `pulumi:"name"`
	// schema: Internal
	NicMultiQueue pulumi.StringPtrOutput `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold       pulumi.StringPtrOutput             `pulumi:"nicThreshold"`
	Os                 pulumi.StringOutput                `pulumi:"os"`
	Password           pulumi.StringPtrOutput             `pulumi:"password"`
	Postinstall        pulumi.StringPtrOutput             `pulumi:"postinstall"`
	Preinstall         pulumi.StringPtrOutput             `pulumi:"preinstall"`
	PrivateIp          pulumi.StringOutput                `pulumi:"privateIp"`
	PrivateKey         pulumi.StringPtrOutput             `pulumi:"privateKey"`
	PublicIp           pulumi.StringOutput                `pulumi:"publicIp"`
	Region             pulumi.StringOutput                `pulumi:"region"`
	RootVolumes        CceNodeAttachRootVolumeArrayOutput `pulumi:"rootVolumes"`
	Runtime            pulumi.StringOutput                `pulumi:"runtime"`
	ServerId           pulumi.StringOutput                `pulumi:"serverId"`
	Status             pulumi.StringOutput                `pulumi:"status"`
	Storage            CceNodeAttachStoragePtrOutput      `pulumi:"storage"`
	SubnetId           pulumi.StringOutput                `pulumi:"subnetId"`
	SystemDiskKmsKeyId pulumi.StringPtrOutput             `pulumi:"systemDiskKmsKeyId"`
	Tags               pulumi.StringMapOutput             `pulumi:"tags"`
	Taints             CceNodeAttachTaintArrayOutput      `pulumi:"taints"`
}

// NewCceNodeAttach registers a new resource with the given unique name, arguments, and options.
func NewCceNodeAttach(ctx *pulumi.Context,
	name string, args *CceNodeAttachArgs, opts ...pulumi.ResourceOption) (*CceNodeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Os == nil {
		return nil, errors.New("invalid value for required argument 'Os'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CceNodeAttach
	err := ctx.RegisterResource("sbercloud:index/cceNodeAttach:CceNodeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCceNodeAttach gets an existing CceNodeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCceNodeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CceNodeAttachState, opts ...pulumi.ResourceOption) (*CceNodeAttach, error) {
	var resource CceNodeAttach
	err := ctx.ReadResource("sbercloud:index/cceNodeAttach:CceNodeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CceNodeAttach resources.
type cceNodeAttachState struct {
	AvailabilityZone    *string                      `pulumi:"availabilityZone"`
	ChargingMode        *string                      `pulumi:"chargingMode"`
	ClusterId           *string                      `pulumi:"clusterId"`
	DataVolumes         []CceNodeAttachDataVolume    `pulumi:"dataVolumes"`
	DockerBaseSize      *int                         `pulumi:"dockerBaseSize"`
	EcsGroupId          *string                      `pulumi:"ecsGroupId"`
	EnterpriseProjectId *string                      `pulumi:"enterpriseProjectId"`
	FlavorId            *string                      `pulumi:"flavorId"`
	HostnameConfig      *CceNodeAttachHostnameConfig `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               *string           `pulumi:"imageId"`
	InitializedConditions []string          `pulumi:"initializedConditions"`
	KeyPair               *string           `pulumi:"keyPair"`
	Labels                map[string]string `pulumi:"labels"`
	LvmConfig             *string           `pulumi:"lvmConfig"`
	MaxPods               *int              `pulumi:"maxPods"`
	Name                  *string           `pulumi:"name"`
	// schema: Internal
	NicMultiQueue *string `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold       *string                   `pulumi:"nicThreshold"`
	Os                 *string                   `pulumi:"os"`
	Password           *string                   `pulumi:"password"`
	Postinstall        *string                   `pulumi:"postinstall"`
	Preinstall         *string                   `pulumi:"preinstall"`
	PrivateIp          *string                   `pulumi:"privateIp"`
	PrivateKey         *string                   `pulumi:"privateKey"`
	PublicIp           *string                   `pulumi:"publicIp"`
	Region             *string                   `pulumi:"region"`
	RootVolumes        []CceNodeAttachRootVolume `pulumi:"rootVolumes"`
	Runtime            *string                   `pulumi:"runtime"`
	ServerId           *string                   `pulumi:"serverId"`
	Status             *string                   `pulumi:"status"`
	Storage            *CceNodeAttachStorage     `pulumi:"storage"`
	SubnetId           *string                   `pulumi:"subnetId"`
	SystemDiskKmsKeyId *string                   `pulumi:"systemDiskKmsKeyId"`
	Tags               map[string]string         `pulumi:"tags"`
	Taints             []CceNodeAttachTaint      `pulumi:"taints"`
}

type CceNodeAttachState struct {
	AvailabilityZone    pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	ClusterId           pulumi.StringPtrInput
	DataVolumes         CceNodeAttachDataVolumeArrayInput
	DockerBaseSize      pulumi.IntPtrInput
	EcsGroupId          pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	FlavorId            pulumi.StringPtrInput
	HostnameConfig      CceNodeAttachHostnameConfigPtrInput
	// schema: Internal
	ImageId               pulumi.StringPtrInput
	InitializedConditions pulumi.StringArrayInput
	KeyPair               pulumi.StringPtrInput
	Labels                pulumi.StringMapInput
	LvmConfig             pulumi.StringPtrInput
	MaxPods               pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	// schema: Internal
	NicMultiQueue pulumi.StringPtrInput
	// schema: Internal
	NicThreshold       pulumi.StringPtrInput
	Os                 pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	Postinstall        pulumi.StringPtrInput
	Preinstall         pulumi.StringPtrInput
	PrivateIp          pulumi.StringPtrInput
	PrivateKey         pulumi.StringPtrInput
	PublicIp           pulumi.StringPtrInput
	Region             pulumi.StringPtrInput
	RootVolumes        CceNodeAttachRootVolumeArrayInput
	Runtime            pulumi.StringPtrInput
	ServerId           pulumi.StringPtrInput
	Status             pulumi.StringPtrInput
	Storage            CceNodeAttachStoragePtrInput
	SubnetId           pulumi.StringPtrInput
	SystemDiskKmsKeyId pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	Taints             CceNodeAttachTaintArrayInput
}

func (CceNodeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*cceNodeAttachState)(nil)).Elem()
}

type cceNodeAttachArgs struct {
	ClusterId      string                       `pulumi:"clusterId"`
	DockerBaseSize *int                         `pulumi:"dockerBaseSize"`
	HostnameConfig *CceNodeAttachHostnameConfig `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               *string           `pulumi:"imageId"`
	InitializedConditions []string          `pulumi:"initializedConditions"`
	KeyPair               *string           `pulumi:"keyPair"`
	Labels                map[string]string `pulumi:"labels"`
	LvmConfig             *string           `pulumi:"lvmConfig"`
	MaxPods               *int              `pulumi:"maxPods"`
	Name                  *string           `pulumi:"name"`
	// schema: Internal
	NicMultiQueue *string `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold       *string               `pulumi:"nicThreshold"`
	Os                 string                `pulumi:"os"`
	Password           *string               `pulumi:"password"`
	Postinstall        *string               `pulumi:"postinstall"`
	Preinstall         *string               `pulumi:"preinstall"`
	PrivateKey         *string               `pulumi:"privateKey"`
	Region             *string               `pulumi:"region"`
	Runtime            *string               `pulumi:"runtime"`
	ServerId           string                `pulumi:"serverId"`
	Storage            *CceNodeAttachStorage `pulumi:"storage"`
	SystemDiskKmsKeyId *string               `pulumi:"systemDiskKmsKeyId"`
	Tags               map[string]string     `pulumi:"tags"`
	Taints             []CceNodeAttachTaint  `pulumi:"taints"`
}

// The set of arguments for constructing a CceNodeAttach resource.
type CceNodeAttachArgs struct {
	ClusterId      pulumi.StringInput
	DockerBaseSize pulumi.IntPtrInput
	HostnameConfig CceNodeAttachHostnameConfigPtrInput
	// schema: Internal
	ImageId               pulumi.StringPtrInput
	InitializedConditions pulumi.StringArrayInput
	KeyPair               pulumi.StringPtrInput
	Labels                pulumi.StringMapInput
	LvmConfig             pulumi.StringPtrInput
	MaxPods               pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	// schema: Internal
	NicMultiQueue pulumi.StringPtrInput
	// schema: Internal
	NicThreshold       pulumi.StringPtrInput
	Os                 pulumi.StringInput
	Password           pulumi.StringPtrInput
	Postinstall        pulumi.StringPtrInput
	Preinstall         pulumi.StringPtrInput
	PrivateKey         pulumi.StringPtrInput
	Region             pulumi.StringPtrInput
	Runtime            pulumi.StringPtrInput
	ServerId           pulumi.StringInput
	Storage            CceNodeAttachStoragePtrInput
	SystemDiskKmsKeyId pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	Taints             CceNodeAttachTaintArrayInput
}

func (CceNodeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cceNodeAttachArgs)(nil)).Elem()
}

type CceNodeAttachInput interface {
	pulumi.Input

	ToCceNodeAttachOutput() CceNodeAttachOutput
	ToCceNodeAttachOutputWithContext(ctx context.Context) CceNodeAttachOutput
}

func (*CceNodeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**CceNodeAttach)(nil)).Elem()
}

func (i *CceNodeAttach) ToCceNodeAttachOutput() CceNodeAttachOutput {
	return i.ToCceNodeAttachOutputWithContext(context.Background())
}

func (i *CceNodeAttach) ToCceNodeAttachOutputWithContext(ctx context.Context) CceNodeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceNodeAttachOutput)
}

// CceNodeAttachArrayInput is an input type that accepts CceNodeAttachArray and CceNodeAttachArrayOutput values.
// You can construct a concrete instance of `CceNodeAttachArrayInput` via:
//
//	CceNodeAttachArray{ CceNodeAttachArgs{...} }
type CceNodeAttachArrayInput interface {
	pulumi.Input

	ToCceNodeAttachArrayOutput() CceNodeAttachArrayOutput
	ToCceNodeAttachArrayOutputWithContext(context.Context) CceNodeAttachArrayOutput
}

type CceNodeAttachArray []CceNodeAttachInput

func (CceNodeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceNodeAttach)(nil)).Elem()
}

func (i CceNodeAttachArray) ToCceNodeAttachArrayOutput() CceNodeAttachArrayOutput {
	return i.ToCceNodeAttachArrayOutputWithContext(context.Background())
}

func (i CceNodeAttachArray) ToCceNodeAttachArrayOutputWithContext(ctx context.Context) CceNodeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceNodeAttachArrayOutput)
}

// CceNodeAttachMapInput is an input type that accepts CceNodeAttachMap and CceNodeAttachMapOutput values.
// You can construct a concrete instance of `CceNodeAttachMapInput` via:
//
//	CceNodeAttachMap{ "key": CceNodeAttachArgs{...} }
type CceNodeAttachMapInput interface {
	pulumi.Input

	ToCceNodeAttachMapOutput() CceNodeAttachMapOutput
	ToCceNodeAttachMapOutputWithContext(context.Context) CceNodeAttachMapOutput
}

type CceNodeAttachMap map[string]CceNodeAttachInput

func (CceNodeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceNodeAttach)(nil)).Elem()
}

func (i CceNodeAttachMap) ToCceNodeAttachMapOutput() CceNodeAttachMapOutput {
	return i.ToCceNodeAttachMapOutputWithContext(context.Background())
}

func (i CceNodeAttachMap) ToCceNodeAttachMapOutputWithContext(ctx context.Context) CceNodeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceNodeAttachMapOutput)
}

type CceNodeAttachOutput struct{ *pulumi.OutputState }

func (CceNodeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CceNodeAttach)(nil)).Elem()
}

func (o CceNodeAttachOutput) ToCceNodeAttachOutput() CceNodeAttachOutput {
	return o
}

func (o CceNodeAttachOutput) ToCceNodeAttachOutputWithContext(ctx context.Context) CceNodeAttachOutput {
	return o
}

func (o CceNodeAttachOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) DataVolumes() CceNodeAttachDataVolumeArrayOutput {
	return o.ApplyT(func(v *CceNodeAttach) CceNodeAttachDataVolumeArrayOutput { return v.DataVolumes }).(CceNodeAttachDataVolumeArrayOutput)
}

func (o CceNodeAttachOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.IntPtrOutput { return v.DockerBaseSize }).(pulumi.IntPtrOutput)
}

func (o CceNodeAttachOutput) EcsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.EcsGroupId }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) HostnameConfig() CceNodeAttachHostnameConfigOutput {
	return o.ApplyT(func(v *CceNodeAttach) CceNodeAttachHostnameConfigOutput { return v.HostnameConfig }).(CceNodeAttachHostnameConfigOutput)
}

// schema: Internal
func (o CceNodeAttachOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) InitializedConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringArrayOutput { return v.InitializedConditions }).(pulumi.StringArrayOutput)
}

func (o CceNodeAttachOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o CceNodeAttachOutput) LvmConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.LvmConfig }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.IntPtrOutput { return v.MaxPods }).(pulumi.IntPtrOutput)
}

func (o CceNodeAttachOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// schema: Internal
func (o CceNodeAttachOutput) NicMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.NicMultiQueue }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o CceNodeAttachOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.NicThreshold }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.Postinstall }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.Preinstall }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) RootVolumes() CceNodeAttachRootVolumeArrayOutput {
	return o.ApplyT(func(v *CceNodeAttach) CceNodeAttachRootVolumeArrayOutput { return v.RootVolumes }).(CceNodeAttachRootVolumeArrayOutput)
}

func (o CceNodeAttachOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) Storage() CceNodeAttachStoragePtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) CceNodeAttachStoragePtrOutput { return v.Storage }).(CceNodeAttachStoragePtrOutput)
}

func (o CceNodeAttachOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o CceNodeAttachOutput) SystemDiskKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringPtrOutput { return v.SystemDiskKmsKeyId }).(pulumi.StringPtrOutput)
}

func (o CceNodeAttachOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CceNodeAttach) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CceNodeAttachOutput) Taints() CceNodeAttachTaintArrayOutput {
	return o.ApplyT(func(v *CceNodeAttach) CceNodeAttachTaintArrayOutput { return v.Taints }).(CceNodeAttachTaintArrayOutput)
}

type CceNodeAttachArrayOutput struct{ *pulumi.OutputState }

func (CceNodeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceNodeAttach)(nil)).Elem()
}

func (o CceNodeAttachArrayOutput) ToCceNodeAttachArrayOutput() CceNodeAttachArrayOutput {
	return o
}

func (o CceNodeAttachArrayOutput) ToCceNodeAttachArrayOutputWithContext(ctx context.Context) CceNodeAttachArrayOutput {
	return o
}

func (o CceNodeAttachArrayOutput) Index(i pulumi.IntInput) CceNodeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CceNodeAttach {
		return vs[0].([]*CceNodeAttach)[vs[1].(int)]
	}).(CceNodeAttachOutput)
}

type CceNodeAttachMapOutput struct{ *pulumi.OutputState }

func (CceNodeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceNodeAttach)(nil)).Elem()
}

func (o CceNodeAttachMapOutput) ToCceNodeAttachMapOutput() CceNodeAttachMapOutput {
	return o
}

func (o CceNodeAttachMapOutput) ToCceNodeAttachMapOutputWithContext(ctx context.Context) CceNodeAttachMapOutput {
	return o
}

func (o CceNodeAttachMapOutput) MapIndex(k pulumi.StringInput) CceNodeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CceNodeAttach {
		return vs[0].(map[string]*CceNodeAttach)[vs[1].(string)]
	}).(CceNodeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CceNodeAttachInput)(nil)).Elem(), &CceNodeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceNodeAttachArrayInput)(nil)).Elem(), CceNodeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceNodeAttachMapInput)(nil)).Elem(), CceNodeAttachMap{})
	pulumi.RegisterOutputType(CceNodeAttachOutput{})
	pulumi.RegisterOutputType(CceNodeAttachArrayOutput{})
	pulumi.RegisterOutputType(CceNodeAttachMapOutput{})
}
