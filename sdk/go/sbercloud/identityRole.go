// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityRole struct {
	pulumi.CustomResourceState

	Description pulumi.StringOutput `pulumi:"description"`
	Name        pulumi.StringOutput `pulumi:"name"`
	Policy      pulumi.StringOutput `pulumi:"policy"`
	References  pulumi.IntOutput    `pulumi:"references"`
	Type        pulumi.StringOutput `pulumi:"type"`
}

// NewIdentityRole registers a new resource with the given unique name, arguments, and options.
func NewIdentityRole(ctx *pulumi.Context,
	name string, args *IdentityRoleArgs, opts ...pulumi.ResourceOption) (*IdentityRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityRole
	err := ctx.RegisterResource("sbercloud:index/identityRole:IdentityRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityRole gets an existing IdentityRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityRoleState, opts ...pulumi.ResourceOption) (*IdentityRole, error) {
	var resource IdentityRole
	err := ctx.ReadResource("sbercloud:index/identityRole:IdentityRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityRole resources.
type identityRoleState struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Policy      *string `pulumi:"policy"`
	References  *int    `pulumi:"references"`
	Type        *string `pulumi:"type"`
}

type IdentityRoleState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Policy      pulumi.StringPtrInput
	References  pulumi.IntPtrInput
	Type        pulumi.StringPtrInput
}

func (IdentityRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityRoleState)(nil)).Elem()
}

type identityRoleArgs struct {
	Description string  `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Policy      string  `pulumi:"policy"`
	Type        string  `pulumi:"type"`
}

// The set of arguments for constructing a IdentityRole resource.
type IdentityRoleArgs struct {
	Description pulumi.StringInput
	Name        pulumi.StringPtrInput
	Policy      pulumi.StringInput
	Type        pulumi.StringInput
}

func (IdentityRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityRoleArgs)(nil)).Elem()
}

type IdentityRoleInput interface {
	pulumi.Input

	ToIdentityRoleOutput() IdentityRoleOutput
	ToIdentityRoleOutputWithContext(ctx context.Context) IdentityRoleOutput
}

func (*IdentityRole) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityRole)(nil)).Elem()
}

func (i *IdentityRole) ToIdentityRoleOutput() IdentityRoleOutput {
	return i.ToIdentityRoleOutputWithContext(context.Background())
}

func (i *IdentityRole) ToIdentityRoleOutputWithContext(ctx context.Context) IdentityRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleOutput)
}

// IdentityRoleArrayInput is an input type that accepts IdentityRoleArray and IdentityRoleArrayOutput values.
// You can construct a concrete instance of `IdentityRoleArrayInput` via:
//
//	IdentityRoleArray{ IdentityRoleArgs{...} }
type IdentityRoleArrayInput interface {
	pulumi.Input

	ToIdentityRoleArrayOutput() IdentityRoleArrayOutput
	ToIdentityRoleArrayOutputWithContext(context.Context) IdentityRoleArrayOutput
}

type IdentityRoleArray []IdentityRoleInput

func (IdentityRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityRole)(nil)).Elem()
}

func (i IdentityRoleArray) ToIdentityRoleArrayOutput() IdentityRoleArrayOutput {
	return i.ToIdentityRoleArrayOutputWithContext(context.Background())
}

func (i IdentityRoleArray) ToIdentityRoleArrayOutputWithContext(ctx context.Context) IdentityRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleArrayOutput)
}

// IdentityRoleMapInput is an input type that accepts IdentityRoleMap and IdentityRoleMapOutput values.
// You can construct a concrete instance of `IdentityRoleMapInput` via:
//
//	IdentityRoleMap{ "key": IdentityRoleArgs{...} }
type IdentityRoleMapInput interface {
	pulumi.Input

	ToIdentityRoleMapOutput() IdentityRoleMapOutput
	ToIdentityRoleMapOutputWithContext(context.Context) IdentityRoleMapOutput
}

type IdentityRoleMap map[string]IdentityRoleInput

func (IdentityRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityRole)(nil)).Elem()
}

func (i IdentityRoleMap) ToIdentityRoleMapOutput() IdentityRoleMapOutput {
	return i.ToIdentityRoleMapOutputWithContext(context.Background())
}

func (i IdentityRoleMap) ToIdentityRoleMapOutputWithContext(ctx context.Context) IdentityRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleMapOutput)
}

type IdentityRoleOutput struct{ *pulumi.OutputState }

func (IdentityRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityRole)(nil)).Elem()
}

func (o IdentityRoleOutput) ToIdentityRoleOutput() IdentityRoleOutput {
	return o
}

func (o IdentityRoleOutput) ToIdentityRoleOutputWithContext(ctx context.Context) IdentityRoleOutput {
	return o
}

func (o IdentityRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRole) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o IdentityRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IdentityRoleOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRole) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

func (o IdentityRoleOutput) References() pulumi.IntOutput {
	return o.ApplyT(func(v *IdentityRole) pulumi.IntOutput { return v.References }).(pulumi.IntOutput)
}

func (o IdentityRoleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRole) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IdentityRoleArrayOutput struct{ *pulumi.OutputState }

func (IdentityRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityRole)(nil)).Elem()
}

func (o IdentityRoleArrayOutput) ToIdentityRoleArrayOutput() IdentityRoleArrayOutput {
	return o
}

func (o IdentityRoleArrayOutput) ToIdentityRoleArrayOutputWithContext(ctx context.Context) IdentityRoleArrayOutput {
	return o
}

func (o IdentityRoleArrayOutput) Index(i pulumi.IntInput) IdentityRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityRole {
		return vs[0].([]*IdentityRole)[vs[1].(int)]
	}).(IdentityRoleOutput)
}

type IdentityRoleMapOutput struct{ *pulumi.OutputState }

func (IdentityRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityRole)(nil)).Elem()
}

func (o IdentityRoleMapOutput) ToIdentityRoleMapOutput() IdentityRoleMapOutput {
	return o
}

func (o IdentityRoleMapOutput) ToIdentityRoleMapOutputWithContext(ctx context.Context) IdentityRoleMapOutput {
	return o
}

func (o IdentityRoleMapOutput) MapIndex(k pulumi.StringInput) IdentityRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityRole {
		return vs[0].(map[string]*IdentityRole)[vs[1].(string)]
	}).(IdentityRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleInput)(nil)).Elem(), &IdentityRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleArrayInput)(nil)).Elem(), IdentityRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleMapInput)(nil)).Elem(), IdentityRoleMap{})
	pulumi.RegisterOutputType(IdentityRoleOutput{})
	pulumi.RegisterOutputType(IdentityRoleArrayOutput{})
	pulumi.RegisterOutputType(IdentityRoleMapOutput{})
}
