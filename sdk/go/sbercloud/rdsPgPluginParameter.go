// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsPgPluginParameter struct {
	pulumi.CustomResourceState

	// Indicates the default values of the plugin parameter.
	DefaultValues pulumi.StringArrayOutput `pulumi:"defaultValues"`
	// Specifies the ID of RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the name of the plugin parameter.
	Name   pulumi.StringOutput `pulumi:"name"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates whether a reboot is required.
	RestartRequired pulumi.BoolOutput `pulumi:"restartRequired"`
	// Specifies the list of plugin parameter values.
	Values pulumi.StringArrayOutput `pulumi:"values"`
}

// NewRdsPgPluginParameter registers a new resource with the given unique name, arguments, and options.
func NewRdsPgPluginParameter(ctx *pulumi.Context,
	name string, args *RdsPgPluginParameterArgs, opts ...pulumi.ResourceOption) (*RdsPgPluginParameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Values == nil {
		return nil, errors.New("invalid value for required argument 'Values'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsPgPluginParameter
	err := ctx.RegisterResource("sbercloud:index/rdsPgPluginParameter:RdsPgPluginParameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsPgPluginParameter gets an existing RdsPgPluginParameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsPgPluginParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsPgPluginParameterState, opts ...pulumi.ResourceOption) (*RdsPgPluginParameter, error) {
	var resource RdsPgPluginParameter
	err := ctx.ReadResource("sbercloud:index/rdsPgPluginParameter:RdsPgPluginParameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsPgPluginParameter resources.
type rdsPgPluginParameterState struct {
	// Indicates the default values of the plugin parameter.
	DefaultValues []string `pulumi:"defaultValues"`
	// Specifies the ID of RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the name of the plugin parameter.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Indicates whether a reboot is required.
	RestartRequired *bool `pulumi:"restartRequired"`
	// Specifies the list of plugin parameter values.
	Values []string `pulumi:"values"`
}

type RdsPgPluginParameterState struct {
	// Indicates the default values of the plugin parameter.
	DefaultValues pulumi.StringArrayInput
	// Specifies the ID of RDS instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the name of the plugin parameter.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Indicates whether a reboot is required.
	RestartRequired pulumi.BoolPtrInput
	// Specifies the list of plugin parameter values.
	Values pulumi.StringArrayInput
}

func (RdsPgPluginParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgPluginParameterState)(nil)).Elem()
}

type rdsPgPluginParameterArgs struct {
	// Specifies the ID of RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of the plugin parameter.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Specifies the list of plugin parameter values.
	Values []string `pulumi:"values"`
}

// The set of arguments for constructing a RdsPgPluginParameter resource.
type RdsPgPluginParameterArgs struct {
	// Specifies the ID of RDS instance.
	InstanceId pulumi.StringInput
	// Specifies the name of the plugin parameter.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the list of plugin parameter values.
	Values pulumi.StringArrayInput
}

func (RdsPgPluginParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgPluginParameterArgs)(nil)).Elem()
}

type RdsPgPluginParameterInput interface {
	pulumi.Input

	ToRdsPgPluginParameterOutput() RdsPgPluginParameterOutput
	ToRdsPgPluginParameterOutputWithContext(ctx context.Context) RdsPgPluginParameterOutput
}

func (*RdsPgPluginParameter) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgPluginParameter)(nil)).Elem()
}

func (i *RdsPgPluginParameter) ToRdsPgPluginParameterOutput() RdsPgPluginParameterOutput {
	return i.ToRdsPgPluginParameterOutputWithContext(context.Background())
}

func (i *RdsPgPluginParameter) ToRdsPgPluginParameterOutputWithContext(ctx context.Context) RdsPgPluginParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginParameterOutput)
}

// RdsPgPluginParameterArrayInput is an input type that accepts RdsPgPluginParameterArray and RdsPgPluginParameterArrayOutput values.
// You can construct a concrete instance of `RdsPgPluginParameterArrayInput` via:
//
//	RdsPgPluginParameterArray{ RdsPgPluginParameterArgs{...} }
type RdsPgPluginParameterArrayInput interface {
	pulumi.Input

	ToRdsPgPluginParameterArrayOutput() RdsPgPluginParameterArrayOutput
	ToRdsPgPluginParameterArrayOutputWithContext(context.Context) RdsPgPluginParameterArrayOutput
}

type RdsPgPluginParameterArray []RdsPgPluginParameterInput

func (RdsPgPluginParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgPluginParameter)(nil)).Elem()
}

func (i RdsPgPluginParameterArray) ToRdsPgPluginParameterArrayOutput() RdsPgPluginParameterArrayOutput {
	return i.ToRdsPgPluginParameterArrayOutputWithContext(context.Background())
}

func (i RdsPgPluginParameterArray) ToRdsPgPluginParameterArrayOutputWithContext(ctx context.Context) RdsPgPluginParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginParameterArrayOutput)
}

// RdsPgPluginParameterMapInput is an input type that accepts RdsPgPluginParameterMap and RdsPgPluginParameterMapOutput values.
// You can construct a concrete instance of `RdsPgPluginParameterMapInput` via:
//
//	RdsPgPluginParameterMap{ "key": RdsPgPluginParameterArgs{...} }
type RdsPgPluginParameterMapInput interface {
	pulumi.Input

	ToRdsPgPluginParameterMapOutput() RdsPgPluginParameterMapOutput
	ToRdsPgPluginParameterMapOutputWithContext(context.Context) RdsPgPluginParameterMapOutput
}

type RdsPgPluginParameterMap map[string]RdsPgPluginParameterInput

func (RdsPgPluginParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgPluginParameter)(nil)).Elem()
}

func (i RdsPgPluginParameterMap) ToRdsPgPluginParameterMapOutput() RdsPgPluginParameterMapOutput {
	return i.ToRdsPgPluginParameterMapOutputWithContext(context.Background())
}

func (i RdsPgPluginParameterMap) ToRdsPgPluginParameterMapOutputWithContext(ctx context.Context) RdsPgPluginParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginParameterMapOutput)
}

type RdsPgPluginParameterOutput struct{ *pulumi.OutputState }

func (RdsPgPluginParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgPluginParameter)(nil)).Elem()
}

func (o RdsPgPluginParameterOutput) ToRdsPgPluginParameterOutput() RdsPgPluginParameterOutput {
	return o
}

func (o RdsPgPluginParameterOutput) ToRdsPgPluginParameterOutputWithContext(ctx context.Context) RdsPgPluginParameterOutput {
	return o
}

// Indicates the default values of the plugin parameter.
func (o RdsPgPluginParameterOutput) DefaultValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RdsPgPluginParameter) pulumi.StringArrayOutput { return v.DefaultValues }).(pulumi.StringArrayOutput)
}

// Specifies the ID of RDS instance.
func (o RdsPgPluginParameterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginParameter) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the name of the plugin parameter.
func (o RdsPgPluginParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginParameter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RdsPgPluginParameterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginParameter) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates whether a reboot is required.
func (o RdsPgPluginParameterOutput) RestartRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *RdsPgPluginParameter) pulumi.BoolOutput { return v.RestartRequired }).(pulumi.BoolOutput)
}

// Specifies the list of plugin parameter values.
func (o RdsPgPluginParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RdsPgPluginParameter) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

type RdsPgPluginParameterArrayOutput struct{ *pulumi.OutputState }

func (RdsPgPluginParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgPluginParameter)(nil)).Elem()
}

func (o RdsPgPluginParameterArrayOutput) ToRdsPgPluginParameterArrayOutput() RdsPgPluginParameterArrayOutput {
	return o
}

func (o RdsPgPluginParameterArrayOutput) ToRdsPgPluginParameterArrayOutputWithContext(ctx context.Context) RdsPgPluginParameterArrayOutput {
	return o
}

func (o RdsPgPluginParameterArrayOutput) Index(i pulumi.IntInput) RdsPgPluginParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsPgPluginParameter {
		return vs[0].([]*RdsPgPluginParameter)[vs[1].(int)]
	}).(RdsPgPluginParameterOutput)
}

type RdsPgPluginParameterMapOutput struct{ *pulumi.OutputState }

func (RdsPgPluginParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgPluginParameter)(nil)).Elem()
}

func (o RdsPgPluginParameterMapOutput) ToRdsPgPluginParameterMapOutput() RdsPgPluginParameterMapOutput {
	return o
}

func (o RdsPgPluginParameterMapOutput) ToRdsPgPluginParameterMapOutputWithContext(ctx context.Context) RdsPgPluginParameterMapOutput {
	return o
}

func (o RdsPgPluginParameterMapOutput) MapIndex(k pulumi.StringInput) RdsPgPluginParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsPgPluginParameter {
		return vs[0].(map[string]*RdsPgPluginParameter)[vs[1].(string)]
	}).(RdsPgPluginParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginParameterInput)(nil)).Elem(), &RdsPgPluginParameter{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginParameterArrayInput)(nil)).Elem(), RdsPgPluginParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginParameterMapInput)(nil)).Elem(), RdsPgPluginParameterMap{})
	pulumi.RegisterOutputType(RdsPgPluginParameterOutput{})
	pulumi.RegisterOutputType(RdsPgPluginParameterArrayOutput{})
	pulumi.RegisterOutputType(RdsPgPluginParameterMapOutput{})
}
