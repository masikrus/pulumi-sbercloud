// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcepEndpoint struct {
	pulumi.CustomResourceState

	Description       pulumi.StringOutput      `pulumi:"description"`
	EnableDns         pulumi.BoolPtrOutput     `pulumi:"enableDns"`
	EnableWhitelist   pulumi.BoolPtrOutput     `pulumi:"enableWhitelist"`
	IpAddress         pulumi.StringOutput      `pulumi:"ipAddress"`
	NetworkId         pulumi.StringOutput      `pulumi:"networkId"`
	PacketId          pulumi.IntOutput         `pulumi:"packetId"`
	PrivateDomainName pulumi.StringOutput      `pulumi:"privateDomainName"`
	Region            pulumi.StringOutput      `pulumi:"region"`
	ServiceId         pulumi.StringOutput      `pulumi:"serviceId"`
	ServiceName       pulumi.StringOutput      `pulumi:"serviceName"`
	ServiceType       pulumi.StringOutput      `pulumi:"serviceType"`
	Status            pulumi.StringOutput      `pulumi:"status"`
	Tags              pulumi.StringMapOutput   `pulumi:"tags"`
	VpcId             pulumi.StringOutput      `pulumi:"vpcId"`
	Whitelists        pulumi.StringArrayOutput `pulumi:"whitelists"`
}

// NewVpcepEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVpcepEndpoint(ctx *pulumi.Context,
	name string, args *VpcepEndpointArgs, opts ...pulumi.ResourceOption) (*VpcepEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcepEndpoint
	err := ctx.RegisterResource("sbercloud:index/vpcepEndpoint:VpcepEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcepEndpoint gets an existing VpcepEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcepEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcepEndpointState, opts ...pulumi.ResourceOption) (*VpcepEndpoint, error) {
	var resource VpcepEndpoint
	err := ctx.ReadResource("sbercloud:index/vpcepEndpoint:VpcepEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcepEndpoint resources.
type vpcepEndpointState struct {
	Description       *string           `pulumi:"description"`
	EnableDns         *bool             `pulumi:"enableDns"`
	EnableWhitelist   *bool             `pulumi:"enableWhitelist"`
	IpAddress         *string           `pulumi:"ipAddress"`
	NetworkId         *string           `pulumi:"networkId"`
	PacketId          *int              `pulumi:"packetId"`
	PrivateDomainName *string           `pulumi:"privateDomainName"`
	Region            *string           `pulumi:"region"`
	ServiceId         *string           `pulumi:"serviceId"`
	ServiceName       *string           `pulumi:"serviceName"`
	ServiceType       *string           `pulumi:"serviceType"`
	Status            *string           `pulumi:"status"`
	Tags              map[string]string `pulumi:"tags"`
	VpcId             *string           `pulumi:"vpcId"`
	Whitelists        []string          `pulumi:"whitelists"`
}

type VpcepEndpointState struct {
	Description       pulumi.StringPtrInput
	EnableDns         pulumi.BoolPtrInput
	EnableWhitelist   pulumi.BoolPtrInput
	IpAddress         pulumi.StringPtrInput
	NetworkId         pulumi.StringPtrInput
	PacketId          pulumi.IntPtrInput
	PrivateDomainName pulumi.StringPtrInput
	Region            pulumi.StringPtrInput
	ServiceId         pulumi.StringPtrInput
	ServiceName       pulumi.StringPtrInput
	ServiceType       pulumi.StringPtrInput
	Status            pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	VpcId             pulumi.StringPtrInput
	Whitelists        pulumi.StringArrayInput
}

func (VpcepEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcepEndpointState)(nil)).Elem()
}

type vpcepEndpointArgs struct {
	Description     *string           `pulumi:"description"`
	EnableDns       *bool             `pulumi:"enableDns"`
	EnableWhitelist *bool             `pulumi:"enableWhitelist"`
	IpAddress       *string           `pulumi:"ipAddress"`
	NetworkId       string            `pulumi:"networkId"`
	Region          *string           `pulumi:"region"`
	ServiceId       string            `pulumi:"serviceId"`
	Tags            map[string]string `pulumi:"tags"`
	VpcId           string            `pulumi:"vpcId"`
	Whitelists      []string          `pulumi:"whitelists"`
}

// The set of arguments for constructing a VpcepEndpoint resource.
type VpcepEndpointArgs struct {
	Description     pulumi.StringPtrInput
	EnableDns       pulumi.BoolPtrInput
	EnableWhitelist pulumi.BoolPtrInput
	IpAddress       pulumi.StringPtrInput
	NetworkId       pulumi.StringInput
	Region          pulumi.StringPtrInput
	ServiceId       pulumi.StringInput
	Tags            pulumi.StringMapInput
	VpcId           pulumi.StringInput
	Whitelists      pulumi.StringArrayInput
}

func (VpcepEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcepEndpointArgs)(nil)).Elem()
}

type VpcepEndpointInput interface {
	pulumi.Input

	ToVpcepEndpointOutput() VpcepEndpointOutput
	ToVpcepEndpointOutputWithContext(ctx context.Context) VpcepEndpointOutput
}

func (*VpcepEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcepEndpoint)(nil)).Elem()
}

func (i *VpcepEndpoint) ToVpcepEndpointOutput() VpcepEndpointOutput {
	return i.ToVpcepEndpointOutputWithContext(context.Background())
}

func (i *VpcepEndpoint) ToVpcepEndpointOutputWithContext(ctx context.Context) VpcepEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcepEndpointOutput)
}

// VpcepEndpointArrayInput is an input type that accepts VpcepEndpointArray and VpcepEndpointArrayOutput values.
// You can construct a concrete instance of `VpcepEndpointArrayInput` via:
//
//	VpcepEndpointArray{ VpcepEndpointArgs{...} }
type VpcepEndpointArrayInput interface {
	pulumi.Input

	ToVpcepEndpointArrayOutput() VpcepEndpointArrayOutput
	ToVpcepEndpointArrayOutputWithContext(context.Context) VpcepEndpointArrayOutput
}

type VpcepEndpointArray []VpcepEndpointInput

func (VpcepEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcepEndpoint)(nil)).Elem()
}

func (i VpcepEndpointArray) ToVpcepEndpointArrayOutput() VpcepEndpointArrayOutput {
	return i.ToVpcepEndpointArrayOutputWithContext(context.Background())
}

func (i VpcepEndpointArray) ToVpcepEndpointArrayOutputWithContext(ctx context.Context) VpcepEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcepEndpointArrayOutput)
}

// VpcepEndpointMapInput is an input type that accepts VpcepEndpointMap and VpcepEndpointMapOutput values.
// You can construct a concrete instance of `VpcepEndpointMapInput` via:
//
//	VpcepEndpointMap{ "key": VpcepEndpointArgs{...} }
type VpcepEndpointMapInput interface {
	pulumi.Input

	ToVpcepEndpointMapOutput() VpcepEndpointMapOutput
	ToVpcepEndpointMapOutputWithContext(context.Context) VpcepEndpointMapOutput
}

type VpcepEndpointMap map[string]VpcepEndpointInput

func (VpcepEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcepEndpoint)(nil)).Elem()
}

func (i VpcepEndpointMap) ToVpcepEndpointMapOutput() VpcepEndpointMapOutput {
	return i.ToVpcepEndpointMapOutputWithContext(context.Background())
}

func (i VpcepEndpointMap) ToVpcepEndpointMapOutputWithContext(ctx context.Context) VpcepEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcepEndpointMapOutput)
}

type VpcepEndpointOutput struct{ *pulumi.OutputState }

func (VpcepEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcepEndpoint)(nil)).Elem()
}

func (o VpcepEndpointOutput) ToVpcepEndpointOutput() VpcepEndpointOutput {
	return o
}

func (o VpcepEndpointOutput) ToVpcepEndpointOutputWithContext(ctx context.Context) VpcepEndpointOutput {
	return o
}

func (o VpcepEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) EnableDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.BoolPtrOutput { return v.EnableDns }).(pulumi.BoolPtrOutput)
}

func (o VpcepEndpointOutput) EnableWhitelist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.BoolPtrOutput { return v.EnableWhitelist }).(pulumi.BoolPtrOutput)
}

func (o VpcepEndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) PacketId() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.IntOutput { return v.PacketId }).(pulumi.IntOutput)
}

func (o VpcepEndpointOutput) PrivateDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.PrivateDomainName }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VpcepEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func (o VpcepEndpointOutput) Whitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcepEndpoint) pulumi.StringArrayOutput { return v.Whitelists }).(pulumi.StringArrayOutput)
}

type VpcepEndpointArrayOutput struct{ *pulumi.OutputState }

func (VpcepEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcepEndpoint)(nil)).Elem()
}

func (o VpcepEndpointArrayOutput) ToVpcepEndpointArrayOutput() VpcepEndpointArrayOutput {
	return o
}

func (o VpcepEndpointArrayOutput) ToVpcepEndpointArrayOutputWithContext(ctx context.Context) VpcepEndpointArrayOutput {
	return o
}

func (o VpcepEndpointArrayOutput) Index(i pulumi.IntInput) VpcepEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcepEndpoint {
		return vs[0].([]*VpcepEndpoint)[vs[1].(int)]
	}).(VpcepEndpointOutput)
}

type VpcepEndpointMapOutput struct{ *pulumi.OutputState }

func (VpcepEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcepEndpoint)(nil)).Elem()
}

func (o VpcepEndpointMapOutput) ToVpcepEndpointMapOutput() VpcepEndpointMapOutput {
	return o
}

func (o VpcepEndpointMapOutput) ToVpcepEndpointMapOutputWithContext(ctx context.Context) VpcepEndpointMapOutput {
	return o
}

func (o VpcepEndpointMapOutput) MapIndex(k pulumi.StringInput) VpcepEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcepEndpoint {
		return vs[0].(map[string]*VpcepEndpoint)[vs[1].(string)]
	}).(VpcepEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcepEndpointInput)(nil)).Elem(), &VpcepEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcepEndpointArrayInput)(nil)).Elem(), VpcepEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcepEndpointMapInput)(nil)).Elem(), VpcepEndpointMap{})
	pulumi.RegisterOutputType(VpcepEndpointOutput{})
	pulumi.RegisterOutputType(VpcepEndpointArrayOutput{})
	pulumi.RegisterOutputType(VpcepEndpointMapOutput{})
}
