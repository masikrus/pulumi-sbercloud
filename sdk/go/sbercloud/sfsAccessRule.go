// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SfsAccessRule struct {
	pulumi.CustomResourceState

	AccessLevel pulumi.StringPtrOutput `pulumi:"accessLevel"`
	AccessTo    pulumi.StringOutput    `pulumi:"accessTo"`
	AccessType  pulumi.StringPtrOutput `pulumi:"accessType"`
	Region      pulumi.StringOutput    `pulumi:"region"`
	SfsId       pulumi.StringOutput    `pulumi:"sfsId"`
	Status      pulumi.StringOutput    `pulumi:"status"`
}

// NewSfsAccessRule registers a new resource with the given unique name, arguments, and options.
func NewSfsAccessRule(ctx *pulumi.Context,
	name string, args *SfsAccessRuleArgs, opts ...pulumi.ResourceOption) (*SfsAccessRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessTo == nil {
		return nil, errors.New("invalid value for required argument 'AccessTo'")
	}
	if args.SfsId == nil {
		return nil, errors.New("invalid value for required argument 'SfsId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfsAccessRule
	err := ctx.RegisterResource("sbercloud:index/sfsAccessRule:SfsAccessRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfsAccessRule gets an existing SfsAccessRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfsAccessRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfsAccessRuleState, opts ...pulumi.ResourceOption) (*SfsAccessRule, error) {
	var resource SfsAccessRule
	err := ctx.ReadResource("sbercloud:index/sfsAccessRule:SfsAccessRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfsAccessRule resources.
type sfsAccessRuleState struct {
	AccessLevel *string `pulumi:"accessLevel"`
	AccessTo    *string `pulumi:"accessTo"`
	AccessType  *string `pulumi:"accessType"`
	Region      *string `pulumi:"region"`
	SfsId       *string `pulumi:"sfsId"`
	Status      *string `pulumi:"status"`
}

type SfsAccessRuleState struct {
	AccessLevel pulumi.StringPtrInput
	AccessTo    pulumi.StringPtrInput
	AccessType  pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	SfsId       pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
}

func (SfsAccessRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsAccessRuleState)(nil)).Elem()
}

type sfsAccessRuleArgs struct {
	AccessLevel *string `pulumi:"accessLevel"`
	AccessTo    string  `pulumi:"accessTo"`
	AccessType  *string `pulumi:"accessType"`
	Region      *string `pulumi:"region"`
	SfsId       string  `pulumi:"sfsId"`
}

// The set of arguments for constructing a SfsAccessRule resource.
type SfsAccessRuleArgs struct {
	AccessLevel pulumi.StringPtrInput
	AccessTo    pulumi.StringInput
	AccessType  pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	SfsId       pulumi.StringInput
}

func (SfsAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsAccessRuleArgs)(nil)).Elem()
}

type SfsAccessRuleInput interface {
	pulumi.Input

	ToSfsAccessRuleOutput() SfsAccessRuleOutput
	ToSfsAccessRuleOutputWithContext(ctx context.Context) SfsAccessRuleOutput
}

func (*SfsAccessRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsAccessRule)(nil)).Elem()
}

func (i *SfsAccessRule) ToSfsAccessRuleOutput() SfsAccessRuleOutput {
	return i.ToSfsAccessRuleOutputWithContext(context.Background())
}

func (i *SfsAccessRule) ToSfsAccessRuleOutputWithContext(ctx context.Context) SfsAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsAccessRuleOutput)
}

// SfsAccessRuleArrayInput is an input type that accepts SfsAccessRuleArray and SfsAccessRuleArrayOutput values.
// You can construct a concrete instance of `SfsAccessRuleArrayInput` via:
//
//	SfsAccessRuleArray{ SfsAccessRuleArgs{...} }
type SfsAccessRuleArrayInput interface {
	pulumi.Input

	ToSfsAccessRuleArrayOutput() SfsAccessRuleArrayOutput
	ToSfsAccessRuleArrayOutputWithContext(context.Context) SfsAccessRuleArrayOutput
}

type SfsAccessRuleArray []SfsAccessRuleInput

func (SfsAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsAccessRule)(nil)).Elem()
}

func (i SfsAccessRuleArray) ToSfsAccessRuleArrayOutput() SfsAccessRuleArrayOutput {
	return i.ToSfsAccessRuleArrayOutputWithContext(context.Background())
}

func (i SfsAccessRuleArray) ToSfsAccessRuleArrayOutputWithContext(ctx context.Context) SfsAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsAccessRuleArrayOutput)
}

// SfsAccessRuleMapInput is an input type that accepts SfsAccessRuleMap and SfsAccessRuleMapOutput values.
// You can construct a concrete instance of `SfsAccessRuleMapInput` via:
//
//	SfsAccessRuleMap{ "key": SfsAccessRuleArgs{...} }
type SfsAccessRuleMapInput interface {
	pulumi.Input

	ToSfsAccessRuleMapOutput() SfsAccessRuleMapOutput
	ToSfsAccessRuleMapOutputWithContext(context.Context) SfsAccessRuleMapOutput
}

type SfsAccessRuleMap map[string]SfsAccessRuleInput

func (SfsAccessRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsAccessRule)(nil)).Elem()
}

func (i SfsAccessRuleMap) ToSfsAccessRuleMapOutput() SfsAccessRuleMapOutput {
	return i.ToSfsAccessRuleMapOutputWithContext(context.Background())
}

func (i SfsAccessRuleMap) ToSfsAccessRuleMapOutputWithContext(ctx context.Context) SfsAccessRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsAccessRuleMapOutput)
}

type SfsAccessRuleOutput struct{ *pulumi.OutputState }

func (SfsAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsAccessRule)(nil)).Elem()
}

func (o SfsAccessRuleOutput) ToSfsAccessRuleOutput() SfsAccessRuleOutput {
	return o
}

func (o SfsAccessRuleOutput) ToSfsAccessRuleOutputWithContext(ctx context.Context) SfsAccessRuleOutput {
	return o
}

func (o SfsAccessRuleOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SfsAccessRule) pulumi.StringPtrOutput { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o SfsAccessRuleOutput) AccessTo() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsAccessRule) pulumi.StringOutput { return v.AccessTo }).(pulumi.StringOutput)
}

func (o SfsAccessRuleOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SfsAccessRule) pulumi.StringPtrOutput { return v.AccessType }).(pulumi.StringPtrOutput)
}

func (o SfsAccessRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsAccessRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SfsAccessRuleOutput) SfsId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsAccessRule) pulumi.StringOutput { return v.SfsId }).(pulumi.StringOutput)
}

func (o SfsAccessRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsAccessRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type SfsAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (SfsAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsAccessRule)(nil)).Elem()
}

func (o SfsAccessRuleArrayOutput) ToSfsAccessRuleArrayOutput() SfsAccessRuleArrayOutput {
	return o
}

func (o SfsAccessRuleArrayOutput) ToSfsAccessRuleArrayOutputWithContext(ctx context.Context) SfsAccessRuleArrayOutput {
	return o
}

func (o SfsAccessRuleArrayOutput) Index(i pulumi.IntInput) SfsAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SfsAccessRule {
		return vs[0].([]*SfsAccessRule)[vs[1].(int)]
	}).(SfsAccessRuleOutput)
}

type SfsAccessRuleMapOutput struct{ *pulumi.OutputState }

func (SfsAccessRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsAccessRule)(nil)).Elem()
}

func (o SfsAccessRuleMapOutput) ToSfsAccessRuleMapOutput() SfsAccessRuleMapOutput {
	return o
}

func (o SfsAccessRuleMapOutput) ToSfsAccessRuleMapOutputWithContext(ctx context.Context) SfsAccessRuleMapOutput {
	return o
}

func (o SfsAccessRuleMapOutput) MapIndex(k pulumi.StringInput) SfsAccessRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SfsAccessRule {
		return vs[0].(map[string]*SfsAccessRule)[vs[1].(string)]
	}).(SfsAccessRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfsAccessRuleInput)(nil)).Elem(), &SfsAccessRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsAccessRuleArrayInput)(nil)).Elem(), SfsAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsAccessRuleMapInput)(nil)).Elem(), SfsAccessRuleMap{})
	pulumi.RegisterOutputType(SfsAccessRuleOutput{})
	pulumi.RegisterOutputType(SfsAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(SfsAccessRuleMapOutput{})
}
