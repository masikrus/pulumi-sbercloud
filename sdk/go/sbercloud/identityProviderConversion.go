// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityProviderConversion struct {
	pulumi.CustomResourceState

	ConversionRules IdentityProviderConversionConversionRuleArrayOutput `pulumi:"conversionRules"`
	ProviderId      pulumi.StringOutput                                 `pulumi:"providerId"`
}

// NewIdentityProviderConversion registers a new resource with the given unique name, arguments, and options.
func NewIdentityProviderConversion(ctx *pulumi.Context,
	name string, args *IdentityProviderConversionArgs, opts ...pulumi.ResourceOption) (*IdentityProviderConversion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConversionRules == nil {
		return nil, errors.New("invalid value for required argument 'ConversionRules'")
	}
	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityProviderConversion
	err := ctx.RegisterResource("sbercloud:index/identityProviderConversion:IdentityProviderConversion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProviderConversion gets an existing IdentityProviderConversion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProviderConversion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderConversionState, opts ...pulumi.ResourceOption) (*IdentityProviderConversion, error) {
	var resource IdentityProviderConversion
	err := ctx.ReadResource("sbercloud:index/identityProviderConversion:IdentityProviderConversion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProviderConversion resources.
type identityProviderConversionState struct {
	ConversionRules []IdentityProviderConversionConversionRule `pulumi:"conversionRules"`
	ProviderId      *string                                    `pulumi:"providerId"`
}

type IdentityProviderConversionState struct {
	ConversionRules IdentityProviderConversionConversionRuleArrayInput
	ProviderId      pulumi.StringPtrInput
}

func (IdentityProviderConversionState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderConversionState)(nil)).Elem()
}

type identityProviderConversionArgs struct {
	ConversionRules []IdentityProviderConversionConversionRule `pulumi:"conversionRules"`
	ProviderId      string                                     `pulumi:"providerId"`
}

// The set of arguments for constructing a IdentityProviderConversion resource.
type IdentityProviderConversionArgs struct {
	ConversionRules IdentityProviderConversionConversionRuleArrayInput
	ProviderId      pulumi.StringInput
}

func (IdentityProviderConversionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderConversionArgs)(nil)).Elem()
}

type IdentityProviderConversionInput interface {
	pulumi.Input

	ToIdentityProviderConversionOutput() IdentityProviderConversionOutput
	ToIdentityProviderConversionOutputWithContext(ctx context.Context) IdentityProviderConversionOutput
}

func (*IdentityProviderConversion) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderConversion)(nil)).Elem()
}

func (i *IdentityProviderConversion) ToIdentityProviderConversionOutput() IdentityProviderConversionOutput {
	return i.ToIdentityProviderConversionOutputWithContext(context.Background())
}

func (i *IdentityProviderConversion) ToIdentityProviderConversionOutputWithContext(ctx context.Context) IdentityProviderConversionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConversionOutput)
}

// IdentityProviderConversionArrayInput is an input type that accepts IdentityProviderConversionArray and IdentityProviderConversionArrayOutput values.
// You can construct a concrete instance of `IdentityProviderConversionArrayInput` via:
//
//	IdentityProviderConversionArray{ IdentityProviderConversionArgs{...} }
type IdentityProviderConversionArrayInput interface {
	pulumi.Input

	ToIdentityProviderConversionArrayOutput() IdentityProviderConversionArrayOutput
	ToIdentityProviderConversionArrayOutputWithContext(context.Context) IdentityProviderConversionArrayOutput
}

type IdentityProviderConversionArray []IdentityProviderConversionInput

func (IdentityProviderConversionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProviderConversion)(nil)).Elem()
}

func (i IdentityProviderConversionArray) ToIdentityProviderConversionArrayOutput() IdentityProviderConversionArrayOutput {
	return i.ToIdentityProviderConversionArrayOutputWithContext(context.Background())
}

func (i IdentityProviderConversionArray) ToIdentityProviderConversionArrayOutputWithContext(ctx context.Context) IdentityProviderConversionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConversionArrayOutput)
}

// IdentityProviderConversionMapInput is an input type that accepts IdentityProviderConversionMap and IdentityProviderConversionMapOutput values.
// You can construct a concrete instance of `IdentityProviderConversionMapInput` via:
//
//	IdentityProviderConversionMap{ "key": IdentityProviderConversionArgs{...} }
type IdentityProviderConversionMapInput interface {
	pulumi.Input

	ToIdentityProviderConversionMapOutput() IdentityProviderConversionMapOutput
	ToIdentityProviderConversionMapOutputWithContext(context.Context) IdentityProviderConversionMapOutput
}

type IdentityProviderConversionMap map[string]IdentityProviderConversionInput

func (IdentityProviderConversionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProviderConversion)(nil)).Elem()
}

func (i IdentityProviderConversionMap) ToIdentityProviderConversionMapOutput() IdentityProviderConversionMapOutput {
	return i.ToIdentityProviderConversionMapOutputWithContext(context.Background())
}

func (i IdentityProviderConversionMap) ToIdentityProviderConversionMapOutputWithContext(ctx context.Context) IdentityProviderConversionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConversionMapOutput)
}

type IdentityProviderConversionOutput struct{ *pulumi.OutputState }

func (IdentityProviderConversionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderConversion)(nil)).Elem()
}

func (o IdentityProviderConversionOutput) ToIdentityProviderConversionOutput() IdentityProviderConversionOutput {
	return o
}

func (o IdentityProviderConversionOutput) ToIdentityProviderConversionOutputWithContext(ctx context.Context) IdentityProviderConversionOutput {
	return o
}

func (o IdentityProviderConversionOutput) ConversionRules() IdentityProviderConversionConversionRuleArrayOutput {
	return o.ApplyT(func(v *IdentityProviderConversion) IdentityProviderConversionConversionRuleArrayOutput {
		return v.ConversionRules
	}).(IdentityProviderConversionConversionRuleArrayOutput)
}

func (o IdentityProviderConversionOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProviderConversion) pulumi.StringOutput { return v.ProviderId }).(pulumi.StringOutput)
}

type IdentityProviderConversionArrayOutput struct{ *pulumi.OutputState }

func (IdentityProviderConversionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProviderConversion)(nil)).Elem()
}

func (o IdentityProviderConversionArrayOutput) ToIdentityProviderConversionArrayOutput() IdentityProviderConversionArrayOutput {
	return o
}

func (o IdentityProviderConversionArrayOutput) ToIdentityProviderConversionArrayOutputWithContext(ctx context.Context) IdentityProviderConversionArrayOutput {
	return o
}

func (o IdentityProviderConversionArrayOutput) Index(i pulumi.IntInput) IdentityProviderConversionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityProviderConversion {
		return vs[0].([]*IdentityProviderConversion)[vs[1].(int)]
	}).(IdentityProviderConversionOutput)
}

type IdentityProviderConversionMapOutput struct{ *pulumi.OutputState }

func (IdentityProviderConversionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProviderConversion)(nil)).Elem()
}

func (o IdentityProviderConversionMapOutput) ToIdentityProviderConversionMapOutput() IdentityProviderConversionMapOutput {
	return o
}

func (o IdentityProviderConversionMapOutput) ToIdentityProviderConversionMapOutputWithContext(ctx context.Context) IdentityProviderConversionMapOutput {
	return o
}

func (o IdentityProviderConversionMapOutput) MapIndex(k pulumi.StringInput) IdentityProviderConversionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityProviderConversion {
		return vs[0].(map[string]*IdentityProviderConversion)[vs[1].(string)]
	}).(IdentityProviderConversionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConversionInput)(nil)).Elem(), &IdentityProviderConversion{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConversionArrayInput)(nil)).Elem(), IdentityProviderConversionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConversionMapInput)(nil)).Elem(), IdentityProviderConversionMap{})
	pulumi.RegisterOutputType(IdentityProviderConversionOutput{})
	pulumi.RegisterOutputType(IdentityProviderConversionArrayOutput{})
	pulumi.RegisterOutputType(IdentityProviderConversionMapOutput{})
}
