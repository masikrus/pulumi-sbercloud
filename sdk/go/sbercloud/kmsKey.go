// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KmsKey struct {
	pulumi.CustomResourceState

	CreationDate          pulumi.StringOutput    `pulumi:"creationDate"`
	DefaultKeyFlag        pulumi.StringOutput    `pulumi:"defaultKeyFlag"`
	DomainId              pulumi.StringOutput    `pulumi:"domainId"`
	EnterpriseProjectId   pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	ExpirationTime        pulumi.StringOutput    `pulumi:"expirationTime"`
	IsEnabled             pulumi.BoolPtrOutput   `pulumi:"isEnabled"`
	KeyAlgorithm          pulumi.StringOutput    `pulumi:"keyAlgorithm"`
	KeyAlias              pulumi.StringOutput    `pulumi:"keyAlias"`
	KeyDescription        pulumi.StringPtrOutput `pulumi:"keyDescription"`
	KeyId                 pulumi.StringOutput    `pulumi:"keyId"`
	KeyState              pulumi.StringOutput    `pulumi:"keyState"`
	KeyUsage              pulumi.StringOutput    `pulumi:"keyUsage"`
	KeystoreId            pulumi.StringOutput    `pulumi:"keystoreId"`
	Origin                pulumi.StringOutput    `pulumi:"origin"`
	PendingDays           pulumi.StringPtrOutput `pulumi:"pendingDays"`
	Region                pulumi.StringOutput    `pulumi:"region"`
	RotationEnabled       pulumi.BoolPtrOutput   `pulumi:"rotationEnabled"`
	RotationInterval      pulumi.IntOutput       `pulumi:"rotationInterval"`
	RotationNumber        pulumi.IntOutput       `pulumi:"rotationNumber"`
	ScheduledDeletionDate pulumi.StringOutput    `pulumi:"scheduledDeletionDate"`
	Tags                  pulumi.StringMapOutput `pulumi:"tags"`
}

// NewKmsKey registers a new resource with the given unique name, arguments, and options.
func NewKmsKey(ctx *pulumi.Context,
	name string, args *KmsKeyArgs, opts ...pulumi.ResourceOption) (*KmsKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyAlias == nil {
		return nil, errors.New("invalid value for required argument 'KeyAlias'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KmsKey
	err := ctx.RegisterResource("sbercloud:index/kmsKey:KmsKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsKey gets an existing KmsKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsKeyState, opts ...pulumi.ResourceOption) (*KmsKey, error) {
	var resource KmsKey
	err := ctx.ReadResource("sbercloud:index/kmsKey:KmsKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsKey resources.
type kmsKeyState struct {
	CreationDate          *string           `pulumi:"creationDate"`
	DefaultKeyFlag        *string           `pulumi:"defaultKeyFlag"`
	DomainId              *string           `pulumi:"domainId"`
	EnterpriseProjectId   *string           `pulumi:"enterpriseProjectId"`
	ExpirationTime        *string           `pulumi:"expirationTime"`
	IsEnabled             *bool             `pulumi:"isEnabled"`
	KeyAlgorithm          *string           `pulumi:"keyAlgorithm"`
	KeyAlias              *string           `pulumi:"keyAlias"`
	KeyDescription        *string           `pulumi:"keyDescription"`
	KeyId                 *string           `pulumi:"keyId"`
	KeyState              *string           `pulumi:"keyState"`
	KeyUsage              *string           `pulumi:"keyUsage"`
	KeystoreId            *string           `pulumi:"keystoreId"`
	Origin                *string           `pulumi:"origin"`
	PendingDays           *string           `pulumi:"pendingDays"`
	Region                *string           `pulumi:"region"`
	RotationEnabled       *bool             `pulumi:"rotationEnabled"`
	RotationInterval      *int              `pulumi:"rotationInterval"`
	RotationNumber        *int              `pulumi:"rotationNumber"`
	ScheduledDeletionDate *string           `pulumi:"scheduledDeletionDate"`
	Tags                  map[string]string `pulumi:"tags"`
}

type KmsKeyState struct {
	CreationDate          pulumi.StringPtrInput
	DefaultKeyFlag        pulumi.StringPtrInput
	DomainId              pulumi.StringPtrInput
	EnterpriseProjectId   pulumi.StringPtrInput
	ExpirationTime        pulumi.StringPtrInput
	IsEnabled             pulumi.BoolPtrInput
	KeyAlgorithm          pulumi.StringPtrInput
	KeyAlias              pulumi.StringPtrInput
	KeyDescription        pulumi.StringPtrInput
	KeyId                 pulumi.StringPtrInput
	KeyState              pulumi.StringPtrInput
	KeyUsage              pulumi.StringPtrInput
	KeystoreId            pulumi.StringPtrInput
	Origin                pulumi.StringPtrInput
	PendingDays           pulumi.StringPtrInput
	Region                pulumi.StringPtrInput
	RotationEnabled       pulumi.BoolPtrInput
	RotationInterval      pulumi.IntPtrInput
	RotationNumber        pulumi.IntPtrInput
	ScheduledDeletionDate pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (KmsKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyState)(nil)).Elem()
}

type kmsKeyArgs struct {
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	IsEnabled           *bool             `pulumi:"isEnabled"`
	KeyAlgorithm        *string           `pulumi:"keyAlgorithm"`
	KeyAlias            string            `pulumi:"keyAlias"`
	KeyDescription      *string           `pulumi:"keyDescription"`
	KeyUsage            *string           `pulumi:"keyUsage"`
	KeystoreId          *string           `pulumi:"keystoreId"`
	Origin              *string           `pulumi:"origin"`
	PendingDays         *string           `pulumi:"pendingDays"`
	Region              *string           `pulumi:"region"`
	RotationEnabled     *bool             `pulumi:"rotationEnabled"`
	RotationInterval    *int              `pulumi:"rotationInterval"`
	Tags                map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a KmsKey resource.
type KmsKeyArgs struct {
	EnterpriseProjectId pulumi.StringPtrInput
	IsEnabled           pulumi.BoolPtrInput
	KeyAlgorithm        pulumi.StringPtrInput
	KeyAlias            pulumi.StringInput
	KeyDescription      pulumi.StringPtrInput
	KeyUsage            pulumi.StringPtrInput
	KeystoreId          pulumi.StringPtrInput
	Origin              pulumi.StringPtrInput
	PendingDays         pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	RotationEnabled     pulumi.BoolPtrInput
	RotationInterval    pulumi.IntPtrInput
	Tags                pulumi.StringMapInput
}

func (KmsKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyArgs)(nil)).Elem()
}

type KmsKeyInput interface {
	pulumi.Input

	ToKmsKeyOutput() KmsKeyOutput
	ToKmsKeyOutputWithContext(ctx context.Context) KmsKeyOutput
}

func (*KmsKey) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKey)(nil)).Elem()
}

func (i *KmsKey) ToKmsKeyOutput() KmsKeyOutput {
	return i.ToKmsKeyOutputWithContext(context.Background())
}

func (i *KmsKey) ToKmsKeyOutputWithContext(ctx context.Context) KmsKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyOutput)
}

// KmsKeyArrayInput is an input type that accepts KmsKeyArray and KmsKeyArrayOutput values.
// You can construct a concrete instance of `KmsKeyArrayInput` via:
//
//	KmsKeyArray{ KmsKeyArgs{...} }
type KmsKeyArrayInput interface {
	pulumi.Input

	ToKmsKeyArrayOutput() KmsKeyArrayOutput
	ToKmsKeyArrayOutputWithContext(context.Context) KmsKeyArrayOutput
}

type KmsKeyArray []KmsKeyInput

func (KmsKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsKey)(nil)).Elem()
}

func (i KmsKeyArray) ToKmsKeyArrayOutput() KmsKeyArrayOutput {
	return i.ToKmsKeyArrayOutputWithContext(context.Background())
}

func (i KmsKeyArray) ToKmsKeyArrayOutputWithContext(ctx context.Context) KmsKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyArrayOutput)
}

// KmsKeyMapInput is an input type that accepts KmsKeyMap and KmsKeyMapOutput values.
// You can construct a concrete instance of `KmsKeyMapInput` via:
//
//	KmsKeyMap{ "key": KmsKeyArgs{...} }
type KmsKeyMapInput interface {
	pulumi.Input

	ToKmsKeyMapOutput() KmsKeyMapOutput
	ToKmsKeyMapOutputWithContext(context.Context) KmsKeyMapOutput
}

type KmsKeyMap map[string]KmsKeyInput

func (KmsKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsKey)(nil)).Elem()
}

func (i KmsKeyMap) ToKmsKeyMapOutput() KmsKeyMapOutput {
	return i.ToKmsKeyMapOutputWithContext(context.Background())
}

func (i KmsKeyMap) ToKmsKeyMapOutputWithContext(ctx context.Context) KmsKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyMapOutput)
}

type KmsKeyOutput struct{ *pulumi.OutputState }

func (KmsKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKey)(nil)).Elem()
}

func (o KmsKeyOutput) ToKmsKeyOutput() KmsKeyOutput {
	return o
}

func (o KmsKeyOutput) ToKmsKeyOutputWithContext(ctx context.Context) KmsKeyOutput {
	return o
}

func (o KmsKeyOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) DefaultKeyFlag() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.DefaultKeyFlag }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

func (o KmsKeyOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) KeyAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.KeyAlias }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) KeyDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringPtrOutput { return v.KeyDescription }).(pulumi.StringPtrOutput)
}

func (o KmsKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.KeyState }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.KeyUsage }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) KeystoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.KeystoreId }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) PendingDays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringPtrOutput { return v.PendingDays }).(pulumi.StringPtrOutput)
}

func (o KmsKeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) RotationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.BoolPtrOutput { return v.RotationEnabled }).(pulumi.BoolPtrOutput)
}

func (o KmsKeyOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

func (o KmsKeyOutput) RotationNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.IntOutput { return v.RotationNumber }).(pulumi.IntOutput)
}

func (o KmsKeyOutput) ScheduledDeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringOutput { return v.ScheduledDeletionDate }).(pulumi.StringOutput)
}

func (o KmsKeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KmsKey) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type KmsKeyArrayOutput struct{ *pulumi.OutputState }

func (KmsKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsKey)(nil)).Elem()
}

func (o KmsKeyArrayOutput) ToKmsKeyArrayOutput() KmsKeyArrayOutput {
	return o
}

func (o KmsKeyArrayOutput) ToKmsKeyArrayOutputWithContext(ctx context.Context) KmsKeyArrayOutput {
	return o
}

func (o KmsKeyArrayOutput) Index(i pulumi.IntInput) KmsKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KmsKey {
		return vs[0].([]*KmsKey)[vs[1].(int)]
	}).(KmsKeyOutput)
}

type KmsKeyMapOutput struct{ *pulumi.OutputState }

func (KmsKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsKey)(nil)).Elem()
}

func (o KmsKeyMapOutput) ToKmsKeyMapOutput() KmsKeyMapOutput {
	return o
}

func (o KmsKeyMapOutput) ToKmsKeyMapOutputWithContext(ctx context.Context) KmsKeyMapOutput {
	return o
}

func (o KmsKeyMapOutput) MapIndex(k pulumi.StringInput) KmsKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KmsKey {
		return vs[0].(map[string]*KmsKey)[vs[1].(string)]
	}).(KmsKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmsKeyInput)(nil)).Elem(), &KmsKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsKeyArrayInput)(nil)).Elem(), KmsKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsKeyMapInput)(nil)).Elem(), KmsKeyMap{})
	pulumi.RegisterOutputType(KmsKeyOutput{})
	pulumi.RegisterOutputType(KmsKeyArrayOutput{})
	pulumi.RegisterOutputType(KmsKeyMapOutput{})
}
