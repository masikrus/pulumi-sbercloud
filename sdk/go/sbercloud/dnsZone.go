// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsZone struct {
	pulumi.CustomResourceState

	// The description of the zone.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The email address of the administrator managing the zone.
	Email pulumi.StringOutput `pulumi:"email"`
	// The enterprise project ID of the zone.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The list of the masters of the DNS server.
	Masters pulumi.StringArrayOutput `pulumi:"masters"`
	// The name of the zone.
	Name pulumi.StringOutput `pulumi:"name"`
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern pulumi.StringOutput      `pulumi:"proxyPattern"`
	Region       pulumi.StringOutput      `pulumi:"region"`
	Routers      DnsZoneRouterArrayOutput `pulumi:"routers"`
	// The status of the zone.
	Status pulumi.StringOutput `pulumi:"status"`
	// The key/value pairs to associate with the zone.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The time to live (TTL) of the zone.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of zone.
	ZoneType pulumi.StringPtrOutput `pulumi:"zoneType"`
}

// NewDnsZone registers a new resource with the given unique name, arguments, and options.
func NewDnsZone(ctx *pulumi.Context,
	name string, args *DnsZoneArgs, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	if args == nil {
		args = &DnsZoneArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZone
	err := ctx.RegisterResource("sbercloud:index/dnsZone:DnsZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZone gets an existing DnsZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneState, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	var resource DnsZone
	err := ctx.ReadResource("sbercloud:index/dnsZone:DnsZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZone resources.
type dnsZoneState struct {
	// The description of the zone.
	Description *string `pulumi:"description"`
	// The email address of the administrator managing the zone.
	Email *string `pulumi:"email"`
	// The enterprise project ID of the zone.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The list of the masters of the DNS server.
	Masters []string `pulumi:"masters"`
	// The name of the zone.
	Name *string `pulumi:"name"`
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern *string         `pulumi:"proxyPattern"`
	Region       *string         `pulumi:"region"`
	Routers      []DnsZoneRouter `pulumi:"routers"`
	// The status of the zone.
	Status *string `pulumi:"status"`
	// The key/value pairs to associate with the zone.
	Tags map[string]string `pulumi:"tags"`
	// The time to live (TTL) of the zone.
	Ttl *int `pulumi:"ttl"`
	// The type of zone.
	ZoneType *string `pulumi:"zoneType"`
}

type DnsZoneState struct {
	// The description of the zone.
	Description pulumi.StringPtrInput
	// The email address of the administrator managing the zone.
	Email pulumi.StringPtrInput
	// The enterprise project ID of the zone.
	EnterpriseProjectId pulumi.StringPtrInput
	// The list of the masters of the DNS server.
	Masters pulumi.StringArrayInput
	// The name of the zone.
	Name pulumi.StringPtrInput
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Routers      DnsZoneRouterArrayInput
	// The status of the zone.
	Status pulumi.StringPtrInput
	// The key/value pairs to associate with the zone.
	Tags pulumi.StringMapInput
	// The time to live (TTL) of the zone.
	Ttl pulumi.IntPtrInput
	// The type of zone.
	ZoneType pulumi.StringPtrInput
}

func (DnsZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneState)(nil)).Elem()
}

type dnsZoneArgs struct {
	// The description of the zone.
	Description *string `pulumi:"description"`
	// The email address of the administrator managing the zone.
	Email *string `pulumi:"email"`
	// The enterprise project ID of the zone.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The name of the zone.
	Name *string `pulumi:"name"`
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern *string         `pulumi:"proxyPattern"`
	Region       *string         `pulumi:"region"`
	Routers      []DnsZoneRouter `pulumi:"routers"`
	// The status of the zone.
	Status *string `pulumi:"status"`
	// The key/value pairs to associate with the zone.
	Tags map[string]string `pulumi:"tags"`
	// The time to live (TTL) of the zone.
	Ttl *int `pulumi:"ttl"`
	// The type of zone.
	ZoneType *string `pulumi:"zoneType"`
}

// The set of arguments for constructing a DnsZone resource.
type DnsZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringPtrInput
	// The email address of the administrator managing the zone.
	Email pulumi.StringPtrInput
	// The enterprise project ID of the zone.
	EnterpriseProjectId pulumi.StringPtrInput
	// The name of the zone.
	Name pulumi.StringPtrInput
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Routers      DnsZoneRouterArrayInput
	// The status of the zone.
	Status pulumi.StringPtrInput
	// The key/value pairs to associate with the zone.
	Tags pulumi.StringMapInput
	// The time to live (TTL) of the zone.
	Ttl pulumi.IntPtrInput
	// The type of zone.
	ZoneType pulumi.StringPtrInput
}

func (DnsZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneArgs)(nil)).Elem()
}

type DnsZoneInput interface {
	pulumi.Input

	ToDnsZoneOutput() DnsZoneOutput
	ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput
}

func (*DnsZone) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (i *DnsZone) ToDnsZoneOutput() DnsZoneOutput {
	return i.ToDnsZoneOutputWithContext(context.Background())
}

func (i *DnsZone) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneOutput)
}

// DnsZoneArrayInput is an input type that accepts DnsZoneArray and DnsZoneArrayOutput values.
// You can construct a concrete instance of `DnsZoneArrayInput` via:
//
//	DnsZoneArray{ DnsZoneArgs{...} }
type DnsZoneArrayInput interface {
	pulumi.Input

	ToDnsZoneArrayOutput() DnsZoneArrayOutput
	ToDnsZoneArrayOutputWithContext(context.Context) DnsZoneArrayOutput
}

type DnsZoneArray []DnsZoneInput

func (DnsZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (i DnsZoneArray) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return i.ToDnsZoneArrayOutputWithContext(context.Background())
}

func (i DnsZoneArray) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneArrayOutput)
}

// DnsZoneMapInput is an input type that accepts DnsZoneMap and DnsZoneMapOutput values.
// You can construct a concrete instance of `DnsZoneMapInput` via:
//
//	DnsZoneMap{ "key": DnsZoneArgs{...} }
type DnsZoneMapInput interface {
	pulumi.Input

	ToDnsZoneMapOutput() DnsZoneMapOutput
	ToDnsZoneMapOutputWithContext(context.Context) DnsZoneMapOutput
}

type DnsZoneMap map[string]DnsZoneInput

func (DnsZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (i DnsZoneMap) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return i.ToDnsZoneMapOutputWithContext(context.Background())
}

func (i DnsZoneMap) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneMapOutput)
}

type DnsZoneOutput struct{ *pulumi.OutputState }

func (DnsZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (o DnsZoneOutput) ToDnsZoneOutput() DnsZoneOutput {
	return o
}

func (o DnsZoneOutput) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return o
}

// The description of the zone.
func (o DnsZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The email address of the administrator managing the zone.
func (o DnsZoneOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The enterprise project ID of the zone.
func (o DnsZoneOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The list of the masters of the DNS server.
func (o DnsZoneOutput) Masters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringArrayOutput { return v.Masters }).(pulumi.StringArrayOutput)
}

// The name of the zone.
func (o DnsZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The recursive resolution proxy mode for subdomains of the private zone.
func (o DnsZoneOutput) ProxyPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.ProxyPattern }).(pulumi.StringOutput)
}

func (o DnsZoneOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DnsZoneOutput) Routers() DnsZoneRouterArrayOutput {
	return o.ApplyT(func(v *DnsZone) DnsZoneRouterArrayOutput { return v.Routers }).(DnsZoneRouterArrayOutput)
}

// The status of the zone.
func (o DnsZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the zone.
func (o DnsZoneOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The time to live (TTL) of the zone.
func (o DnsZoneOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of zone.
func (o DnsZoneOutput) ZoneType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsZone) pulumi.StringPtrOutput { return v.ZoneType }).(pulumi.StringPtrOutput)
}

type DnsZoneArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) Index(i pulumi.IntInput) DnsZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].([]*DnsZone)[vs[1].(int)]
	}).(DnsZoneOutput)
}

type DnsZoneMapOutput struct{ *pulumi.OutputState }

func (DnsZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) MapIndex(k pulumi.StringInput) DnsZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].(map[string]*DnsZone)[vs[1].(string)]
	}).(DnsZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneInput)(nil)).Elem(), &DnsZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneArrayInput)(nil)).Elem(), DnsZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneMapInput)(nil)).Elem(), DnsZoneMap{})
	pulumi.RegisterOutputType(DnsZoneOutput{})
	pulumi.RegisterOutputType(DnsZoneArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneMapOutput{})
}
