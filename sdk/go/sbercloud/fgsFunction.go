// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FgsFunction struct {
	pulumi.CustomResourceState

	// The agency configuration of the function.
	Agency pulumi.StringPtrOutput `pulumi:"agency"`
	// The group to which the function belongs.
	App pulumi.StringPtrOutput `pulumi:"app"`
	// The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
	AppAgency pulumi.StringOutput `pulumi:"appAgency"`
	// The name of the function file.
	CodeFilename pulumi.StringOutput `pulumi:"codeFilename"`
	// The code type of the function.
	CodeType pulumi.StringOutput `pulumi:"codeType"`
	// The URL where the function code is stored in OBS.
	CodeUrl pulumi.StringPtrOutput `pulumi:"codeUrl"`
	// The number of concurrent requests of the function.
	ConcurrencyNum pulumi.IntOutput `pulumi:"concurrencyNum"`
	// The custom image configuration of the function.
	CustomImage FgsFunctionCustomImageOutput `pulumi:"customImage"`
	// The ID list of the dependencies.
	DependLists pulumi.StringArrayOutput `pulumi:"dependLists"`
	// The description of the function.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The private DNS configuration of the function network.
	DnsList pulumi.StringOutput `pulumi:"dnsList"`
	// Whether the authentication in the request header is enabled.
	EnableAuthInHeader pulumi.BoolPtrOutput `pulumi:"enableAuthInHeader"`
	// Whether the class isolation is enabled for the JAVA runtime functions.
	EnableClassIsolation pulumi.BoolPtrOutput `pulumi:"enableClassIsolation"`
	// Whether the dynamic memory configuration is enabled.
	EnableDynamicMemory pulumi.BoolPtrOutput `pulumi:"enableDynamicMemory"`
	// The key/value information defined to be encrypted for the function.
	EncryptedUserData pulumi.StringPtrOutput `pulumi:"encryptedUserData"`
	// The ID of the enterprise project to which the function belongs.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The size of the function ephemeral storage.
	EphemeralStorage pulumi.IntOutput `pulumi:"ephemeralStorage"`
	// The function code.
	FuncCode pulumi.StringPtrOutput `pulumi:"funcCode"`
	// The list of function mount configuration.
	FuncMounts FgsFunctionFuncMountArrayOutput `pulumi:"funcMounts"`
	// The description of the function.
	FunctiongraphVersion pulumi.StringOutput `pulumi:"functiongraphVersion"`
	// The GPU memory size allocated to the function, in MByte (MB).
	GpuMemory pulumi.IntPtrOutput `pulumi:"gpuMemory"`
	// The GPU type of the function.
	GpuType pulumi.StringPtrOutput `pulumi:"gpuType"`
	// The entry point of the function.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// The heartbeat handler of the function.
	HeartbeatHandler pulumi.StringPtrOutput `pulumi:"heartbeatHandler"`
	// The initializer of the function.
	InitializerHandler pulumi.StringOutput `pulumi:"initializerHandler"`
	// The maximum duration the function can be initialized.
	InitializerTimeout pulumi.IntOutput `pulumi:"initializerTimeout"`
	// Whether the function is a stateful function.
	IsStatefulFunction pulumi.BoolPtrOutput `pulumi:"isStatefulFunction"`
	// The LTS group ID for collecting logs.
	LogGroupId pulumi.StringOutput `pulumi:"logGroupId"`
	// The LTS group name for collecting logs.
	LogGroupName pulumi.StringOutput `pulumi:"logGroupName"`
	// The LTS stream ID for collecting logs.
	LogStreamId pulumi.StringOutput `pulumi:"logStreamId"`
	// The LTS stream name for collecting logs.
	LogStreamName pulumi.StringOutput `pulumi:"logStreamName"`
	// The maximum number of instances of the function.
	MaxInstanceNum pulumi.StringOutput `pulumi:"maxInstanceNum"`
	// The memory size allocated to the function, in MByte (MB).
	MemorySize pulumi.IntOutput `pulumi:"memorySize"`
	// The mount user group ID.
	MountUserGroupId pulumi.IntOutput `pulumi:"mountUserGroupId"`
	// The mount user ID.
	MountUserId pulumi.IntOutput `pulumi:"mountUserId"`
	// The name of the function.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network configuration of the function.
	NetworkController FgsFunctionNetworkControllerPtrOutput `pulumi:"networkController"`
	// The network ID of subnet.
	NetworkId pulumi.StringPtrOutput `pulumi:"networkId"`
	// Deprecated: use app instead
	Package pulumi.StringPtrOutput `pulumi:"package"`
	// The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
	// service.
	PeeringCidr pulumi.StringPtrOutput `pulumi:"peeringCidr"`
	// The pre-stop handler of a function.
	PreStopHandler pulumi.StringPtrOutput `pulumi:"preStopHandler"`
	// The maximum duration that the function can be initialized.
	PreStopTimeout pulumi.IntPtrOutput `pulumi:"preStopTimeout"`
	// The region where the function is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The reserved instance policies of the function.
	ReservedInstances FgsFunctionReservedInstanceArrayOutput `pulumi:"reservedInstances"`
	// The restore hook handler of the function.
	RestoreHookHandler pulumi.StringPtrOutput `pulumi:"restoreHookHandler"`
	// The timeout of the function restore hook.
	RestoreHookTimeout pulumi.IntPtrOutput `pulumi:"restoreHookTimeout"`
	// The environment for executing the function.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The key/value pairs to associate with the function.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The timeout interval of the function, in seconds.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The URN (Uniform Resource Name) of the function.
	Urn pulumi.StringOutput `pulumi:"urn"`
	// The key/value information defined for the function.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// The version of the function.
	Version pulumi.StringOutput `pulumi:"version"`
	// The versions management of the function.
	Versions FgsFunctionVersionArrayOutput `pulumi:"versions"`
	// The ID of the VPC to which the function belongs.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// Deprecated: use agency instead
	Xrole pulumi.StringPtrOutput `pulumi:"xrole"`
}

// NewFgsFunction registers a new resource with the given unique name, arguments, and options.
func NewFgsFunction(ctx *pulumi.Context,
	name string, args *FgsFunctionArgs, opts ...pulumi.ResourceOption) (*FgsFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemorySize == nil {
		return nil, errors.New("invalid value for required argument 'MemorySize'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	if args.EncryptedUserData != nil {
		args.EncryptedUserData = pulumi.ToSecret(args.EncryptedUserData).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"encryptedUserData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsFunction
	err := ctx.RegisterResource("sbercloud:index/fgsFunction:FgsFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsFunction gets an existing FgsFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsFunctionState, opts ...pulumi.ResourceOption) (*FgsFunction, error) {
	var resource FgsFunction
	err := ctx.ReadResource("sbercloud:index/fgsFunction:FgsFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsFunction resources.
type fgsFunctionState struct {
	// The agency configuration of the function.
	Agency *string `pulumi:"agency"`
	// The group to which the function belongs.
	App *string `pulumi:"app"`
	// The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
	AppAgency *string `pulumi:"appAgency"`
	// The name of the function file.
	CodeFilename *string `pulumi:"codeFilename"`
	// The code type of the function.
	CodeType *string `pulumi:"codeType"`
	// The URL where the function code is stored in OBS.
	CodeUrl *string `pulumi:"codeUrl"`
	// The number of concurrent requests of the function.
	ConcurrencyNum *int `pulumi:"concurrencyNum"`
	// The custom image configuration of the function.
	CustomImage *FgsFunctionCustomImage `pulumi:"customImage"`
	// The ID list of the dependencies.
	DependLists []string `pulumi:"dependLists"`
	// The description of the function.
	Description *string `pulumi:"description"`
	// The private DNS configuration of the function network.
	DnsList *string `pulumi:"dnsList"`
	// Whether the authentication in the request header is enabled.
	EnableAuthInHeader *bool `pulumi:"enableAuthInHeader"`
	// Whether the class isolation is enabled for the JAVA runtime functions.
	EnableClassIsolation *bool `pulumi:"enableClassIsolation"`
	// Whether the dynamic memory configuration is enabled.
	EnableDynamicMemory *bool `pulumi:"enableDynamicMemory"`
	// The key/value information defined to be encrypted for the function.
	EncryptedUserData *string `pulumi:"encryptedUserData"`
	// The ID of the enterprise project to which the function belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The size of the function ephemeral storage.
	EphemeralStorage *int `pulumi:"ephemeralStorage"`
	// The function code.
	FuncCode *string `pulumi:"funcCode"`
	// The list of function mount configuration.
	FuncMounts []FgsFunctionFuncMount `pulumi:"funcMounts"`
	// The description of the function.
	FunctiongraphVersion *string `pulumi:"functiongraphVersion"`
	// The GPU memory size allocated to the function, in MByte (MB).
	GpuMemory *int `pulumi:"gpuMemory"`
	// The GPU type of the function.
	GpuType *string `pulumi:"gpuType"`
	// The entry point of the function.
	Handler *string `pulumi:"handler"`
	// The heartbeat handler of the function.
	HeartbeatHandler *string `pulumi:"heartbeatHandler"`
	// The initializer of the function.
	InitializerHandler *string `pulumi:"initializerHandler"`
	// The maximum duration the function can be initialized.
	InitializerTimeout *int `pulumi:"initializerTimeout"`
	// Whether the function is a stateful function.
	IsStatefulFunction *bool `pulumi:"isStatefulFunction"`
	// The LTS group ID for collecting logs.
	LogGroupId *string `pulumi:"logGroupId"`
	// The LTS group name for collecting logs.
	LogGroupName *string `pulumi:"logGroupName"`
	// The LTS stream ID for collecting logs.
	LogStreamId *string `pulumi:"logStreamId"`
	// The LTS stream name for collecting logs.
	LogStreamName *string `pulumi:"logStreamName"`
	// The maximum number of instances of the function.
	MaxInstanceNum *string `pulumi:"maxInstanceNum"`
	// The memory size allocated to the function, in MByte (MB).
	MemorySize *int `pulumi:"memorySize"`
	// The mount user group ID.
	MountUserGroupId *int `pulumi:"mountUserGroupId"`
	// The mount user ID.
	MountUserId *int `pulumi:"mountUserId"`
	// The name of the function.
	Name *string `pulumi:"name"`
	// The network configuration of the function.
	NetworkController *FgsFunctionNetworkController `pulumi:"networkController"`
	// The network ID of subnet.
	NetworkId *string `pulumi:"networkId"`
	// Deprecated: use app instead
	Package *string `pulumi:"package"`
	// The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
	// service.
	PeeringCidr *string `pulumi:"peeringCidr"`
	// The pre-stop handler of a function.
	PreStopHandler *string `pulumi:"preStopHandler"`
	// The maximum duration that the function can be initialized.
	PreStopTimeout *int `pulumi:"preStopTimeout"`
	// The region where the function is located.
	Region *string `pulumi:"region"`
	// The reserved instance policies of the function.
	ReservedInstances []FgsFunctionReservedInstance `pulumi:"reservedInstances"`
	// The restore hook handler of the function.
	RestoreHookHandler *string `pulumi:"restoreHookHandler"`
	// The timeout of the function restore hook.
	RestoreHookTimeout *int `pulumi:"restoreHookTimeout"`
	// The environment for executing the function.
	Runtime *string `pulumi:"runtime"`
	// The key/value pairs to associate with the function.
	Tags map[string]string `pulumi:"tags"`
	// The timeout interval of the function, in seconds.
	Timeout *int `pulumi:"timeout"`
	// The URN (Uniform Resource Name) of the function.
	Urn *string `pulumi:"urn"`
	// The key/value information defined for the function.
	UserData *string `pulumi:"userData"`
	// The version of the function.
	Version *string `pulumi:"version"`
	// The versions management of the function.
	Versions []FgsFunctionVersion `pulumi:"versions"`
	// The ID of the VPC to which the function belongs.
	VpcId *string `pulumi:"vpcId"`
	// Deprecated: use agency instead
	Xrole *string `pulumi:"xrole"`
}

type FgsFunctionState struct {
	// The agency configuration of the function.
	Agency pulumi.StringPtrInput
	// The group to which the function belongs.
	App pulumi.StringPtrInput
	// The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
	AppAgency pulumi.StringPtrInput
	// The name of the function file.
	CodeFilename pulumi.StringPtrInput
	// The code type of the function.
	CodeType pulumi.StringPtrInput
	// The URL where the function code is stored in OBS.
	CodeUrl pulumi.StringPtrInput
	// The number of concurrent requests of the function.
	ConcurrencyNum pulumi.IntPtrInput
	// The custom image configuration of the function.
	CustomImage FgsFunctionCustomImagePtrInput
	// The ID list of the dependencies.
	DependLists pulumi.StringArrayInput
	// The description of the function.
	Description pulumi.StringPtrInput
	// The private DNS configuration of the function network.
	DnsList pulumi.StringPtrInput
	// Whether the authentication in the request header is enabled.
	EnableAuthInHeader pulumi.BoolPtrInput
	// Whether the class isolation is enabled for the JAVA runtime functions.
	EnableClassIsolation pulumi.BoolPtrInput
	// Whether the dynamic memory configuration is enabled.
	EnableDynamicMemory pulumi.BoolPtrInput
	// The key/value information defined to be encrypted for the function.
	EncryptedUserData pulumi.StringPtrInput
	// The ID of the enterprise project to which the function belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// The size of the function ephemeral storage.
	EphemeralStorage pulumi.IntPtrInput
	// The function code.
	FuncCode pulumi.StringPtrInput
	// The list of function mount configuration.
	FuncMounts FgsFunctionFuncMountArrayInput
	// The description of the function.
	FunctiongraphVersion pulumi.StringPtrInput
	// The GPU memory size allocated to the function, in MByte (MB).
	GpuMemory pulumi.IntPtrInput
	// The GPU type of the function.
	GpuType pulumi.StringPtrInput
	// The entry point of the function.
	Handler pulumi.StringPtrInput
	// The heartbeat handler of the function.
	HeartbeatHandler pulumi.StringPtrInput
	// The initializer of the function.
	InitializerHandler pulumi.StringPtrInput
	// The maximum duration the function can be initialized.
	InitializerTimeout pulumi.IntPtrInput
	// Whether the function is a stateful function.
	IsStatefulFunction pulumi.BoolPtrInput
	// The LTS group ID for collecting logs.
	LogGroupId pulumi.StringPtrInput
	// The LTS group name for collecting logs.
	LogGroupName pulumi.StringPtrInput
	// The LTS stream ID for collecting logs.
	LogStreamId pulumi.StringPtrInput
	// The LTS stream name for collecting logs.
	LogStreamName pulumi.StringPtrInput
	// The maximum number of instances of the function.
	MaxInstanceNum pulumi.StringPtrInput
	// The memory size allocated to the function, in MByte (MB).
	MemorySize pulumi.IntPtrInput
	// The mount user group ID.
	MountUserGroupId pulumi.IntPtrInput
	// The mount user ID.
	MountUserId pulumi.IntPtrInput
	// The name of the function.
	Name pulumi.StringPtrInput
	// The network configuration of the function.
	NetworkController FgsFunctionNetworkControllerPtrInput
	// The network ID of subnet.
	NetworkId pulumi.StringPtrInput
	// Deprecated: use app instead
	Package pulumi.StringPtrInput
	// The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
	// service.
	PeeringCidr pulumi.StringPtrInput
	// The pre-stop handler of a function.
	PreStopHandler pulumi.StringPtrInput
	// The maximum duration that the function can be initialized.
	PreStopTimeout pulumi.IntPtrInput
	// The region where the function is located.
	Region pulumi.StringPtrInput
	// The reserved instance policies of the function.
	ReservedInstances FgsFunctionReservedInstanceArrayInput
	// The restore hook handler of the function.
	RestoreHookHandler pulumi.StringPtrInput
	// The timeout of the function restore hook.
	RestoreHookTimeout pulumi.IntPtrInput
	// The environment for executing the function.
	Runtime pulumi.StringPtrInput
	// The key/value pairs to associate with the function.
	Tags pulumi.StringMapInput
	// The timeout interval of the function, in seconds.
	Timeout pulumi.IntPtrInput
	// The URN (Uniform Resource Name) of the function.
	Urn pulumi.StringPtrInput
	// The key/value information defined for the function.
	UserData pulumi.StringPtrInput
	// The version of the function.
	Version pulumi.StringPtrInput
	// The versions management of the function.
	Versions FgsFunctionVersionArrayInput
	// The ID of the VPC to which the function belongs.
	VpcId pulumi.StringPtrInput
	// Deprecated: use agency instead
	Xrole pulumi.StringPtrInput
}

func (FgsFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionState)(nil)).Elem()
}

type fgsFunctionArgs struct {
	// The agency configuration of the function.
	Agency *string `pulumi:"agency"`
	// The group to which the function belongs.
	App *string `pulumi:"app"`
	// The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
	AppAgency *string `pulumi:"appAgency"`
	// The name of the function file.
	CodeFilename *string `pulumi:"codeFilename"`
	// The code type of the function.
	CodeType *string `pulumi:"codeType"`
	// The URL where the function code is stored in OBS.
	CodeUrl *string `pulumi:"codeUrl"`
	// The number of concurrent requests of the function.
	ConcurrencyNum *int `pulumi:"concurrencyNum"`
	// The custom image configuration of the function.
	CustomImage *FgsFunctionCustomImage `pulumi:"customImage"`
	// The ID list of the dependencies.
	DependLists []string `pulumi:"dependLists"`
	// The description of the function.
	Description *string `pulumi:"description"`
	// The private DNS configuration of the function network.
	DnsList *string `pulumi:"dnsList"`
	// Whether the authentication in the request header is enabled.
	EnableAuthInHeader *bool `pulumi:"enableAuthInHeader"`
	// Whether the class isolation is enabled for the JAVA runtime functions.
	EnableClassIsolation *bool `pulumi:"enableClassIsolation"`
	// Whether the dynamic memory configuration is enabled.
	EnableDynamicMemory *bool `pulumi:"enableDynamicMemory"`
	// The key/value information defined to be encrypted for the function.
	EncryptedUserData *string `pulumi:"encryptedUserData"`
	// The ID of the enterprise project to which the function belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The size of the function ephemeral storage.
	EphemeralStorage *int `pulumi:"ephemeralStorage"`
	// The function code.
	FuncCode *string `pulumi:"funcCode"`
	// The list of function mount configuration.
	FuncMounts []FgsFunctionFuncMount `pulumi:"funcMounts"`
	// The description of the function.
	FunctiongraphVersion *string `pulumi:"functiongraphVersion"`
	// The GPU memory size allocated to the function, in MByte (MB).
	GpuMemory *int `pulumi:"gpuMemory"`
	// The GPU type of the function.
	GpuType *string `pulumi:"gpuType"`
	// The entry point of the function.
	Handler *string `pulumi:"handler"`
	// The heartbeat handler of the function.
	HeartbeatHandler *string `pulumi:"heartbeatHandler"`
	// The initializer of the function.
	InitializerHandler *string `pulumi:"initializerHandler"`
	// The maximum duration the function can be initialized.
	InitializerTimeout *int `pulumi:"initializerTimeout"`
	// Whether the function is a stateful function.
	IsStatefulFunction *bool `pulumi:"isStatefulFunction"`
	// The LTS group ID for collecting logs.
	LogGroupId *string `pulumi:"logGroupId"`
	// The LTS group name for collecting logs.
	LogGroupName *string `pulumi:"logGroupName"`
	// The LTS stream ID for collecting logs.
	LogStreamId *string `pulumi:"logStreamId"`
	// The LTS stream name for collecting logs.
	LogStreamName *string `pulumi:"logStreamName"`
	// The maximum number of instances of the function.
	MaxInstanceNum *string `pulumi:"maxInstanceNum"`
	// The memory size allocated to the function, in MByte (MB).
	MemorySize int `pulumi:"memorySize"`
	// The mount user group ID.
	MountUserGroupId *int `pulumi:"mountUserGroupId"`
	// The mount user ID.
	MountUserId *int `pulumi:"mountUserId"`
	// The name of the function.
	Name *string `pulumi:"name"`
	// The network configuration of the function.
	NetworkController *FgsFunctionNetworkController `pulumi:"networkController"`
	// The network ID of subnet.
	NetworkId *string `pulumi:"networkId"`
	// Deprecated: use app instead
	Package *string `pulumi:"package"`
	// The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
	// service.
	PeeringCidr *string `pulumi:"peeringCidr"`
	// The pre-stop handler of a function.
	PreStopHandler *string `pulumi:"preStopHandler"`
	// The maximum duration that the function can be initialized.
	PreStopTimeout *int `pulumi:"preStopTimeout"`
	// The region where the function is located.
	Region *string `pulumi:"region"`
	// The reserved instance policies of the function.
	ReservedInstances []FgsFunctionReservedInstance `pulumi:"reservedInstances"`
	// The restore hook handler of the function.
	RestoreHookHandler *string `pulumi:"restoreHookHandler"`
	// The timeout of the function restore hook.
	RestoreHookTimeout *int `pulumi:"restoreHookTimeout"`
	// The environment for executing the function.
	Runtime string `pulumi:"runtime"`
	// The key/value pairs to associate with the function.
	Tags map[string]string `pulumi:"tags"`
	// The timeout interval of the function, in seconds.
	Timeout int `pulumi:"timeout"`
	// The key/value information defined for the function.
	UserData *string `pulumi:"userData"`
	// The versions management of the function.
	Versions []FgsFunctionVersion `pulumi:"versions"`
	// The ID of the VPC to which the function belongs.
	VpcId *string `pulumi:"vpcId"`
	// Deprecated: use agency instead
	Xrole *string `pulumi:"xrole"`
}

// The set of arguments for constructing a FgsFunction resource.
type FgsFunctionArgs struct {
	// The agency configuration of the function.
	Agency pulumi.StringPtrInput
	// The group to which the function belongs.
	App pulumi.StringPtrInput
	// The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
	AppAgency pulumi.StringPtrInput
	// The name of the function file.
	CodeFilename pulumi.StringPtrInput
	// The code type of the function.
	CodeType pulumi.StringPtrInput
	// The URL where the function code is stored in OBS.
	CodeUrl pulumi.StringPtrInput
	// The number of concurrent requests of the function.
	ConcurrencyNum pulumi.IntPtrInput
	// The custom image configuration of the function.
	CustomImage FgsFunctionCustomImagePtrInput
	// The ID list of the dependencies.
	DependLists pulumi.StringArrayInput
	// The description of the function.
	Description pulumi.StringPtrInput
	// The private DNS configuration of the function network.
	DnsList pulumi.StringPtrInput
	// Whether the authentication in the request header is enabled.
	EnableAuthInHeader pulumi.BoolPtrInput
	// Whether the class isolation is enabled for the JAVA runtime functions.
	EnableClassIsolation pulumi.BoolPtrInput
	// Whether the dynamic memory configuration is enabled.
	EnableDynamicMemory pulumi.BoolPtrInput
	// The key/value information defined to be encrypted for the function.
	EncryptedUserData pulumi.StringPtrInput
	// The ID of the enterprise project to which the function belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// The size of the function ephemeral storage.
	EphemeralStorage pulumi.IntPtrInput
	// The function code.
	FuncCode pulumi.StringPtrInput
	// The list of function mount configuration.
	FuncMounts FgsFunctionFuncMountArrayInput
	// The description of the function.
	FunctiongraphVersion pulumi.StringPtrInput
	// The GPU memory size allocated to the function, in MByte (MB).
	GpuMemory pulumi.IntPtrInput
	// The GPU type of the function.
	GpuType pulumi.StringPtrInput
	// The entry point of the function.
	Handler pulumi.StringPtrInput
	// The heartbeat handler of the function.
	HeartbeatHandler pulumi.StringPtrInput
	// The initializer of the function.
	InitializerHandler pulumi.StringPtrInput
	// The maximum duration the function can be initialized.
	InitializerTimeout pulumi.IntPtrInput
	// Whether the function is a stateful function.
	IsStatefulFunction pulumi.BoolPtrInput
	// The LTS group ID for collecting logs.
	LogGroupId pulumi.StringPtrInput
	// The LTS group name for collecting logs.
	LogGroupName pulumi.StringPtrInput
	// The LTS stream ID for collecting logs.
	LogStreamId pulumi.StringPtrInput
	// The LTS stream name for collecting logs.
	LogStreamName pulumi.StringPtrInput
	// The maximum number of instances of the function.
	MaxInstanceNum pulumi.StringPtrInput
	// The memory size allocated to the function, in MByte (MB).
	MemorySize pulumi.IntInput
	// The mount user group ID.
	MountUserGroupId pulumi.IntPtrInput
	// The mount user ID.
	MountUserId pulumi.IntPtrInput
	// The name of the function.
	Name pulumi.StringPtrInput
	// The network configuration of the function.
	NetworkController FgsFunctionNetworkControllerPtrInput
	// The network ID of subnet.
	NetworkId pulumi.StringPtrInput
	// Deprecated: use app instead
	Package pulumi.StringPtrInput
	// The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
	// service.
	PeeringCidr pulumi.StringPtrInput
	// The pre-stop handler of a function.
	PreStopHandler pulumi.StringPtrInput
	// The maximum duration that the function can be initialized.
	PreStopTimeout pulumi.IntPtrInput
	// The region where the function is located.
	Region pulumi.StringPtrInput
	// The reserved instance policies of the function.
	ReservedInstances FgsFunctionReservedInstanceArrayInput
	// The restore hook handler of the function.
	RestoreHookHandler pulumi.StringPtrInput
	// The timeout of the function restore hook.
	RestoreHookTimeout pulumi.IntPtrInput
	// The environment for executing the function.
	Runtime pulumi.StringInput
	// The key/value pairs to associate with the function.
	Tags pulumi.StringMapInput
	// The timeout interval of the function, in seconds.
	Timeout pulumi.IntInput
	// The key/value information defined for the function.
	UserData pulumi.StringPtrInput
	// The versions management of the function.
	Versions FgsFunctionVersionArrayInput
	// The ID of the VPC to which the function belongs.
	VpcId pulumi.StringPtrInput
	// Deprecated: use agency instead
	Xrole pulumi.StringPtrInput
}

func (FgsFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionArgs)(nil)).Elem()
}

type FgsFunctionInput interface {
	pulumi.Input

	ToFgsFunctionOutput() FgsFunctionOutput
	ToFgsFunctionOutputWithContext(ctx context.Context) FgsFunctionOutput
}

func (*FgsFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunction)(nil)).Elem()
}

func (i *FgsFunction) ToFgsFunctionOutput() FgsFunctionOutput {
	return i.ToFgsFunctionOutputWithContext(context.Background())
}

func (i *FgsFunction) ToFgsFunctionOutputWithContext(ctx context.Context) FgsFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionOutput)
}

// FgsFunctionArrayInput is an input type that accepts FgsFunctionArray and FgsFunctionArrayOutput values.
// You can construct a concrete instance of `FgsFunctionArrayInput` via:
//
//	FgsFunctionArray{ FgsFunctionArgs{...} }
type FgsFunctionArrayInput interface {
	pulumi.Input

	ToFgsFunctionArrayOutput() FgsFunctionArrayOutput
	ToFgsFunctionArrayOutputWithContext(context.Context) FgsFunctionArrayOutput
}

type FgsFunctionArray []FgsFunctionInput

func (FgsFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunction)(nil)).Elem()
}

func (i FgsFunctionArray) ToFgsFunctionArrayOutput() FgsFunctionArrayOutput {
	return i.ToFgsFunctionArrayOutputWithContext(context.Background())
}

func (i FgsFunctionArray) ToFgsFunctionArrayOutputWithContext(ctx context.Context) FgsFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionArrayOutput)
}

// FgsFunctionMapInput is an input type that accepts FgsFunctionMap and FgsFunctionMapOutput values.
// You can construct a concrete instance of `FgsFunctionMapInput` via:
//
//	FgsFunctionMap{ "key": FgsFunctionArgs{...} }
type FgsFunctionMapInput interface {
	pulumi.Input

	ToFgsFunctionMapOutput() FgsFunctionMapOutput
	ToFgsFunctionMapOutputWithContext(context.Context) FgsFunctionMapOutput
}

type FgsFunctionMap map[string]FgsFunctionInput

func (FgsFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunction)(nil)).Elem()
}

func (i FgsFunctionMap) ToFgsFunctionMapOutput() FgsFunctionMapOutput {
	return i.ToFgsFunctionMapOutputWithContext(context.Background())
}

func (i FgsFunctionMap) ToFgsFunctionMapOutputWithContext(ctx context.Context) FgsFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionMapOutput)
}

type FgsFunctionOutput struct{ *pulumi.OutputState }

func (FgsFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunction)(nil)).Elem()
}

func (o FgsFunctionOutput) ToFgsFunctionOutput() FgsFunctionOutput {
	return o
}

func (o FgsFunctionOutput) ToFgsFunctionOutputWithContext(ctx context.Context) FgsFunctionOutput {
	return o
}

// The agency configuration of the function.
func (o FgsFunctionOutput) Agency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.Agency }).(pulumi.StringPtrOutput)
}

// The group to which the function belongs.
func (o FgsFunctionOutput) App() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.App }).(pulumi.StringPtrOutput)
}

// The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
func (o FgsFunctionOutput) AppAgency() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.AppAgency }).(pulumi.StringOutput)
}

// The name of the function file.
func (o FgsFunctionOutput) CodeFilename() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.CodeFilename }).(pulumi.StringOutput)
}

// The code type of the function.
func (o FgsFunctionOutput) CodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.CodeType }).(pulumi.StringOutput)
}

// The URL where the function code is stored in OBS.
func (o FgsFunctionOutput) CodeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.CodeUrl }).(pulumi.StringPtrOutput)
}

// The number of concurrent requests of the function.
func (o FgsFunctionOutput) ConcurrencyNum() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.ConcurrencyNum }).(pulumi.IntOutput)
}

// The custom image configuration of the function.
func (o FgsFunctionOutput) CustomImage() FgsFunctionCustomImageOutput {
	return o.ApplyT(func(v *FgsFunction) FgsFunctionCustomImageOutput { return v.CustomImage }).(FgsFunctionCustomImageOutput)
}

// The ID list of the dependencies.
func (o FgsFunctionOutput) DependLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringArrayOutput { return v.DependLists }).(pulumi.StringArrayOutput)
}

// The description of the function.
func (o FgsFunctionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The private DNS configuration of the function network.
func (o FgsFunctionOutput) DnsList() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.DnsList }).(pulumi.StringOutput)
}

// Whether the authentication in the request header is enabled.
func (o FgsFunctionOutput) EnableAuthInHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.BoolPtrOutput { return v.EnableAuthInHeader }).(pulumi.BoolPtrOutput)
}

// Whether the class isolation is enabled for the JAVA runtime functions.
func (o FgsFunctionOutput) EnableClassIsolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.BoolPtrOutput { return v.EnableClassIsolation }).(pulumi.BoolPtrOutput)
}

// Whether the dynamic memory configuration is enabled.
func (o FgsFunctionOutput) EnableDynamicMemory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.BoolPtrOutput { return v.EnableDynamicMemory }).(pulumi.BoolPtrOutput)
}

// The key/value information defined to be encrypted for the function.
func (o FgsFunctionOutput) EncryptedUserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.EncryptedUserData }).(pulumi.StringPtrOutput)
}

// The ID of the enterprise project to which the function belongs.
func (o FgsFunctionOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The size of the function ephemeral storage.
func (o FgsFunctionOutput) EphemeralStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.EphemeralStorage }).(pulumi.IntOutput)
}

// The function code.
func (o FgsFunctionOutput) FuncCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.FuncCode }).(pulumi.StringPtrOutput)
}

// The list of function mount configuration.
func (o FgsFunctionOutput) FuncMounts() FgsFunctionFuncMountArrayOutput {
	return o.ApplyT(func(v *FgsFunction) FgsFunctionFuncMountArrayOutput { return v.FuncMounts }).(FgsFunctionFuncMountArrayOutput)
}

// The description of the function.
func (o FgsFunctionOutput) FunctiongraphVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.FunctiongraphVersion }).(pulumi.StringOutput)
}

// The GPU memory size allocated to the function, in MByte (MB).
func (o FgsFunctionOutput) GpuMemory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntPtrOutput { return v.GpuMemory }).(pulumi.IntPtrOutput)
}

// The GPU type of the function.
func (o FgsFunctionOutput) GpuType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.GpuType }).(pulumi.StringPtrOutput)
}

// The entry point of the function.
func (o FgsFunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// The heartbeat handler of the function.
func (o FgsFunctionOutput) HeartbeatHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.HeartbeatHandler }).(pulumi.StringPtrOutput)
}

// The initializer of the function.
func (o FgsFunctionOutput) InitializerHandler() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.InitializerHandler }).(pulumi.StringOutput)
}

// The maximum duration the function can be initialized.
func (o FgsFunctionOutput) InitializerTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.InitializerTimeout }).(pulumi.IntOutput)
}

// Whether the function is a stateful function.
func (o FgsFunctionOutput) IsStatefulFunction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.BoolPtrOutput { return v.IsStatefulFunction }).(pulumi.BoolPtrOutput)
}

// The LTS group ID for collecting logs.
func (o FgsFunctionOutput) LogGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.LogGroupId }).(pulumi.StringOutput)
}

// The LTS group name for collecting logs.
func (o FgsFunctionOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

// The LTS stream ID for collecting logs.
func (o FgsFunctionOutput) LogStreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.LogStreamId }).(pulumi.StringOutput)
}

// The LTS stream name for collecting logs.
func (o FgsFunctionOutput) LogStreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.LogStreamName }).(pulumi.StringOutput)
}

// The maximum number of instances of the function.
func (o FgsFunctionOutput) MaxInstanceNum() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.MaxInstanceNum }).(pulumi.StringOutput)
}

// The memory size allocated to the function, in MByte (MB).
func (o FgsFunctionOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.MemorySize }).(pulumi.IntOutput)
}

// The mount user group ID.
func (o FgsFunctionOutput) MountUserGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.MountUserGroupId }).(pulumi.IntOutput)
}

// The mount user ID.
func (o FgsFunctionOutput) MountUserId() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.MountUserId }).(pulumi.IntOutput)
}

// The name of the function.
func (o FgsFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network configuration of the function.
func (o FgsFunctionOutput) NetworkController() FgsFunctionNetworkControllerPtrOutput {
	return o.ApplyT(func(v *FgsFunction) FgsFunctionNetworkControllerPtrOutput { return v.NetworkController }).(FgsFunctionNetworkControllerPtrOutput)
}

// The network ID of subnet.
func (o FgsFunctionOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.NetworkId }).(pulumi.StringPtrOutput)
}

// Deprecated: use app instead
func (o FgsFunctionOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.Package }).(pulumi.StringPtrOutput)
}

// The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
// service.
func (o FgsFunctionOutput) PeeringCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.PeeringCidr }).(pulumi.StringPtrOutput)
}

// The pre-stop handler of a function.
func (o FgsFunctionOutput) PreStopHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.PreStopHandler }).(pulumi.StringPtrOutput)
}

// The maximum duration that the function can be initialized.
func (o FgsFunctionOutput) PreStopTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntPtrOutput { return v.PreStopTimeout }).(pulumi.IntPtrOutput)
}

// The region where the function is located.
func (o FgsFunctionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The reserved instance policies of the function.
func (o FgsFunctionOutput) ReservedInstances() FgsFunctionReservedInstanceArrayOutput {
	return o.ApplyT(func(v *FgsFunction) FgsFunctionReservedInstanceArrayOutput { return v.ReservedInstances }).(FgsFunctionReservedInstanceArrayOutput)
}

// The restore hook handler of the function.
func (o FgsFunctionOutput) RestoreHookHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.RestoreHookHandler }).(pulumi.StringPtrOutput)
}

// The timeout of the function restore hook.
func (o FgsFunctionOutput) RestoreHookTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntPtrOutput { return v.RestoreHookTimeout }).(pulumi.IntPtrOutput)
}

// The environment for executing the function.
func (o FgsFunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the function.
func (o FgsFunctionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The timeout interval of the function, in seconds.
func (o FgsFunctionOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// The URN (Uniform Resource Name) of the function.
func (o FgsFunctionOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.Urn }).(pulumi.StringOutput)
}

// The key/value information defined for the function.
func (o FgsFunctionOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// The version of the function.
func (o FgsFunctionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The versions management of the function.
func (o FgsFunctionOutput) Versions() FgsFunctionVersionArrayOutput {
	return o.ApplyT(func(v *FgsFunction) FgsFunctionVersionArrayOutput { return v.Versions }).(FgsFunctionVersionArrayOutput)
}

// The ID of the VPC to which the function belongs.
func (o FgsFunctionOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// Deprecated: use agency instead
func (o FgsFunctionOutput) Xrole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunction) pulumi.StringPtrOutput { return v.Xrole }).(pulumi.StringPtrOutput)
}

type FgsFunctionArrayOutput struct{ *pulumi.OutputState }

func (FgsFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunction)(nil)).Elem()
}

func (o FgsFunctionArrayOutput) ToFgsFunctionArrayOutput() FgsFunctionArrayOutput {
	return o
}

func (o FgsFunctionArrayOutput) ToFgsFunctionArrayOutputWithContext(ctx context.Context) FgsFunctionArrayOutput {
	return o
}

func (o FgsFunctionArrayOutput) Index(i pulumi.IntInput) FgsFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsFunction {
		return vs[0].([]*FgsFunction)[vs[1].(int)]
	}).(FgsFunctionOutput)
}

type FgsFunctionMapOutput struct{ *pulumi.OutputState }

func (FgsFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunction)(nil)).Elem()
}

func (o FgsFunctionMapOutput) ToFgsFunctionMapOutput() FgsFunctionMapOutput {
	return o
}

func (o FgsFunctionMapOutput) ToFgsFunctionMapOutputWithContext(ctx context.Context) FgsFunctionMapOutput {
	return o
}

func (o FgsFunctionMapOutput) MapIndex(k pulumi.StringInput) FgsFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsFunction {
		return vs[0].(map[string]*FgsFunction)[vs[1].(string)]
	}).(FgsFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionInput)(nil)).Elem(), &FgsFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionArrayInput)(nil)).Elem(), FgsFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionMapInput)(nil)).Elem(), FgsFunctionMap{})
	pulumi.RegisterOutputType(FgsFunctionOutput{})
	pulumi.RegisterOutputType(FgsFunctionArrayOutput{})
	pulumi.RegisterOutputType(FgsFunctionMapOutput{})
}
