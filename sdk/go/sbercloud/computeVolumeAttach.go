// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeVolumeAttach struct {
	pulumi.CustomResourceState

	Device     pulumi.StringOutput `pulumi:"device"`
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	PciAddress pulumi.StringOutput `pulumi:"pciAddress"`
	Region     pulumi.StringOutput `pulumi:"region"`
	VolumeId   pulumi.StringOutput `pulumi:"volumeId"`
}

// NewComputeVolumeAttach registers a new resource with the given unique name, arguments, and options.
func NewComputeVolumeAttach(ctx *pulumi.Context,
	name string, args *ComputeVolumeAttachArgs, opts ...pulumi.ResourceOption) (*ComputeVolumeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeVolumeAttach
	err := ctx.RegisterResource("sbercloud:index/computeVolumeAttach:ComputeVolumeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeVolumeAttach gets an existing ComputeVolumeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeVolumeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeVolumeAttachState, opts ...pulumi.ResourceOption) (*ComputeVolumeAttach, error) {
	var resource ComputeVolumeAttach
	err := ctx.ReadResource("sbercloud:index/computeVolumeAttach:ComputeVolumeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeVolumeAttach resources.
type computeVolumeAttachState struct {
	Device     *string `pulumi:"device"`
	InstanceId *string `pulumi:"instanceId"`
	PciAddress *string `pulumi:"pciAddress"`
	Region     *string `pulumi:"region"`
	VolumeId   *string `pulumi:"volumeId"`
}

type ComputeVolumeAttachState struct {
	Device     pulumi.StringPtrInput
	InstanceId pulumi.StringPtrInput
	PciAddress pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	VolumeId   pulumi.StringPtrInput
}

func (ComputeVolumeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeVolumeAttachState)(nil)).Elem()
}

type computeVolumeAttachArgs struct {
	Device     *string `pulumi:"device"`
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	VolumeId   string  `pulumi:"volumeId"`
}

// The set of arguments for constructing a ComputeVolumeAttach resource.
type ComputeVolumeAttachArgs struct {
	Device     pulumi.StringPtrInput
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
	VolumeId   pulumi.StringInput
}

func (ComputeVolumeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeVolumeAttachArgs)(nil)).Elem()
}

type ComputeVolumeAttachInput interface {
	pulumi.Input

	ToComputeVolumeAttachOutput() ComputeVolumeAttachOutput
	ToComputeVolumeAttachOutputWithContext(ctx context.Context) ComputeVolumeAttachOutput
}

func (*ComputeVolumeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeVolumeAttach)(nil)).Elem()
}

func (i *ComputeVolumeAttach) ToComputeVolumeAttachOutput() ComputeVolumeAttachOutput {
	return i.ToComputeVolumeAttachOutputWithContext(context.Background())
}

func (i *ComputeVolumeAttach) ToComputeVolumeAttachOutputWithContext(ctx context.Context) ComputeVolumeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeVolumeAttachOutput)
}

// ComputeVolumeAttachArrayInput is an input type that accepts ComputeVolumeAttachArray and ComputeVolumeAttachArrayOutput values.
// You can construct a concrete instance of `ComputeVolumeAttachArrayInput` via:
//
//	ComputeVolumeAttachArray{ ComputeVolumeAttachArgs{...} }
type ComputeVolumeAttachArrayInput interface {
	pulumi.Input

	ToComputeVolumeAttachArrayOutput() ComputeVolumeAttachArrayOutput
	ToComputeVolumeAttachArrayOutputWithContext(context.Context) ComputeVolumeAttachArrayOutput
}

type ComputeVolumeAttachArray []ComputeVolumeAttachInput

func (ComputeVolumeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeVolumeAttach)(nil)).Elem()
}

func (i ComputeVolumeAttachArray) ToComputeVolumeAttachArrayOutput() ComputeVolumeAttachArrayOutput {
	return i.ToComputeVolumeAttachArrayOutputWithContext(context.Background())
}

func (i ComputeVolumeAttachArray) ToComputeVolumeAttachArrayOutputWithContext(ctx context.Context) ComputeVolumeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeVolumeAttachArrayOutput)
}

// ComputeVolumeAttachMapInput is an input type that accepts ComputeVolumeAttachMap and ComputeVolumeAttachMapOutput values.
// You can construct a concrete instance of `ComputeVolumeAttachMapInput` via:
//
//	ComputeVolumeAttachMap{ "key": ComputeVolumeAttachArgs{...} }
type ComputeVolumeAttachMapInput interface {
	pulumi.Input

	ToComputeVolumeAttachMapOutput() ComputeVolumeAttachMapOutput
	ToComputeVolumeAttachMapOutputWithContext(context.Context) ComputeVolumeAttachMapOutput
}

type ComputeVolumeAttachMap map[string]ComputeVolumeAttachInput

func (ComputeVolumeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeVolumeAttach)(nil)).Elem()
}

func (i ComputeVolumeAttachMap) ToComputeVolumeAttachMapOutput() ComputeVolumeAttachMapOutput {
	return i.ToComputeVolumeAttachMapOutputWithContext(context.Background())
}

func (i ComputeVolumeAttachMap) ToComputeVolumeAttachMapOutputWithContext(ctx context.Context) ComputeVolumeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeVolumeAttachMapOutput)
}

type ComputeVolumeAttachOutput struct{ *pulumi.OutputState }

func (ComputeVolumeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeVolumeAttach)(nil)).Elem()
}

func (o ComputeVolumeAttachOutput) ToComputeVolumeAttachOutput() ComputeVolumeAttachOutput {
	return o
}

func (o ComputeVolumeAttachOutput) ToComputeVolumeAttachOutputWithContext(ctx context.Context) ComputeVolumeAttachOutput {
	return o
}

func (o ComputeVolumeAttachOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeVolumeAttach) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

func (o ComputeVolumeAttachOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeVolumeAttach) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ComputeVolumeAttachOutput) PciAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeVolumeAttach) pulumi.StringOutput { return v.PciAddress }).(pulumi.StringOutput)
}

func (o ComputeVolumeAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeVolumeAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ComputeVolumeAttachOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeVolumeAttach) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type ComputeVolumeAttachArrayOutput struct{ *pulumi.OutputState }

func (ComputeVolumeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeVolumeAttach)(nil)).Elem()
}

func (o ComputeVolumeAttachArrayOutput) ToComputeVolumeAttachArrayOutput() ComputeVolumeAttachArrayOutput {
	return o
}

func (o ComputeVolumeAttachArrayOutput) ToComputeVolumeAttachArrayOutputWithContext(ctx context.Context) ComputeVolumeAttachArrayOutput {
	return o
}

func (o ComputeVolumeAttachArrayOutput) Index(i pulumi.IntInput) ComputeVolumeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeVolumeAttach {
		return vs[0].([]*ComputeVolumeAttach)[vs[1].(int)]
	}).(ComputeVolumeAttachOutput)
}

type ComputeVolumeAttachMapOutput struct{ *pulumi.OutputState }

func (ComputeVolumeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeVolumeAttach)(nil)).Elem()
}

func (o ComputeVolumeAttachMapOutput) ToComputeVolumeAttachMapOutput() ComputeVolumeAttachMapOutput {
	return o
}

func (o ComputeVolumeAttachMapOutput) ToComputeVolumeAttachMapOutputWithContext(ctx context.Context) ComputeVolumeAttachMapOutput {
	return o
}

func (o ComputeVolumeAttachMapOutput) MapIndex(k pulumi.StringInput) ComputeVolumeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeVolumeAttach {
		return vs[0].(map[string]*ComputeVolumeAttach)[vs[1].(string)]
	}).(ComputeVolumeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeVolumeAttachInput)(nil)).Elem(), &ComputeVolumeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeVolumeAttachArrayInput)(nil)).Elem(), ComputeVolumeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeVolumeAttachMapInput)(nil)).Elem(), ComputeVolumeAttachMap{})
	pulumi.RegisterOutputType(ComputeVolumeAttachOutput{})
	pulumi.RegisterOutputType(ComputeVolumeAttachArrayOutput{})
	pulumi.RegisterOutputType(ComputeVolumeAttachMapOutput{})
}
