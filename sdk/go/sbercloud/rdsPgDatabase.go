// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsPgDatabase struct {
	pulumi.CustomResourceState

	// Specifies the database character set.
	CharacterSet pulumi.StringOutput `pulumi:"characterSet"`
	// Specifies the database description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege pulumi.BoolOutput `pulumi:"isRevokePublicPrivilege"`
	// Specifies the database collocation.
	LcCollate pulumi.StringOutput `pulumi:"lcCollate"`
	// Specifies the database classification.
	LcCtype pulumi.StringOutput `pulumi:"lcCtype"`
	// Specifies the database name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the database user.
	Owner  pulumi.StringOutput `pulumi:"owner"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the database size, in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// Specifies the name of the database template.
	Template pulumi.StringOutput `pulumi:"template"`
}

// NewRdsPgDatabase registers a new resource with the given unique name, arguments, and options.
func NewRdsPgDatabase(ctx *pulumi.Context,
	name string, args *RdsPgDatabaseArgs, opts ...pulumi.ResourceOption) (*RdsPgDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsPgDatabase
	err := ctx.RegisterResource("sbercloud:index/rdsPgDatabase:RdsPgDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsPgDatabase gets an existing RdsPgDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsPgDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsPgDatabaseState, opts ...pulumi.ResourceOption) (*RdsPgDatabase, error) {
	var resource RdsPgDatabase
	err := ctx.ReadResource("sbercloud:index/rdsPgDatabase:RdsPgDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsPgDatabase resources.
type rdsPgDatabaseState struct {
	// Specifies the database character set.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege *bool `pulumi:"isRevokePublicPrivilege"`
	// Specifies the database collocation.
	LcCollate *string `pulumi:"lcCollate"`
	// Specifies the database classification.
	LcCtype *string `pulumi:"lcCtype"`
	// Specifies the database name.
	Name *string `pulumi:"name"`
	// Specifies the database user.
	Owner  *string `pulumi:"owner"`
	Region *string `pulumi:"region"`
	// Indicates the database size, in bytes.
	Size *int `pulumi:"size"`
	// Specifies the name of the database template.
	Template *string `pulumi:"template"`
}

type RdsPgDatabaseState struct {
	// Specifies the database character set.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege pulumi.BoolPtrInput
	// Specifies the database collocation.
	LcCollate pulumi.StringPtrInput
	// Specifies the database classification.
	LcCtype pulumi.StringPtrInput
	// Specifies the database name.
	Name pulumi.StringPtrInput
	// Specifies the database user.
	Owner  pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Indicates the database size, in bytes.
	Size pulumi.IntPtrInput
	// Specifies the name of the database template.
	Template pulumi.StringPtrInput
}

func (RdsPgDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgDatabaseState)(nil)).Elem()
}

type rdsPgDatabaseArgs struct {
	// Specifies the database character set.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege *bool `pulumi:"isRevokePublicPrivilege"`
	// Specifies the database collocation.
	LcCollate *string `pulumi:"lcCollate"`
	// Specifies the database classification.
	LcCtype *string `pulumi:"lcCtype"`
	// Specifies the database name.
	Name *string `pulumi:"name"`
	// Specifies the database user.
	Owner  *string `pulumi:"owner"`
	Region *string `pulumi:"region"`
	// Specifies the name of the database template.
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a RdsPgDatabase resource.
type RdsPgDatabaseArgs struct {
	// Specifies the database character set.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege pulumi.BoolPtrInput
	// Specifies the database collocation.
	LcCollate pulumi.StringPtrInput
	// Specifies the database classification.
	LcCtype pulumi.StringPtrInput
	// Specifies the database name.
	Name pulumi.StringPtrInput
	// Specifies the database user.
	Owner  pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the name of the database template.
	Template pulumi.StringPtrInput
}

func (RdsPgDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgDatabaseArgs)(nil)).Elem()
}

type RdsPgDatabaseInput interface {
	pulumi.Input

	ToRdsPgDatabaseOutput() RdsPgDatabaseOutput
	ToRdsPgDatabaseOutputWithContext(ctx context.Context) RdsPgDatabaseOutput
}

func (*RdsPgDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgDatabase)(nil)).Elem()
}

func (i *RdsPgDatabase) ToRdsPgDatabaseOutput() RdsPgDatabaseOutput {
	return i.ToRdsPgDatabaseOutputWithContext(context.Background())
}

func (i *RdsPgDatabase) ToRdsPgDatabaseOutputWithContext(ctx context.Context) RdsPgDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgDatabaseOutput)
}

// RdsPgDatabaseArrayInput is an input type that accepts RdsPgDatabaseArray and RdsPgDatabaseArrayOutput values.
// You can construct a concrete instance of `RdsPgDatabaseArrayInput` via:
//
//	RdsPgDatabaseArray{ RdsPgDatabaseArgs{...} }
type RdsPgDatabaseArrayInput interface {
	pulumi.Input

	ToRdsPgDatabaseArrayOutput() RdsPgDatabaseArrayOutput
	ToRdsPgDatabaseArrayOutputWithContext(context.Context) RdsPgDatabaseArrayOutput
}

type RdsPgDatabaseArray []RdsPgDatabaseInput

func (RdsPgDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgDatabase)(nil)).Elem()
}

func (i RdsPgDatabaseArray) ToRdsPgDatabaseArrayOutput() RdsPgDatabaseArrayOutput {
	return i.ToRdsPgDatabaseArrayOutputWithContext(context.Background())
}

func (i RdsPgDatabaseArray) ToRdsPgDatabaseArrayOutputWithContext(ctx context.Context) RdsPgDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgDatabaseArrayOutput)
}

// RdsPgDatabaseMapInput is an input type that accepts RdsPgDatabaseMap and RdsPgDatabaseMapOutput values.
// You can construct a concrete instance of `RdsPgDatabaseMapInput` via:
//
//	RdsPgDatabaseMap{ "key": RdsPgDatabaseArgs{...} }
type RdsPgDatabaseMapInput interface {
	pulumi.Input

	ToRdsPgDatabaseMapOutput() RdsPgDatabaseMapOutput
	ToRdsPgDatabaseMapOutputWithContext(context.Context) RdsPgDatabaseMapOutput
}

type RdsPgDatabaseMap map[string]RdsPgDatabaseInput

func (RdsPgDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgDatabase)(nil)).Elem()
}

func (i RdsPgDatabaseMap) ToRdsPgDatabaseMapOutput() RdsPgDatabaseMapOutput {
	return i.ToRdsPgDatabaseMapOutputWithContext(context.Background())
}

func (i RdsPgDatabaseMap) ToRdsPgDatabaseMapOutputWithContext(ctx context.Context) RdsPgDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgDatabaseMapOutput)
}

type RdsPgDatabaseOutput struct{ *pulumi.OutputState }

func (RdsPgDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgDatabase)(nil)).Elem()
}

func (o RdsPgDatabaseOutput) ToRdsPgDatabaseOutput() RdsPgDatabaseOutput {
	return o
}

func (o RdsPgDatabaseOutput) ToRdsPgDatabaseOutputWithContext(ctx context.Context) RdsPgDatabaseOutput {
	return o
}

// Specifies the database character set.
func (o RdsPgDatabaseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.CharacterSet }).(pulumi.StringOutput)
}

// Specifies the database description.
func (o RdsPgDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the RDS PostgreSQL instance.
func (o RdsPgDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
func (o RdsPgDatabaseOutput) IsRevokePublicPrivilege() pulumi.BoolOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.BoolOutput { return v.IsRevokePublicPrivilege }).(pulumi.BoolOutput)
}

// Specifies the database collocation.
func (o RdsPgDatabaseOutput) LcCollate() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.LcCollate }).(pulumi.StringOutput)
}

// Specifies the database classification.
func (o RdsPgDatabaseOutput) LcCtype() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.LcCtype }).(pulumi.StringOutput)
}

// Specifies the database name.
func (o RdsPgDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the database user.
func (o RdsPgDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o RdsPgDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the database size, in bytes.
func (o RdsPgDatabaseOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Specifies the name of the database template.
func (o RdsPgDatabaseOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgDatabase) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

type RdsPgDatabaseArrayOutput struct{ *pulumi.OutputState }

func (RdsPgDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgDatabase)(nil)).Elem()
}

func (o RdsPgDatabaseArrayOutput) ToRdsPgDatabaseArrayOutput() RdsPgDatabaseArrayOutput {
	return o
}

func (o RdsPgDatabaseArrayOutput) ToRdsPgDatabaseArrayOutputWithContext(ctx context.Context) RdsPgDatabaseArrayOutput {
	return o
}

func (o RdsPgDatabaseArrayOutput) Index(i pulumi.IntInput) RdsPgDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsPgDatabase {
		return vs[0].([]*RdsPgDatabase)[vs[1].(int)]
	}).(RdsPgDatabaseOutput)
}

type RdsPgDatabaseMapOutput struct{ *pulumi.OutputState }

func (RdsPgDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgDatabase)(nil)).Elem()
}

func (o RdsPgDatabaseMapOutput) ToRdsPgDatabaseMapOutput() RdsPgDatabaseMapOutput {
	return o
}

func (o RdsPgDatabaseMapOutput) ToRdsPgDatabaseMapOutputWithContext(ctx context.Context) RdsPgDatabaseMapOutput {
	return o
}

func (o RdsPgDatabaseMapOutput) MapIndex(k pulumi.StringInput) RdsPgDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsPgDatabase {
		return vs[0].(map[string]*RdsPgDatabase)[vs[1].(string)]
	}).(RdsPgDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgDatabaseInput)(nil)).Elem(), &RdsPgDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgDatabaseArrayInput)(nil)).Elem(), RdsPgDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgDatabaseMapInput)(nil)).Elem(), RdsPgDatabaseMap{})
	pulumi.RegisterOutputType(RdsPgDatabaseOutput{})
	pulumi.RegisterOutputType(RdsPgDatabaseArrayOutput{})
	pulumi.RegisterOutputType(RdsPgDatabaseMapOutput{})
}
