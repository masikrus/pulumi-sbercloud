// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkAclRule struct {
	pulumi.CustomResourceState

	Action               pulumi.StringOutput    `pulumi:"action"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	DestinationIpAddress pulumi.StringPtrOutput `pulumi:"destinationIpAddress"`
	DestinationPort      pulumi.StringPtrOutput `pulumi:"destinationPort"`
	Enabled              pulumi.BoolPtrOutput   `pulumi:"enabled"`
	IpVersion            pulumi.IntPtrOutput    `pulumi:"ipVersion"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Protocol             pulumi.StringOutput    `pulumi:"protocol"`
	Region               pulumi.StringOutput    `pulumi:"region"`
	SourceIpAddress      pulumi.StringPtrOutput `pulumi:"sourceIpAddress"`
	SourcePort           pulumi.StringPtrOutput `pulumi:"sourcePort"`
}

// NewNetworkAclRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclRule(ctx *pulumi.Context,
	name string, args *NetworkAclRuleArgs, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAclRule
	err := ctx.RegisterResource("sbercloud:index/networkAclRule:NetworkAclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclRule gets an existing NetworkAclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclRuleState, opts ...pulumi.ResourceOption) (*NetworkAclRule, error) {
	var resource NetworkAclRule
	err := ctx.ReadResource("sbercloud:index/networkAclRule:NetworkAclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclRule resources.
type networkAclRuleState struct {
	Action               *string `pulumi:"action"`
	Description          *string `pulumi:"description"`
	DestinationIpAddress *string `pulumi:"destinationIpAddress"`
	DestinationPort      *string `pulumi:"destinationPort"`
	Enabled              *bool   `pulumi:"enabled"`
	IpVersion            *int    `pulumi:"ipVersion"`
	Name                 *string `pulumi:"name"`
	Protocol             *string `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	SourceIpAddress      *string `pulumi:"sourceIpAddress"`
	SourcePort           *string `pulumi:"sourcePort"`
}

type NetworkAclRuleState struct {
	Action               pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DestinationIpAddress pulumi.StringPtrInput
	DestinationPort      pulumi.StringPtrInput
	Enabled              pulumi.BoolPtrInput
	IpVersion            pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	Protocol             pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	SourceIpAddress      pulumi.StringPtrInput
	SourcePort           pulumi.StringPtrInput
}

func (NetworkAclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleState)(nil)).Elem()
}

type networkAclRuleArgs struct {
	Action               string  `pulumi:"action"`
	Description          *string `pulumi:"description"`
	DestinationIpAddress *string `pulumi:"destinationIpAddress"`
	DestinationPort      *string `pulumi:"destinationPort"`
	Enabled              *bool   `pulumi:"enabled"`
	IpVersion            *int    `pulumi:"ipVersion"`
	Name                 *string `pulumi:"name"`
	Protocol             string  `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	SourceIpAddress      *string `pulumi:"sourceIpAddress"`
	SourcePort           *string `pulumi:"sourcePort"`
}

// The set of arguments for constructing a NetworkAclRule resource.
type NetworkAclRuleArgs struct {
	Action               pulumi.StringInput
	Description          pulumi.StringPtrInput
	DestinationIpAddress pulumi.StringPtrInput
	DestinationPort      pulumi.StringPtrInput
	Enabled              pulumi.BoolPtrInput
	IpVersion            pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	Protocol             pulumi.StringInput
	Region               pulumi.StringPtrInput
	SourceIpAddress      pulumi.StringPtrInput
	SourcePort           pulumi.StringPtrInput
}

func (NetworkAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclRuleArgs)(nil)).Elem()
}

type NetworkAclRuleInput interface {
	pulumi.Input

	ToNetworkAclRuleOutput() NetworkAclRuleOutput
	ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput
}

func (*NetworkAclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclRule)(nil)).Elem()
}

func (i *NetworkAclRule) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return i.ToNetworkAclRuleOutputWithContext(context.Background())
}

func (i *NetworkAclRule) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleOutput)
}

// NetworkAclRuleArrayInput is an input type that accepts NetworkAclRuleArray and NetworkAclRuleArrayOutput values.
// You can construct a concrete instance of `NetworkAclRuleArrayInput` via:
//
//	NetworkAclRuleArray{ NetworkAclRuleArgs{...} }
type NetworkAclRuleArrayInput interface {
	pulumi.Input

	ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput
	ToNetworkAclRuleArrayOutputWithContext(context.Context) NetworkAclRuleArrayOutput
}

type NetworkAclRuleArray []NetworkAclRuleInput

func (NetworkAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclRule)(nil)).Elem()
}

func (i NetworkAclRuleArray) ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput {
	return i.ToNetworkAclRuleArrayOutputWithContext(context.Background())
}

func (i NetworkAclRuleArray) ToNetworkAclRuleArrayOutputWithContext(ctx context.Context) NetworkAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleArrayOutput)
}

// NetworkAclRuleMapInput is an input type that accepts NetworkAclRuleMap and NetworkAclRuleMapOutput values.
// You can construct a concrete instance of `NetworkAclRuleMapInput` via:
//
//	NetworkAclRuleMap{ "key": NetworkAclRuleArgs{...} }
type NetworkAclRuleMapInput interface {
	pulumi.Input

	ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput
	ToNetworkAclRuleMapOutputWithContext(context.Context) NetworkAclRuleMapOutput
}

type NetworkAclRuleMap map[string]NetworkAclRuleInput

func (NetworkAclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclRule)(nil)).Elem()
}

func (i NetworkAclRuleMap) ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput {
	return i.ToNetworkAclRuleMapOutputWithContext(context.Background())
}

func (i NetworkAclRuleMap) ToNetworkAclRuleMapOutputWithContext(ctx context.Context) NetworkAclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclRuleMapOutput)
}

type NetworkAclRuleOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutput() NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) ToNetworkAclRuleOutputWithContext(ctx context.Context) NetworkAclRuleOutput {
	return o
}

func (o NetworkAclRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworkAclRuleOutput) DestinationIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.DestinationIpAddress }).(pulumi.StringPtrOutput)
}

func (o NetworkAclRuleOutput) DestinationPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.DestinationPort }).(pulumi.StringPtrOutput)
}

func (o NetworkAclRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NetworkAclRuleOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.IntPtrOutput { return v.IpVersion }).(pulumi.IntPtrOutput)
}

func (o NetworkAclRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o NetworkAclRuleOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

func (o NetworkAclRuleOutput) SourcePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAclRule) pulumi.StringPtrOutput { return v.SourcePort }).(pulumi.StringPtrOutput)
}

type NetworkAclRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleArrayOutput) ToNetworkAclRuleArrayOutput() NetworkAclRuleArrayOutput {
	return o
}

func (o NetworkAclRuleArrayOutput) ToNetworkAclRuleArrayOutputWithContext(ctx context.Context) NetworkAclRuleArrayOutput {
	return o
}

func (o NetworkAclRuleArrayOutput) Index(i pulumi.IntInput) NetworkAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAclRule {
		return vs[0].([]*NetworkAclRule)[vs[1].(int)]
	}).(NetworkAclRuleOutput)
}

type NetworkAclRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkAclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAclRule)(nil)).Elem()
}

func (o NetworkAclRuleMapOutput) ToNetworkAclRuleMapOutput() NetworkAclRuleMapOutput {
	return o
}

func (o NetworkAclRuleMapOutput) ToNetworkAclRuleMapOutputWithContext(ctx context.Context) NetworkAclRuleMapOutput {
	return o
}

func (o NetworkAclRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkAclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAclRule {
		return vs[0].(map[string]*NetworkAclRule)[vs[1].(string)]
	}).(NetworkAclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleInput)(nil)).Elem(), &NetworkAclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleArrayInput)(nil)).Elem(), NetworkAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclRuleMapInput)(nil)).Elem(), NetworkAclRuleMap{})
	pulumi.RegisterOutputType(NetworkAclRuleOutput{})
	pulumi.RegisterOutputType(NetworkAclRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclRuleMapOutput{})
}
