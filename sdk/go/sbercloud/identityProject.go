// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityProject struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Enabled     pulumi.BoolOutput      `pulumi:"enabled"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ParentId    pulumi.StringOutput    `pulumi:"parentId"`
	Status      pulumi.StringOutput    `pulumi:"status"`
}

// NewIdentityProject registers a new resource with the given unique name, arguments, and options.
func NewIdentityProject(ctx *pulumi.Context,
	name string, args *IdentityProjectArgs, opts ...pulumi.ResourceOption) (*IdentityProject, error) {
	if args == nil {
		args = &IdentityProjectArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityProject
	err := ctx.RegisterResource("sbercloud:index/identityProject:IdentityProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProject gets an existing IdentityProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProjectState, opts ...pulumi.ResourceOption) (*IdentityProject, error) {
	var resource IdentityProject
	err := ctx.ReadResource("sbercloud:index/identityProject:IdentityProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProject resources.
type identityProjectState struct {
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	Name        *string `pulumi:"name"`
	ParentId    *string `pulumi:"parentId"`
	Status      *string `pulumi:"status"`
}

type IdentityProjectState struct {
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	ParentId    pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
}

func (IdentityProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProjectState)(nil)).Elem()
}

type identityProjectArgs struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Status      *string `pulumi:"status"`
}

// The set of arguments for constructing a IdentityProject resource.
type IdentityProjectArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
}

func (IdentityProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProjectArgs)(nil)).Elem()
}

type IdentityProjectInput interface {
	pulumi.Input

	ToIdentityProjectOutput() IdentityProjectOutput
	ToIdentityProjectOutputWithContext(ctx context.Context) IdentityProjectOutput
}

func (*IdentityProject) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProject)(nil)).Elem()
}

func (i *IdentityProject) ToIdentityProjectOutput() IdentityProjectOutput {
	return i.ToIdentityProjectOutputWithContext(context.Background())
}

func (i *IdentityProject) ToIdentityProjectOutputWithContext(ctx context.Context) IdentityProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProjectOutput)
}

// IdentityProjectArrayInput is an input type that accepts IdentityProjectArray and IdentityProjectArrayOutput values.
// You can construct a concrete instance of `IdentityProjectArrayInput` via:
//
//	IdentityProjectArray{ IdentityProjectArgs{...} }
type IdentityProjectArrayInput interface {
	pulumi.Input

	ToIdentityProjectArrayOutput() IdentityProjectArrayOutput
	ToIdentityProjectArrayOutputWithContext(context.Context) IdentityProjectArrayOutput
}

type IdentityProjectArray []IdentityProjectInput

func (IdentityProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProject)(nil)).Elem()
}

func (i IdentityProjectArray) ToIdentityProjectArrayOutput() IdentityProjectArrayOutput {
	return i.ToIdentityProjectArrayOutputWithContext(context.Background())
}

func (i IdentityProjectArray) ToIdentityProjectArrayOutputWithContext(ctx context.Context) IdentityProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProjectArrayOutput)
}

// IdentityProjectMapInput is an input type that accepts IdentityProjectMap and IdentityProjectMapOutput values.
// You can construct a concrete instance of `IdentityProjectMapInput` via:
//
//	IdentityProjectMap{ "key": IdentityProjectArgs{...} }
type IdentityProjectMapInput interface {
	pulumi.Input

	ToIdentityProjectMapOutput() IdentityProjectMapOutput
	ToIdentityProjectMapOutputWithContext(context.Context) IdentityProjectMapOutput
}

type IdentityProjectMap map[string]IdentityProjectInput

func (IdentityProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProject)(nil)).Elem()
}

func (i IdentityProjectMap) ToIdentityProjectMapOutput() IdentityProjectMapOutput {
	return i.ToIdentityProjectMapOutputWithContext(context.Background())
}

func (i IdentityProjectMap) ToIdentityProjectMapOutputWithContext(ctx context.Context) IdentityProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProjectMapOutput)
}

type IdentityProjectOutput struct{ *pulumi.OutputState }

func (IdentityProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProject)(nil)).Elem()
}

func (o IdentityProjectOutput) ToIdentityProjectOutput() IdentityProjectOutput {
	return o
}

func (o IdentityProjectOutput) ToIdentityProjectOutputWithContext(ctx context.Context) IdentityProjectOutput {
	return o
}

func (o IdentityProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProject) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IdentityProjectOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdentityProject) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o IdentityProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IdentityProjectOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProject) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

func (o IdentityProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProject) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type IdentityProjectArrayOutput struct{ *pulumi.OutputState }

func (IdentityProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProject)(nil)).Elem()
}

func (o IdentityProjectArrayOutput) ToIdentityProjectArrayOutput() IdentityProjectArrayOutput {
	return o
}

func (o IdentityProjectArrayOutput) ToIdentityProjectArrayOutputWithContext(ctx context.Context) IdentityProjectArrayOutput {
	return o
}

func (o IdentityProjectArrayOutput) Index(i pulumi.IntInput) IdentityProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityProject {
		return vs[0].([]*IdentityProject)[vs[1].(int)]
	}).(IdentityProjectOutput)
}

type IdentityProjectMapOutput struct{ *pulumi.OutputState }

func (IdentityProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProject)(nil)).Elem()
}

func (o IdentityProjectMapOutput) ToIdentityProjectMapOutput() IdentityProjectMapOutput {
	return o
}

func (o IdentityProjectMapOutput) ToIdentityProjectMapOutputWithContext(ctx context.Context) IdentityProjectMapOutput {
	return o
}

func (o IdentityProjectMapOutput) MapIndex(k pulumi.StringInput) IdentityProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityProject {
		return vs[0].(map[string]*IdentityProject)[vs[1].(string)]
	}).(IdentityProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProjectInput)(nil)).Elem(), &IdentityProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProjectArrayInput)(nil)).Elem(), IdentityProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProjectMapInput)(nil)).Elem(), IdentityProjectMap{})
	pulumi.RegisterOutputType(IdentityProjectOutput{})
	pulumi.RegisterOutputType(IdentityProjectArrayOutput{})
	pulumi.RegisterOutputType(IdentityProjectMapOutput{})
}
