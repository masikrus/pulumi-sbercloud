// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeInterfaceAttach struct {
	pulumi.CustomResourceState

	FixedIp          pulumi.StringOutput      `pulumi:"fixedIp"`
	FixedIpv6        pulumi.StringOutput      `pulumi:"fixedIpv6"`
	InstanceId       pulumi.StringOutput      `pulumi:"instanceId"`
	Ipv6BandwidthId  pulumi.StringPtrOutput   `pulumi:"ipv6BandwidthId"`
	Ipv6Enable       pulumi.BoolOutput        `pulumi:"ipv6Enable"`
	Mac              pulumi.StringOutput      `pulumi:"mac"`
	NetworkId        pulumi.StringOutput      `pulumi:"networkId"`
	PortId           pulumi.StringOutput      `pulumi:"portId"`
	Region           pulumi.StringOutput      `pulumi:"region"`
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	SourceDestCheck  pulumi.BoolPtrOutput     `pulumi:"sourceDestCheck"`
}

// NewComputeInterfaceAttach registers a new resource with the given unique name, arguments, and options.
func NewComputeInterfaceAttach(ctx *pulumi.Context,
	name string, args *ComputeInterfaceAttachArgs, opts ...pulumi.ResourceOption) (*ComputeInterfaceAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeInterfaceAttach
	err := ctx.RegisterResource("sbercloud:index/computeInterfaceAttach:ComputeInterfaceAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeInterfaceAttach gets an existing ComputeInterfaceAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeInterfaceAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeInterfaceAttachState, opts ...pulumi.ResourceOption) (*ComputeInterfaceAttach, error) {
	var resource ComputeInterfaceAttach
	err := ctx.ReadResource("sbercloud:index/computeInterfaceAttach:ComputeInterfaceAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeInterfaceAttach resources.
type computeInterfaceAttachState struct {
	FixedIp          *string  `pulumi:"fixedIp"`
	FixedIpv6        *string  `pulumi:"fixedIpv6"`
	InstanceId       *string  `pulumi:"instanceId"`
	Ipv6BandwidthId  *string  `pulumi:"ipv6BandwidthId"`
	Ipv6Enable       *bool    `pulumi:"ipv6Enable"`
	Mac              *string  `pulumi:"mac"`
	NetworkId        *string  `pulumi:"networkId"`
	PortId           *string  `pulumi:"portId"`
	Region           *string  `pulumi:"region"`
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SourceDestCheck  *bool    `pulumi:"sourceDestCheck"`
}

type ComputeInterfaceAttachState struct {
	FixedIp          pulumi.StringPtrInput
	FixedIpv6        pulumi.StringPtrInput
	InstanceId       pulumi.StringPtrInput
	Ipv6BandwidthId  pulumi.StringPtrInput
	Ipv6Enable       pulumi.BoolPtrInput
	Mac              pulumi.StringPtrInput
	NetworkId        pulumi.StringPtrInput
	PortId           pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	SourceDestCheck  pulumi.BoolPtrInput
}

func (ComputeInterfaceAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeInterfaceAttachState)(nil)).Elem()
}

type computeInterfaceAttachArgs struct {
	FixedIp          *string  `pulumi:"fixedIp"`
	InstanceId       string   `pulumi:"instanceId"`
	Ipv6BandwidthId  *string  `pulumi:"ipv6BandwidthId"`
	Ipv6Enable       *bool    `pulumi:"ipv6Enable"`
	NetworkId        *string  `pulumi:"networkId"`
	PortId           *string  `pulumi:"portId"`
	Region           *string  `pulumi:"region"`
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SourceDestCheck  *bool    `pulumi:"sourceDestCheck"`
}

// The set of arguments for constructing a ComputeInterfaceAttach resource.
type ComputeInterfaceAttachArgs struct {
	FixedIp          pulumi.StringPtrInput
	InstanceId       pulumi.StringInput
	Ipv6BandwidthId  pulumi.StringPtrInput
	Ipv6Enable       pulumi.BoolPtrInput
	NetworkId        pulumi.StringPtrInput
	PortId           pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	SourceDestCheck  pulumi.BoolPtrInput
}

func (ComputeInterfaceAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeInterfaceAttachArgs)(nil)).Elem()
}

type ComputeInterfaceAttachInput interface {
	pulumi.Input

	ToComputeInterfaceAttachOutput() ComputeInterfaceAttachOutput
	ToComputeInterfaceAttachOutputWithContext(ctx context.Context) ComputeInterfaceAttachOutput
}

func (*ComputeInterfaceAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInterfaceAttach)(nil)).Elem()
}

func (i *ComputeInterfaceAttach) ToComputeInterfaceAttachOutput() ComputeInterfaceAttachOutput {
	return i.ToComputeInterfaceAttachOutputWithContext(context.Background())
}

func (i *ComputeInterfaceAttach) ToComputeInterfaceAttachOutputWithContext(ctx context.Context) ComputeInterfaceAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInterfaceAttachOutput)
}

// ComputeInterfaceAttachArrayInput is an input type that accepts ComputeInterfaceAttachArray and ComputeInterfaceAttachArrayOutput values.
// You can construct a concrete instance of `ComputeInterfaceAttachArrayInput` via:
//
//	ComputeInterfaceAttachArray{ ComputeInterfaceAttachArgs{...} }
type ComputeInterfaceAttachArrayInput interface {
	pulumi.Input

	ToComputeInterfaceAttachArrayOutput() ComputeInterfaceAttachArrayOutput
	ToComputeInterfaceAttachArrayOutputWithContext(context.Context) ComputeInterfaceAttachArrayOutput
}

type ComputeInterfaceAttachArray []ComputeInterfaceAttachInput

func (ComputeInterfaceAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeInterfaceAttach)(nil)).Elem()
}

func (i ComputeInterfaceAttachArray) ToComputeInterfaceAttachArrayOutput() ComputeInterfaceAttachArrayOutput {
	return i.ToComputeInterfaceAttachArrayOutputWithContext(context.Background())
}

func (i ComputeInterfaceAttachArray) ToComputeInterfaceAttachArrayOutputWithContext(ctx context.Context) ComputeInterfaceAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInterfaceAttachArrayOutput)
}

// ComputeInterfaceAttachMapInput is an input type that accepts ComputeInterfaceAttachMap and ComputeInterfaceAttachMapOutput values.
// You can construct a concrete instance of `ComputeInterfaceAttachMapInput` via:
//
//	ComputeInterfaceAttachMap{ "key": ComputeInterfaceAttachArgs{...} }
type ComputeInterfaceAttachMapInput interface {
	pulumi.Input

	ToComputeInterfaceAttachMapOutput() ComputeInterfaceAttachMapOutput
	ToComputeInterfaceAttachMapOutputWithContext(context.Context) ComputeInterfaceAttachMapOutput
}

type ComputeInterfaceAttachMap map[string]ComputeInterfaceAttachInput

func (ComputeInterfaceAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeInterfaceAttach)(nil)).Elem()
}

func (i ComputeInterfaceAttachMap) ToComputeInterfaceAttachMapOutput() ComputeInterfaceAttachMapOutput {
	return i.ToComputeInterfaceAttachMapOutputWithContext(context.Background())
}

func (i ComputeInterfaceAttachMap) ToComputeInterfaceAttachMapOutputWithContext(ctx context.Context) ComputeInterfaceAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInterfaceAttachMapOutput)
}

type ComputeInterfaceAttachOutput struct{ *pulumi.OutputState }

func (ComputeInterfaceAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInterfaceAttach)(nil)).Elem()
}

func (o ComputeInterfaceAttachOutput) ToComputeInterfaceAttachOutput() ComputeInterfaceAttachOutput {
	return o
}

func (o ComputeInterfaceAttachOutput) ToComputeInterfaceAttachOutputWithContext(ctx context.Context) ComputeInterfaceAttachOutput {
	return o
}

func (o ComputeInterfaceAttachOutput) FixedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.FixedIp }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) FixedIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.FixedIpv6 }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) Ipv6BandwidthId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringPtrOutput { return v.Ipv6BandwidthId }).(pulumi.StringPtrOutput)
}

func (o ComputeInterfaceAttachOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.BoolOutput { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o ComputeInterfaceAttachOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ComputeInterfaceAttachOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o ComputeInterfaceAttachOutput) SourceDestCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInterfaceAttach) pulumi.BoolPtrOutput { return v.SourceDestCheck }).(pulumi.BoolPtrOutput)
}

type ComputeInterfaceAttachArrayOutput struct{ *pulumi.OutputState }

func (ComputeInterfaceAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeInterfaceAttach)(nil)).Elem()
}

func (o ComputeInterfaceAttachArrayOutput) ToComputeInterfaceAttachArrayOutput() ComputeInterfaceAttachArrayOutput {
	return o
}

func (o ComputeInterfaceAttachArrayOutput) ToComputeInterfaceAttachArrayOutputWithContext(ctx context.Context) ComputeInterfaceAttachArrayOutput {
	return o
}

func (o ComputeInterfaceAttachArrayOutput) Index(i pulumi.IntInput) ComputeInterfaceAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeInterfaceAttach {
		return vs[0].([]*ComputeInterfaceAttach)[vs[1].(int)]
	}).(ComputeInterfaceAttachOutput)
}

type ComputeInterfaceAttachMapOutput struct{ *pulumi.OutputState }

func (ComputeInterfaceAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeInterfaceAttach)(nil)).Elem()
}

func (o ComputeInterfaceAttachMapOutput) ToComputeInterfaceAttachMapOutput() ComputeInterfaceAttachMapOutput {
	return o
}

func (o ComputeInterfaceAttachMapOutput) ToComputeInterfaceAttachMapOutputWithContext(ctx context.Context) ComputeInterfaceAttachMapOutput {
	return o
}

func (o ComputeInterfaceAttachMapOutput) MapIndex(k pulumi.StringInput) ComputeInterfaceAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeInterfaceAttach {
		return vs[0].(map[string]*ComputeInterfaceAttach)[vs[1].(string)]
	}).(ComputeInterfaceAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInterfaceAttachInput)(nil)).Elem(), &ComputeInterfaceAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInterfaceAttachArrayInput)(nil)).Elem(), ComputeInterfaceAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInterfaceAttachMapInput)(nil)).Elem(), ComputeInterfaceAttachMap{})
	pulumi.RegisterOutputType(ComputeInterfaceAttachOutput{})
	pulumi.RegisterOutputType(ComputeInterfaceAttachArrayOutput{})
	pulumi.RegisterOutputType(ComputeInterfaceAttachMapOutput{})
}
