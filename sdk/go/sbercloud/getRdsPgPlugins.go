// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetRdsPgPlugins(ctx *pulumi.Context, args *GetRdsPgPluginsArgs, opts ...pulumi.InvokeOption) (*GetRdsPgPluginsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRdsPgPluginsResult
	err := ctx.Invoke("sbercloud:index/getRdsPgPlugins:getRdsPgPlugins", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRdsPgPlugins.
type GetRdsPgPluginsArgs struct {
	Created      *bool   `pulumi:"created"`
	DatabaseName string  `pulumi:"databaseName"`
	InstanceId   string  `pulumi:"instanceId"`
	Name         *string `pulumi:"name"`
	Region       *string `pulumi:"region"`
	Version      *string `pulumi:"version"`
}

// A collection of values returned by getRdsPgPlugins.
type GetRdsPgPluginsResult struct {
	Created      *bool  `pulumi:"created"`
	DatabaseName string `pulumi:"databaseName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string                  `pulumi:"id"`
	InstanceId string                  `pulumi:"instanceId"`
	Name       *string                 `pulumi:"name"`
	Plugins    []GetRdsPgPluginsPlugin `pulumi:"plugins"`
	Region     string                  `pulumi:"region"`
	Version    *string                 `pulumi:"version"`
}

func GetRdsPgPluginsOutput(ctx *pulumi.Context, args GetRdsPgPluginsOutputArgs, opts ...pulumi.InvokeOption) GetRdsPgPluginsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRdsPgPluginsResultOutput, error) {
			args := v.(GetRdsPgPluginsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getRdsPgPlugins:getRdsPgPlugins", args, GetRdsPgPluginsResultOutput{}, options).(GetRdsPgPluginsResultOutput), nil
		}).(GetRdsPgPluginsResultOutput)
}

// A collection of arguments for invoking getRdsPgPlugins.
type GetRdsPgPluginsOutputArgs struct {
	Created      pulumi.BoolPtrInput   `pulumi:"created"`
	DatabaseName pulumi.StringInput    `pulumi:"databaseName"`
	InstanceId   pulumi.StringInput    `pulumi:"instanceId"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
	Region       pulumi.StringPtrInput `pulumi:"region"`
	Version      pulumi.StringPtrInput `pulumi:"version"`
}

func (GetRdsPgPluginsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsPgPluginsArgs)(nil)).Elem()
}

// A collection of values returned by getRdsPgPlugins.
type GetRdsPgPluginsResultOutput struct{ *pulumi.OutputState }

func (GetRdsPgPluginsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsPgPluginsResult)(nil)).Elem()
}

func (o GetRdsPgPluginsResultOutput) ToGetRdsPgPluginsResultOutput() GetRdsPgPluginsResultOutput {
	return o
}

func (o GetRdsPgPluginsResultOutput) ToGetRdsPgPluginsResultOutputWithContext(ctx context.Context) GetRdsPgPluginsResultOutput {
	return o
}

func (o GetRdsPgPluginsResultOutput) Created() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) *bool { return v.Created }).(pulumi.BoolPtrOutput)
}

func (o GetRdsPgPluginsResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRdsPgPluginsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRdsPgPluginsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetRdsPgPluginsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetRdsPgPluginsResultOutput) Plugins() GetRdsPgPluginsPluginArrayOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) []GetRdsPgPluginsPlugin { return v.Plugins }).(GetRdsPgPluginsPluginArrayOutput)
}

func (o GetRdsPgPluginsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetRdsPgPluginsResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRdsPgPluginsResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRdsPgPluginsResultOutput{})
}
