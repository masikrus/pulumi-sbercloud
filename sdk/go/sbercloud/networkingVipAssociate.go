// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkingVipAssociate struct {
	pulumi.CustomResourceState

	IpAddresses  pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	PortIds      pulumi.StringArrayOutput `pulumi:"portIds"`
	Region       pulumi.StringOutput      `pulumi:"region"`
	VipId        pulumi.StringOutput      `pulumi:"vipId"`
	VipIpAddress pulumi.StringOutput      `pulumi:"vipIpAddress"`
	VipSubnetId  pulumi.StringOutput      `pulumi:"vipSubnetId"`
}

// NewNetworkingVipAssociate registers a new resource with the given unique name, arguments, and options.
func NewNetworkingVipAssociate(ctx *pulumi.Context,
	name string, args *NetworkingVipAssociateArgs, opts ...pulumi.ResourceOption) (*NetworkingVipAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortIds == nil {
		return nil, errors.New("invalid value for required argument 'PortIds'")
	}
	if args.VipId == nil {
		return nil, errors.New("invalid value for required argument 'VipId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkingVipAssociate
	err := ctx.RegisterResource("sbercloud:index/networkingVipAssociate:NetworkingVipAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingVipAssociate gets an existing NetworkingVipAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingVipAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingVipAssociateState, opts ...pulumi.ResourceOption) (*NetworkingVipAssociate, error) {
	var resource NetworkingVipAssociate
	err := ctx.ReadResource("sbercloud:index/networkingVipAssociate:NetworkingVipAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingVipAssociate resources.
type networkingVipAssociateState struct {
	IpAddresses  []string `pulumi:"ipAddresses"`
	PortIds      []string `pulumi:"portIds"`
	Region       *string  `pulumi:"region"`
	VipId        *string  `pulumi:"vipId"`
	VipIpAddress *string  `pulumi:"vipIpAddress"`
	VipSubnetId  *string  `pulumi:"vipSubnetId"`
}

type NetworkingVipAssociateState struct {
	IpAddresses  pulumi.StringArrayInput
	PortIds      pulumi.StringArrayInput
	Region       pulumi.StringPtrInput
	VipId        pulumi.StringPtrInput
	VipIpAddress pulumi.StringPtrInput
	VipSubnetId  pulumi.StringPtrInput
}

func (NetworkingVipAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingVipAssociateState)(nil)).Elem()
}

type networkingVipAssociateArgs struct {
	PortIds []string `pulumi:"portIds"`
	Region  *string  `pulumi:"region"`
	VipId   string   `pulumi:"vipId"`
}

// The set of arguments for constructing a NetworkingVipAssociate resource.
type NetworkingVipAssociateArgs struct {
	PortIds pulumi.StringArrayInput
	Region  pulumi.StringPtrInput
	VipId   pulumi.StringInput
}

func (NetworkingVipAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingVipAssociateArgs)(nil)).Elem()
}

type NetworkingVipAssociateInput interface {
	pulumi.Input

	ToNetworkingVipAssociateOutput() NetworkingVipAssociateOutput
	ToNetworkingVipAssociateOutputWithContext(ctx context.Context) NetworkingVipAssociateOutput
}

func (*NetworkingVipAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingVipAssociate)(nil)).Elem()
}

func (i *NetworkingVipAssociate) ToNetworkingVipAssociateOutput() NetworkingVipAssociateOutput {
	return i.ToNetworkingVipAssociateOutputWithContext(context.Background())
}

func (i *NetworkingVipAssociate) ToNetworkingVipAssociateOutputWithContext(ctx context.Context) NetworkingVipAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingVipAssociateOutput)
}

// NetworkingVipAssociateArrayInput is an input type that accepts NetworkingVipAssociateArray and NetworkingVipAssociateArrayOutput values.
// You can construct a concrete instance of `NetworkingVipAssociateArrayInput` via:
//
//	NetworkingVipAssociateArray{ NetworkingVipAssociateArgs{...} }
type NetworkingVipAssociateArrayInput interface {
	pulumi.Input

	ToNetworkingVipAssociateArrayOutput() NetworkingVipAssociateArrayOutput
	ToNetworkingVipAssociateArrayOutputWithContext(context.Context) NetworkingVipAssociateArrayOutput
}

type NetworkingVipAssociateArray []NetworkingVipAssociateInput

func (NetworkingVipAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingVipAssociate)(nil)).Elem()
}

func (i NetworkingVipAssociateArray) ToNetworkingVipAssociateArrayOutput() NetworkingVipAssociateArrayOutput {
	return i.ToNetworkingVipAssociateArrayOutputWithContext(context.Background())
}

func (i NetworkingVipAssociateArray) ToNetworkingVipAssociateArrayOutputWithContext(ctx context.Context) NetworkingVipAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingVipAssociateArrayOutput)
}

// NetworkingVipAssociateMapInput is an input type that accepts NetworkingVipAssociateMap and NetworkingVipAssociateMapOutput values.
// You can construct a concrete instance of `NetworkingVipAssociateMapInput` via:
//
//	NetworkingVipAssociateMap{ "key": NetworkingVipAssociateArgs{...} }
type NetworkingVipAssociateMapInput interface {
	pulumi.Input

	ToNetworkingVipAssociateMapOutput() NetworkingVipAssociateMapOutput
	ToNetworkingVipAssociateMapOutputWithContext(context.Context) NetworkingVipAssociateMapOutput
}

type NetworkingVipAssociateMap map[string]NetworkingVipAssociateInput

func (NetworkingVipAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingVipAssociate)(nil)).Elem()
}

func (i NetworkingVipAssociateMap) ToNetworkingVipAssociateMapOutput() NetworkingVipAssociateMapOutput {
	return i.ToNetworkingVipAssociateMapOutputWithContext(context.Background())
}

func (i NetworkingVipAssociateMap) ToNetworkingVipAssociateMapOutputWithContext(ctx context.Context) NetworkingVipAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingVipAssociateMapOutput)
}

type NetworkingVipAssociateOutput struct{ *pulumi.OutputState }

func (NetworkingVipAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingVipAssociate)(nil)).Elem()
}

func (o NetworkingVipAssociateOutput) ToNetworkingVipAssociateOutput() NetworkingVipAssociateOutput {
	return o
}

func (o NetworkingVipAssociateOutput) ToNetworkingVipAssociateOutputWithContext(ctx context.Context) NetworkingVipAssociateOutput {
	return o
}

func (o NetworkingVipAssociateOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkingVipAssociate) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

func (o NetworkingVipAssociateOutput) PortIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkingVipAssociate) pulumi.StringArrayOutput { return v.PortIds }).(pulumi.StringArrayOutput)
}

func (o NetworkingVipAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingVipAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o NetworkingVipAssociateOutput) VipId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingVipAssociate) pulumi.StringOutput { return v.VipId }).(pulumi.StringOutput)
}

func (o NetworkingVipAssociateOutput) VipIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingVipAssociate) pulumi.StringOutput { return v.VipIpAddress }).(pulumi.StringOutput)
}

func (o NetworkingVipAssociateOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingVipAssociate) pulumi.StringOutput { return v.VipSubnetId }).(pulumi.StringOutput)
}

type NetworkingVipAssociateArrayOutput struct{ *pulumi.OutputState }

func (NetworkingVipAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingVipAssociate)(nil)).Elem()
}

func (o NetworkingVipAssociateArrayOutput) ToNetworkingVipAssociateArrayOutput() NetworkingVipAssociateArrayOutput {
	return o
}

func (o NetworkingVipAssociateArrayOutput) ToNetworkingVipAssociateArrayOutputWithContext(ctx context.Context) NetworkingVipAssociateArrayOutput {
	return o
}

func (o NetworkingVipAssociateArrayOutput) Index(i pulumi.IntInput) NetworkingVipAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingVipAssociate {
		return vs[0].([]*NetworkingVipAssociate)[vs[1].(int)]
	}).(NetworkingVipAssociateOutput)
}

type NetworkingVipAssociateMapOutput struct{ *pulumi.OutputState }

func (NetworkingVipAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingVipAssociate)(nil)).Elem()
}

func (o NetworkingVipAssociateMapOutput) ToNetworkingVipAssociateMapOutput() NetworkingVipAssociateMapOutput {
	return o
}

func (o NetworkingVipAssociateMapOutput) ToNetworkingVipAssociateMapOutputWithContext(ctx context.Context) NetworkingVipAssociateMapOutput {
	return o
}

func (o NetworkingVipAssociateMapOutput) MapIndex(k pulumi.StringInput) NetworkingVipAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingVipAssociate {
		return vs[0].(map[string]*NetworkingVipAssociate)[vs[1].(string)]
	}).(NetworkingVipAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingVipAssociateInput)(nil)).Elem(), &NetworkingVipAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingVipAssociateArrayInput)(nil)).Elem(), NetworkingVipAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingVipAssociateMapInput)(nil)).Elem(), NetworkingVipAssociateMap{})
	pulumi.RegisterOutputType(NetworkingVipAssociateOutput{})
	pulumi.RegisterOutputType(NetworkingVipAssociateArrayOutput{})
	pulumi.RegisterOutputType(NetworkingVipAssociateMapOutput{})
}
