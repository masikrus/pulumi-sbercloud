// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityAccessKey struct {
	pulumi.CustomResourceState

	CreateTime      pulumi.StringOutput    `pulumi:"createTime"`
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EncryptedSecret pulumi.StringOutput    `pulumi:"encryptedSecret"`
	KeyFingerprint  pulumi.StringOutput    `pulumi:"keyFingerprint"`
	PgpKey          pulumi.StringPtrOutput `pulumi:"pgpKey"`
	Secret          pulumi.StringOutput    `pulumi:"secret"`
	SecretFile      pulumi.StringPtrOutput `pulumi:"secretFile"`
	Status          pulumi.StringOutput    `pulumi:"status"`
	UserId          pulumi.StringOutput    `pulumi:"userId"`
	UserName        pulumi.StringOutput    `pulumi:"userName"`
}

// NewIdentityAccessKey registers a new resource with the given unique name, arguments, and options.
func NewIdentityAccessKey(ctx *pulumi.Context,
	name string, args *IdentityAccessKeyArgs, opts ...pulumi.ResourceOption) (*IdentityAccessKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityAccessKey
	err := ctx.RegisterResource("sbercloud:index/identityAccessKey:IdentityAccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityAccessKey gets an existing IdentityAccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityAccessKeyState, opts ...pulumi.ResourceOption) (*IdentityAccessKey, error) {
	var resource IdentityAccessKey
	err := ctx.ReadResource("sbercloud:index/identityAccessKey:IdentityAccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityAccessKey resources.
type identityAccessKeyState struct {
	CreateTime      *string `pulumi:"createTime"`
	Description     *string `pulumi:"description"`
	EncryptedSecret *string `pulumi:"encryptedSecret"`
	KeyFingerprint  *string `pulumi:"keyFingerprint"`
	PgpKey          *string `pulumi:"pgpKey"`
	Secret          *string `pulumi:"secret"`
	SecretFile      *string `pulumi:"secretFile"`
	Status          *string `pulumi:"status"`
	UserId          *string `pulumi:"userId"`
	UserName        *string `pulumi:"userName"`
}

type IdentityAccessKeyState struct {
	CreateTime      pulumi.StringPtrInput
	Description     pulumi.StringPtrInput
	EncryptedSecret pulumi.StringPtrInput
	KeyFingerprint  pulumi.StringPtrInput
	PgpKey          pulumi.StringPtrInput
	Secret          pulumi.StringPtrInput
	SecretFile      pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
	UserId          pulumi.StringPtrInput
	UserName        pulumi.StringPtrInput
}

func (IdentityAccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAccessKeyState)(nil)).Elem()
}

type identityAccessKeyArgs struct {
	Description *string `pulumi:"description"`
	PgpKey      *string `pulumi:"pgpKey"`
	SecretFile  *string `pulumi:"secretFile"`
	Status      *string `pulumi:"status"`
	UserId      string  `pulumi:"userId"`
}

// The set of arguments for constructing a IdentityAccessKey resource.
type IdentityAccessKeyArgs struct {
	Description pulumi.StringPtrInput
	PgpKey      pulumi.StringPtrInput
	SecretFile  pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	UserId      pulumi.StringInput
}

func (IdentityAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAccessKeyArgs)(nil)).Elem()
}

type IdentityAccessKeyInput interface {
	pulumi.Input

	ToIdentityAccessKeyOutput() IdentityAccessKeyOutput
	ToIdentityAccessKeyOutputWithContext(ctx context.Context) IdentityAccessKeyOutput
}

func (*IdentityAccessKey) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAccessKey)(nil)).Elem()
}

func (i *IdentityAccessKey) ToIdentityAccessKeyOutput() IdentityAccessKeyOutput {
	return i.ToIdentityAccessKeyOutputWithContext(context.Background())
}

func (i *IdentityAccessKey) ToIdentityAccessKeyOutputWithContext(ctx context.Context) IdentityAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAccessKeyOutput)
}

// IdentityAccessKeyArrayInput is an input type that accepts IdentityAccessKeyArray and IdentityAccessKeyArrayOutput values.
// You can construct a concrete instance of `IdentityAccessKeyArrayInput` via:
//
//	IdentityAccessKeyArray{ IdentityAccessKeyArgs{...} }
type IdentityAccessKeyArrayInput interface {
	pulumi.Input

	ToIdentityAccessKeyArrayOutput() IdentityAccessKeyArrayOutput
	ToIdentityAccessKeyArrayOutputWithContext(context.Context) IdentityAccessKeyArrayOutput
}

type IdentityAccessKeyArray []IdentityAccessKeyInput

func (IdentityAccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAccessKey)(nil)).Elem()
}

func (i IdentityAccessKeyArray) ToIdentityAccessKeyArrayOutput() IdentityAccessKeyArrayOutput {
	return i.ToIdentityAccessKeyArrayOutputWithContext(context.Background())
}

func (i IdentityAccessKeyArray) ToIdentityAccessKeyArrayOutputWithContext(ctx context.Context) IdentityAccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAccessKeyArrayOutput)
}

// IdentityAccessKeyMapInput is an input type that accepts IdentityAccessKeyMap and IdentityAccessKeyMapOutput values.
// You can construct a concrete instance of `IdentityAccessKeyMapInput` via:
//
//	IdentityAccessKeyMap{ "key": IdentityAccessKeyArgs{...} }
type IdentityAccessKeyMapInput interface {
	pulumi.Input

	ToIdentityAccessKeyMapOutput() IdentityAccessKeyMapOutput
	ToIdentityAccessKeyMapOutputWithContext(context.Context) IdentityAccessKeyMapOutput
}

type IdentityAccessKeyMap map[string]IdentityAccessKeyInput

func (IdentityAccessKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAccessKey)(nil)).Elem()
}

func (i IdentityAccessKeyMap) ToIdentityAccessKeyMapOutput() IdentityAccessKeyMapOutput {
	return i.ToIdentityAccessKeyMapOutputWithContext(context.Background())
}

func (i IdentityAccessKeyMap) ToIdentityAccessKeyMapOutputWithContext(ctx context.Context) IdentityAccessKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAccessKeyMapOutput)
}

type IdentityAccessKeyOutput struct{ *pulumi.OutputState }

func (IdentityAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAccessKey)(nil)).Elem()
}

func (o IdentityAccessKeyOutput) ToIdentityAccessKeyOutput() IdentityAccessKeyOutput {
	return o
}

func (o IdentityAccessKeyOutput) ToIdentityAccessKeyOutputWithContext(ctx context.Context) IdentityAccessKeyOutput {
	return o
}

func (o IdentityAccessKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o IdentityAccessKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IdentityAccessKeyOutput) EncryptedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.EncryptedSecret }).(pulumi.StringOutput)
}

func (o IdentityAccessKeyOutput) KeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.KeyFingerprint }).(pulumi.StringOutput)
}

func (o IdentityAccessKeyOutput) PgpKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringPtrOutput { return v.PgpKey }).(pulumi.StringPtrOutput)
}

func (o IdentityAccessKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

func (o IdentityAccessKeyOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringPtrOutput { return v.SecretFile }).(pulumi.StringPtrOutput)
}

func (o IdentityAccessKeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o IdentityAccessKeyOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func (o IdentityAccessKeyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAccessKey) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type IdentityAccessKeyArrayOutput struct{ *pulumi.OutputState }

func (IdentityAccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAccessKey)(nil)).Elem()
}

func (o IdentityAccessKeyArrayOutput) ToIdentityAccessKeyArrayOutput() IdentityAccessKeyArrayOutput {
	return o
}

func (o IdentityAccessKeyArrayOutput) ToIdentityAccessKeyArrayOutputWithContext(ctx context.Context) IdentityAccessKeyArrayOutput {
	return o
}

func (o IdentityAccessKeyArrayOutput) Index(i pulumi.IntInput) IdentityAccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityAccessKey {
		return vs[0].([]*IdentityAccessKey)[vs[1].(int)]
	}).(IdentityAccessKeyOutput)
}

type IdentityAccessKeyMapOutput struct{ *pulumi.OutputState }

func (IdentityAccessKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAccessKey)(nil)).Elem()
}

func (o IdentityAccessKeyMapOutput) ToIdentityAccessKeyMapOutput() IdentityAccessKeyMapOutput {
	return o
}

func (o IdentityAccessKeyMapOutput) ToIdentityAccessKeyMapOutputWithContext(ctx context.Context) IdentityAccessKeyMapOutput {
	return o
}

func (o IdentityAccessKeyMapOutput) MapIndex(k pulumi.StringInput) IdentityAccessKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityAccessKey {
		return vs[0].(map[string]*IdentityAccessKey)[vs[1].(string)]
	}).(IdentityAccessKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAccessKeyInput)(nil)).Elem(), &IdentityAccessKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAccessKeyArrayInput)(nil)).Elem(), IdentityAccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAccessKeyMapInput)(nil)).Elem(), IdentityAccessKeyMap{})
	pulumi.RegisterOutputType(IdentityAccessKeyOutput{})
	pulumi.RegisterOutputType(IdentityAccessKeyArrayOutput{})
	pulumi.RegisterOutputType(IdentityAccessKeyMapOutput{})
}
