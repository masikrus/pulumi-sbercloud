// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsSqlAudit struct {
	pulumi.CustomResourceState

	// Specifies the list of audit types.
	AuditTypes pulumi.StringArrayOutput `pulumi:"auditTypes"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the number of days for storing audit logs.
	KeepDays pulumi.IntOutput    `pulumi:"keepDays"`
	Region   pulumi.StringOutput `pulumi:"region"`
	// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
	ReserveAuditlogs pulumi.BoolPtrOutput `pulumi:"reserveAuditlogs"`
}

// NewRdsSqlAudit registers a new resource with the given unique name, arguments, and options.
func NewRdsSqlAudit(ctx *pulumi.Context,
	name string, args *RdsSqlAuditArgs, opts ...pulumi.ResourceOption) (*RdsSqlAudit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.KeepDays == nil {
		return nil, errors.New("invalid value for required argument 'KeepDays'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsSqlAudit
	err := ctx.RegisterResource("sbercloud:index/rdsSqlAudit:RdsSqlAudit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsSqlAudit gets an existing RdsSqlAudit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsSqlAudit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsSqlAuditState, opts ...pulumi.ResourceOption) (*RdsSqlAudit, error) {
	var resource RdsSqlAudit
	err := ctx.ReadResource("sbercloud:index/rdsSqlAudit:RdsSqlAudit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsSqlAudit resources.
type rdsSqlAuditState struct {
	// Specifies the list of audit types.
	AuditTypes []string `pulumi:"auditTypes"`
	// Specifies the ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the number of days for storing audit logs.
	KeepDays *int    `pulumi:"keepDays"`
	Region   *string `pulumi:"region"`
	// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
	ReserveAuditlogs *bool `pulumi:"reserveAuditlogs"`
}

type RdsSqlAuditState struct {
	// Specifies the list of audit types.
	AuditTypes pulumi.StringArrayInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the number of days for storing audit logs.
	KeepDays pulumi.IntPtrInput
	Region   pulumi.StringPtrInput
	// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
	ReserveAuditlogs pulumi.BoolPtrInput
}

func (RdsSqlAuditState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlAuditState)(nil)).Elem()
}

type rdsSqlAuditArgs struct {
	// Specifies the list of audit types.
	AuditTypes []string `pulumi:"auditTypes"`
	// Specifies the ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the number of days for storing audit logs.
	KeepDays int     `pulumi:"keepDays"`
	Region   *string `pulumi:"region"`
	// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
	ReserveAuditlogs *bool `pulumi:"reserveAuditlogs"`
}

// The set of arguments for constructing a RdsSqlAudit resource.
type RdsSqlAuditArgs struct {
	// Specifies the list of audit types.
	AuditTypes pulumi.StringArrayInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput
	// Specifies the number of days for storing audit logs.
	KeepDays pulumi.IntInput
	Region   pulumi.StringPtrInput
	// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
	ReserveAuditlogs pulumi.BoolPtrInput
}

func (RdsSqlAuditArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlAuditArgs)(nil)).Elem()
}

type RdsSqlAuditInput interface {
	pulumi.Input

	ToRdsSqlAuditOutput() RdsSqlAuditOutput
	ToRdsSqlAuditOutputWithContext(ctx context.Context) RdsSqlAuditOutput
}

func (*RdsSqlAudit) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlAudit)(nil)).Elem()
}

func (i *RdsSqlAudit) ToRdsSqlAuditOutput() RdsSqlAuditOutput {
	return i.ToRdsSqlAuditOutputWithContext(context.Background())
}

func (i *RdsSqlAudit) ToRdsSqlAuditOutputWithContext(ctx context.Context) RdsSqlAuditOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlAuditOutput)
}

// RdsSqlAuditArrayInput is an input type that accepts RdsSqlAuditArray and RdsSqlAuditArrayOutput values.
// You can construct a concrete instance of `RdsSqlAuditArrayInput` via:
//
//	RdsSqlAuditArray{ RdsSqlAuditArgs{...} }
type RdsSqlAuditArrayInput interface {
	pulumi.Input

	ToRdsSqlAuditArrayOutput() RdsSqlAuditArrayOutput
	ToRdsSqlAuditArrayOutputWithContext(context.Context) RdsSqlAuditArrayOutput
}

type RdsSqlAuditArray []RdsSqlAuditInput

func (RdsSqlAuditArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlAudit)(nil)).Elem()
}

func (i RdsSqlAuditArray) ToRdsSqlAuditArrayOutput() RdsSqlAuditArrayOutput {
	return i.ToRdsSqlAuditArrayOutputWithContext(context.Background())
}

func (i RdsSqlAuditArray) ToRdsSqlAuditArrayOutputWithContext(ctx context.Context) RdsSqlAuditArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlAuditArrayOutput)
}

// RdsSqlAuditMapInput is an input type that accepts RdsSqlAuditMap and RdsSqlAuditMapOutput values.
// You can construct a concrete instance of `RdsSqlAuditMapInput` via:
//
//	RdsSqlAuditMap{ "key": RdsSqlAuditArgs{...} }
type RdsSqlAuditMapInput interface {
	pulumi.Input

	ToRdsSqlAuditMapOutput() RdsSqlAuditMapOutput
	ToRdsSqlAuditMapOutputWithContext(context.Context) RdsSqlAuditMapOutput
}

type RdsSqlAuditMap map[string]RdsSqlAuditInput

func (RdsSqlAuditMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlAudit)(nil)).Elem()
}

func (i RdsSqlAuditMap) ToRdsSqlAuditMapOutput() RdsSqlAuditMapOutput {
	return i.ToRdsSqlAuditMapOutputWithContext(context.Background())
}

func (i RdsSqlAuditMap) ToRdsSqlAuditMapOutputWithContext(ctx context.Context) RdsSqlAuditMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlAuditMapOutput)
}

type RdsSqlAuditOutput struct{ *pulumi.OutputState }

func (RdsSqlAuditOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlAudit)(nil)).Elem()
}

func (o RdsSqlAuditOutput) ToRdsSqlAuditOutput() RdsSqlAuditOutput {
	return o
}

func (o RdsSqlAuditOutput) ToRdsSqlAuditOutputWithContext(ctx context.Context) RdsSqlAuditOutput {
	return o
}

// Specifies the list of audit types.
func (o RdsSqlAuditOutput) AuditTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RdsSqlAudit) pulumi.StringArrayOutput { return v.AuditTypes }).(pulumi.StringArrayOutput)
}

// Specifies the ID of the RDS instance.
func (o RdsSqlAuditOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlAudit) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the number of days for storing audit logs.
func (o RdsSqlAuditOutput) KeepDays() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsSqlAudit) pulumi.IntOutput { return v.KeepDays }).(pulumi.IntOutput)
}

func (o RdsSqlAuditOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlAudit) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
func (o RdsSqlAuditOutput) ReserveAuditlogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdsSqlAudit) pulumi.BoolPtrOutput { return v.ReserveAuditlogs }).(pulumi.BoolPtrOutput)
}

type RdsSqlAuditArrayOutput struct{ *pulumi.OutputState }

func (RdsSqlAuditArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlAudit)(nil)).Elem()
}

func (o RdsSqlAuditArrayOutput) ToRdsSqlAuditArrayOutput() RdsSqlAuditArrayOutput {
	return o
}

func (o RdsSqlAuditArrayOutput) ToRdsSqlAuditArrayOutputWithContext(ctx context.Context) RdsSqlAuditArrayOutput {
	return o
}

func (o RdsSqlAuditArrayOutput) Index(i pulumi.IntInput) RdsSqlAuditOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsSqlAudit {
		return vs[0].([]*RdsSqlAudit)[vs[1].(int)]
	}).(RdsSqlAuditOutput)
}

type RdsSqlAuditMapOutput struct{ *pulumi.OutputState }

func (RdsSqlAuditMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlAudit)(nil)).Elem()
}

func (o RdsSqlAuditMapOutput) ToRdsSqlAuditMapOutput() RdsSqlAuditMapOutput {
	return o
}

func (o RdsSqlAuditMapOutput) ToRdsSqlAuditMapOutputWithContext(ctx context.Context) RdsSqlAuditMapOutput {
	return o
}

func (o RdsSqlAuditMapOutput) MapIndex(k pulumi.StringInput) RdsSqlAuditOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsSqlAudit {
		return vs[0].(map[string]*RdsSqlAudit)[vs[1].(string)]
	}).(RdsSqlAuditOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlAuditInput)(nil)).Elem(), &RdsSqlAudit{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlAuditArrayInput)(nil)).Elem(), RdsSqlAuditArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlAuditMapInput)(nil)).Elem(), RdsSqlAuditMap{})
	pulumi.RegisterOutputType(RdsSqlAuditOutput{})
	pulumi.RegisterOutputType(RdsSqlAuditArrayOutput{})
	pulumi.RegisterOutputType(RdsSqlAuditMapOutput{})
}
