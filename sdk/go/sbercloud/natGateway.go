// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NatGateway struct {
	pulumi.CustomResourceState

	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// The order information of the NAT gateway.
	BillingInfo pulumi.StringOutput `pulumi:"billingInfo"`
	// The bandwidth that the NAT gateway can receive or send per second.
	BpsMax       pulumi.IntOutput    `pulumi:"bpsMax"`
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// The creation time of the NAT gateway.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the NAT gateway.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The maximum number of DNAT rules on the NAT gateway.
	DnatRulesLimit pulumi.IntOutput `pulumi:"dnatRulesLimit"`
	// The enterprise project ID of the NAT gateway.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The NAT gateway name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress pulumi.StringOutput    `pulumi:"ngportIpAddress"`
	Period          pulumi.IntPtrOutput    `pulumi:"period"`
	PeriodUnit      pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax pulumi.IntOutput `pulumi:"ppsMax"`
	// The region where the NAT gateway is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The session configuration of the NAT gateway.
	SessionConf NatGatewaySessionConfOutput `pulumi:"sessionConf"`
	// The maximum number of SNAT rules on the NAT gateway.
	SnatRulePublicIpLimit pulumi.IntOutput `pulumi:"snatRulePublicIpLimit"`
	// The specification of the NAT gateway.
	Spec pulumi.StringOutput `pulumi:"spec"`
	// The current status of the NAT gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
	SubnetId pulumi.StringOutput    `pulumi:"subnetId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the VPC to which the NAT gateway belongs.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNatGateway registers a new resource with the given unique name, arguments, and options.
func NewNatGateway(ctx *pulumi.Context,
	name string, args *NatGatewayArgs, opts ...pulumi.ResourceOption) (*NatGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatGateway
	err := ctx.RegisterResource("sbercloud:index/natGateway:NatGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatGateway gets an existing NatGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatGatewayState, opts ...pulumi.ResourceOption) (*NatGateway, error) {
	var resource NatGateway
	err := ctx.ReadResource("sbercloud:index/natGateway:NatGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatGateway resources.
type natGatewayState struct {
	AutoRenew *string `pulumi:"autoRenew"`
	// The order information of the NAT gateway.
	BillingInfo *string `pulumi:"billingInfo"`
	// The bandwidth that the NAT gateway can receive or send per second.
	BpsMax       *int    `pulumi:"bpsMax"`
	ChargingMode *string `pulumi:"chargingMode"`
	// The creation time of the NAT gateway.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the NAT gateway.
	Description *string `pulumi:"description"`
	// The maximum number of DNAT rules on the NAT gateway.
	DnatRulesLimit *int `pulumi:"dnatRulesLimit"`
	// The enterprise project ID of the NAT gateway.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The NAT gateway name.
	Name *string `pulumi:"name"`
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress *string `pulumi:"ngportIpAddress"`
	Period          *int    `pulumi:"period"`
	PeriodUnit      *string `pulumi:"periodUnit"`
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax *int `pulumi:"ppsMax"`
	// The region where the NAT gateway is located.
	Region *string `pulumi:"region"`
	// The session configuration of the NAT gateway.
	SessionConf *NatGatewaySessionConf `pulumi:"sessionConf"`
	// The maximum number of SNAT rules on the NAT gateway.
	SnatRulePublicIpLimit *int `pulumi:"snatRulePublicIpLimit"`
	// The specification of the NAT gateway.
	Spec *string `pulumi:"spec"`
	// The current status of the NAT gateway.
	Status *string `pulumi:"status"`
	// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
	SubnetId *string           `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// The ID of the VPC to which the NAT gateway belongs.
	VpcId *string `pulumi:"vpcId"`
}

type NatGatewayState struct {
	AutoRenew pulumi.StringPtrInput
	// The order information of the NAT gateway.
	BillingInfo pulumi.StringPtrInput
	// The bandwidth that the NAT gateway can receive or send per second.
	BpsMax       pulumi.IntPtrInput
	ChargingMode pulumi.StringPtrInput
	// The creation time of the NAT gateway.
	CreatedAt pulumi.StringPtrInput
	// The description of the NAT gateway.
	Description pulumi.StringPtrInput
	// The maximum number of DNAT rules on the NAT gateway.
	DnatRulesLimit pulumi.IntPtrInput
	// The enterprise project ID of the NAT gateway.
	EnterpriseProjectId pulumi.StringPtrInput
	// The NAT gateway name.
	Name pulumi.StringPtrInput
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress pulumi.StringPtrInput
	Period          pulumi.IntPtrInput
	PeriodUnit      pulumi.StringPtrInput
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax pulumi.IntPtrInput
	// The region where the NAT gateway is located.
	Region pulumi.StringPtrInput
	// The session configuration of the NAT gateway.
	SessionConf NatGatewaySessionConfPtrInput
	// The maximum number of SNAT rules on the NAT gateway.
	SnatRulePublicIpLimit pulumi.IntPtrInput
	// The specification of the NAT gateway.
	Spec pulumi.StringPtrInput
	// The current status of the NAT gateway.
	Status pulumi.StringPtrInput
	// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
	SubnetId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// The ID of the VPC to which the NAT gateway belongs.
	VpcId pulumi.StringPtrInput
}

func (NatGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*natGatewayState)(nil)).Elem()
}

type natGatewayArgs struct {
	AutoRenew    *string `pulumi:"autoRenew"`
	ChargingMode *string `pulumi:"chargingMode"`
	// The description of the NAT gateway.
	Description *string `pulumi:"description"`
	// The enterprise project ID of the NAT gateway.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The NAT gateway name.
	Name *string `pulumi:"name"`
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress *string `pulumi:"ngportIpAddress"`
	Period          *int    `pulumi:"period"`
	PeriodUnit      *string `pulumi:"periodUnit"`
	// The region where the NAT gateway is located.
	Region *string `pulumi:"region"`
	// The session configuration of the NAT gateway.
	SessionConf *NatGatewaySessionConf `pulumi:"sessionConf"`
	// The specification of the NAT gateway.
	Spec string `pulumi:"spec"`
	// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
	SubnetId string            `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// The ID of the VPC to which the NAT gateway belongs.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NatGateway resource.
type NatGatewayArgs struct {
	AutoRenew    pulumi.StringPtrInput
	ChargingMode pulumi.StringPtrInput
	// The description of the NAT gateway.
	Description pulumi.StringPtrInput
	// The enterprise project ID of the NAT gateway.
	EnterpriseProjectId pulumi.StringPtrInput
	// The NAT gateway name.
	Name pulumi.StringPtrInput
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress pulumi.StringPtrInput
	Period          pulumi.IntPtrInput
	PeriodUnit      pulumi.StringPtrInput
	// The region where the NAT gateway is located.
	Region pulumi.StringPtrInput
	// The session configuration of the NAT gateway.
	SessionConf NatGatewaySessionConfPtrInput
	// The specification of the NAT gateway.
	Spec pulumi.StringInput
	// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
	SubnetId pulumi.StringInput
	Tags     pulumi.StringMapInput
	// The ID of the VPC to which the NAT gateway belongs.
	VpcId pulumi.StringInput
}

func (NatGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natGatewayArgs)(nil)).Elem()
}

type NatGatewayInput interface {
	pulumi.Input

	ToNatGatewayOutput() NatGatewayOutput
	ToNatGatewayOutputWithContext(ctx context.Context) NatGatewayOutput
}

func (*NatGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**NatGateway)(nil)).Elem()
}

func (i *NatGateway) ToNatGatewayOutput() NatGatewayOutput {
	return i.ToNatGatewayOutputWithContext(context.Background())
}

func (i *NatGateway) ToNatGatewayOutputWithContext(ctx context.Context) NatGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayOutput)
}

// NatGatewayArrayInput is an input type that accepts NatGatewayArray and NatGatewayArrayOutput values.
// You can construct a concrete instance of `NatGatewayArrayInput` via:
//
//	NatGatewayArray{ NatGatewayArgs{...} }
type NatGatewayArrayInput interface {
	pulumi.Input

	ToNatGatewayArrayOutput() NatGatewayArrayOutput
	ToNatGatewayArrayOutputWithContext(context.Context) NatGatewayArrayOutput
}

type NatGatewayArray []NatGatewayInput

func (NatGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatGateway)(nil)).Elem()
}

func (i NatGatewayArray) ToNatGatewayArrayOutput() NatGatewayArrayOutput {
	return i.ToNatGatewayArrayOutputWithContext(context.Background())
}

func (i NatGatewayArray) ToNatGatewayArrayOutputWithContext(ctx context.Context) NatGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayArrayOutput)
}

// NatGatewayMapInput is an input type that accepts NatGatewayMap and NatGatewayMapOutput values.
// You can construct a concrete instance of `NatGatewayMapInput` via:
//
//	NatGatewayMap{ "key": NatGatewayArgs{...} }
type NatGatewayMapInput interface {
	pulumi.Input

	ToNatGatewayMapOutput() NatGatewayMapOutput
	ToNatGatewayMapOutputWithContext(context.Context) NatGatewayMapOutput
}

type NatGatewayMap map[string]NatGatewayInput

func (NatGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatGateway)(nil)).Elem()
}

func (i NatGatewayMap) ToNatGatewayMapOutput() NatGatewayMapOutput {
	return i.ToNatGatewayMapOutputWithContext(context.Background())
}

func (i NatGatewayMap) ToNatGatewayMapOutputWithContext(ctx context.Context) NatGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatGatewayMapOutput)
}

type NatGatewayOutput struct{ *pulumi.OutputState }

func (NatGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatGateway)(nil)).Elem()
}

func (o NatGatewayOutput) ToNatGatewayOutput() NatGatewayOutput {
	return o
}

func (o NatGatewayOutput) ToNatGatewayOutputWithContext(ctx context.Context) NatGatewayOutput {
	return o
}

func (o NatGatewayOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// The order information of the NAT gateway.
func (o NatGatewayOutput) BillingInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.BillingInfo }).(pulumi.StringOutput)
}

// The bandwidth that the NAT gateway can receive or send per second.
func (o NatGatewayOutput) BpsMax() pulumi.IntOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.IntOutput { return v.BpsMax }).(pulumi.IntOutput)
}

func (o NatGatewayOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The creation time of the NAT gateway.
func (o NatGatewayOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the NAT gateway.
func (o NatGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The maximum number of DNAT rules on the NAT gateway.
func (o NatGatewayOutput) DnatRulesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.IntOutput { return v.DnatRulesLimit }).(pulumi.IntOutput)
}

// The enterprise project ID of the NAT gateway.
func (o NatGatewayOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The NAT gateway name.
func (o NatGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The IP address used for the NG port of the NAT gateway.
func (o NatGatewayOutput) NgportIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.NgportIpAddress }).(pulumi.StringOutput)
}

func (o NatGatewayOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o NatGatewayOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The number of packets that the NAT gateway can receive or send per second.
func (o NatGatewayOutput) PpsMax() pulumi.IntOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.IntOutput { return v.PpsMax }).(pulumi.IntOutput)
}

// The region where the NAT gateway is located.
func (o NatGatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The session configuration of the NAT gateway.
func (o NatGatewayOutput) SessionConf() NatGatewaySessionConfOutput {
	return o.ApplyT(func(v *NatGateway) NatGatewaySessionConfOutput { return v.SessionConf }).(NatGatewaySessionConfOutput)
}

// The maximum number of SNAT rules on the NAT gateway.
func (o NatGatewayOutput) SnatRulePublicIpLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.IntOutput { return v.SnatRulePublicIpLimit }).(pulumi.IntOutput)
}

// The specification of the NAT gateway.
func (o NatGatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// The current status of the NAT gateway.
func (o NatGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
func (o NatGatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o NatGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the VPC to which the NAT gateway belongs.
func (o NatGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatGateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NatGatewayArrayOutput struct{ *pulumi.OutputState }

func (NatGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatGateway)(nil)).Elem()
}

func (o NatGatewayArrayOutput) ToNatGatewayArrayOutput() NatGatewayArrayOutput {
	return o
}

func (o NatGatewayArrayOutput) ToNatGatewayArrayOutputWithContext(ctx context.Context) NatGatewayArrayOutput {
	return o
}

func (o NatGatewayArrayOutput) Index(i pulumi.IntInput) NatGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatGateway {
		return vs[0].([]*NatGateway)[vs[1].(int)]
	}).(NatGatewayOutput)
}

type NatGatewayMapOutput struct{ *pulumi.OutputState }

func (NatGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatGateway)(nil)).Elem()
}

func (o NatGatewayMapOutput) ToNatGatewayMapOutput() NatGatewayMapOutput {
	return o
}

func (o NatGatewayMapOutput) ToNatGatewayMapOutputWithContext(ctx context.Context) NatGatewayMapOutput {
	return o
}

func (o NatGatewayMapOutput) MapIndex(k pulumi.StringInput) NatGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatGateway {
		return vs[0].(map[string]*NatGateway)[vs[1].(string)]
	}).(NatGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayInput)(nil)).Elem(), &NatGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayArrayInput)(nil)).Elem(), NatGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayMapInput)(nil)).Elem(), NatGatewayMap{})
	pulumi.RegisterOutputType(NatGatewayOutput{})
	pulumi.RegisterOutputType(NatGatewayArrayOutput{})
	pulumi.RegisterOutputType(NatGatewayMapOutput{})
}
