// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DmsKafkaTopic struct {
	pulumi.CustomResourceState

	AgingTime           pulumi.IntOutput               `pulumi:"agingTime"`
	Configs             DmsKafkaTopicConfigArrayOutput `pulumi:"configs"`
	CreatedAt           pulumi.StringOutput            `pulumi:"createdAt"`
	Description         pulumi.StringPtrOutput         `pulumi:"description"`
	InstanceId          pulumi.StringOutput            `pulumi:"instanceId"`
	Name                pulumi.StringOutput            `pulumi:"name"`
	NewPartitionBrokers pulumi.IntArrayOutput          `pulumi:"newPartitionBrokers"`
	Partitions          pulumi.IntOutput               `pulumi:"partitions"`
	PoliciesOnly        pulumi.BoolOutput              `pulumi:"policiesOnly"`
	Region              pulumi.StringOutput            `pulumi:"region"`
	Replicas            pulumi.IntOutput               `pulumi:"replicas"`
	SyncFlushing        pulumi.BoolOutput              `pulumi:"syncFlushing"`
	SyncReplication     pulumi.BoolOutput              `pulumi:"syncReplication"`
	Type                pulumi.StringOutput            `pulumi:"type"`
}

// NewDmsKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewDmsKafkaTopic(ctx *pulumi.Context,
	name string, args *DmsKafkaTopicArgs, opts ...pulumi.ResourceOption) (*DmsKafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsKafkaTopic
	err := ctx.RegisterResource("sbercloud:index/dmsKafkaTopic:DmsKafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsKafkaTopic gets an existing DmsKafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsKafkaTopicState, opts ...pulumi.ResourceOption) (*DmsKafkaTopic, error) {
	var resource DmsKafkaTopic
	err := ctx.ReadResource("sbercloud:index/dmsKafkaTopic:DmsKafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsKafkaTopic resources.
type dmsKafkaTopicState struct {
	AgingTime           *int                  `pulumi:"agingTime"`
	Configs             []DmsKafkaTopicConfig `pulumi:"configs"`
	CreatedAt           *string               `pulumi:"createdAt"`
	Description         *string               `pulumi:"description"`
	InstanceId          *string               `pulumi:"instanceId"`
	Name                *string               `pulumi:"name"`
	NewPartitionBrokers []int                 `pulumi:"newPartitionBrokers"`
	Partitions          *int                  `pulumi:"partitions"`
	PoliciesOnly        *bool                 `pulumi:"policiesOnly"`
	Region              *string               `pulumi:"region"`
	Replicas            *int                  `pulumi:"replicas"`
	SyncFlushing        *bool                 `pulumi:"syncFlushing"`
	SyncReplication     *bool                 `pulumi:"syncReplication"`
	Type                *string               `pulumi:"type"`
}

type DmsKafkaTopicState struct {
	AgingTime           pulumi.IntPtrInput
	Configs             DmsKafkaTopicConfigArrayInput
	CreatedAt           pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	InstanceId          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	NewPartitionBrokers pulumi.IntArrayInput
	Partitions          pulumi.IntPtrInput
	PoliciesOnly        pulumi.BoolPtrInput
	Region              pulumi.StringPtrInput
	Replicas            pulumi.IntPtrInput
	SyncFlushing        pulumi.BoolPtrInput
	SyncReplication     pulumi.BoolPtrInput
	Type                pulumi.StringPtrInput
}

func (DmsKafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaTopicState)(nil)).Elem()
}

type dmsKafkaTopicArgs struct {
	AgingTime           *int                  `pulumi:"agingTime"`
	Configs             []DmsKafkaTopicConfig `pulumi:"configs"`
	Description         *string               `pulumi:"description"`
	InstanceId          string                `pulumi:"instanceId"`
	Name                *string               `pulumi:"name"`
	NewPartitionBrokers []int                 `pulumi:"newPartitionBrokers"`
	Partitions          int                   `pulumi:"partitions"`
	Region              *string               `pulumi:"region"`
	Replicas            *int                  `pulumi:"replicas"`
	SyncFlushing        *bool                 `pulumi:"syncFlushing"`
	SyncReplication     *bool                 `pulumi:"syncReplication"`
}

// The set of arguments for constructing a DmsKafkaTopic resource.
type DmsKafkaTopicArgs struct {
	AgingTime           pulumi.IntPtrInput
	Configs             DmsKafkaTopicConfigArrayInput
	Description         pulumi.StringPtrInput
	InstanceId          pulumi.StringInput
	Name                pulumi.StringPtrInput
	NewPartitionBrokers pulumi.IntArrayInput
	Partitions          pulumi.IntInput
	Region              pulumi.StringPtrInput
	Replicas            pulumi.IntPtrInput
	SyncFlushing        pulumi.BoolPtrInput
	SyncReplication     pulumi.BoolPtrInput
}

func (DmsKafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaTopicArgs)(nil)).Elem()
}

type DmsKafkaTopicInput interface {
	pulumi.Input

	ToDmsKafkaTopicOutput() DmsKafkaTopicOutput
	ToDmsKafkaTopicOutputWithContext(ctx context.Context) DmsKafkaTopicOutput
}

func (*DmsKafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaTopic)(nil)).Elem()
}

func (i *DmsKafkaTopic) ToDmsKafkaTopicOutput() DmsKafkaTopicOutput {
	return i.ToDmsKafkaTopicOutputWithContext(context.Background())
}

func (i *DmsKafkaTopic) ToDmsKafkaTopicOutputWithContext(ctx context.Context) DmsKafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaTopicOutput)
}

// DmsKafkaTopicArrayInput is an input type that accepts DmsKafkaTopicArray and DmsKafkaTopicArrayOutput values.
// You can construct a concrete instance of `DmsKafkaTopicArrayInput` via:
//
//	DmsKafkaTopicArray{ DmsKafkaTopicArgs{...} }
type DmsKafkaTopicArrayInput interface {
	pulumi.Input

	ToDmsKafkaTopicArrayOutput() DmsKafkaTopicArrayOutput
	ToDmsKafkaTopicArrayOutputWithContext(context.Context) DmsKafkaTopicArrayOutput
}

type DmsKafkaTopicArray []DmsKafkaTopicInput

func (DmsKafkaTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaTopic)(nil)).Elem()
}

func (i DmsKafkaTopicArray) ToDmsKafkaTopicArrayOutput() DmsKafkaTopicArrayOutput {
	return i.ToDmsKafkaTopicArrayOutputWithContext(context.Background())
}

func (i DmsKafkaTopicArray) ToDmsKafkaTopicArrayOutputWithContext(ctx context.Context) DmsKafkaTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaTopicArrayOutput)
}

// DmsKafkaTopicMapInput is an input type that accepts DmsKafkaTopicMap and DmsKafkaTopicMapOutput values.
// You can construct a concrete instance of `DmsKafkaTopicMapInput` via:
//
//	DmsKafkaTopicMap{ "key": DmsKafkaTopicArgs{...} }
type DmsKafkaTopicMapInput interface {
	pulumi.Input

	ToDmsKafkaTopicMapOutput() DmsKafkaTopicMapOutput
	ToDmsKafkaTopicMapOutputWithContext(context.Context) DmsKafkaTopicMapOutput
}

type DmsKafkaTopicMap map[string]DmsKafkaTopicInput

func (DmsKafkaTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaTopic)(nil)).Elem()
}

func (i DmsKafkaTopicMap) ToDmsKafkaTopicMapOutput() DmsKafkaTopicMapOutput {
	return i.ToDmsKafkaTopicMapOutputWithContext(context.Background())
}

func (i DmsKafkaTopicMap) ToDmsKafkaTopicMapOutputWithContext(ctx context.Context) DmsKafkaTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaTopicMapOutput)
}

type DmsKafkaTopicOutput struct{ *pulumi.OutputState }

func (DmsKafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaTopic)(nil)).Elem()
}

func (o DmsKafkaTopicOutput) ToDmsKafkaTopicOutput() DmsKafkaTopicOutput {
	return o
}

func (o DmsKafkaTopicOutput) ToDmsKafkaTopicOutputWithContext(ctx context.Context) DmsKafkaTopicOutput {
	return o
}

func (o DmsKafkaTopicOutput) AgingTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.IntOutput { return v.AgingTime }).(pulumi.IntOutput)
}

func (o DmsKafkaTopicOutput) Configs() DmsKafkaTopicConfigArrayOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) DmsKafkaTopicConfigArrayOutput { return v.Configs }).(DmsKafkaTopicConfigArrayOutput)
}

func (o DmsKafkaTopicOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DmsKafkaTopicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DmsKafkaTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DmsKafkaTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DmsKafkaTopicOutput) NewPartitionBrokers() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.IntArrayOutput { return v.NewPartitionBrokers }).(pulumi.IntArrayOutput)
}

func (o DmsKafkaTopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

func (o DmsKafkaTopicOutput) PoliciesOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.BoolOutput { return v.PoliciesOnly }).(pulumi.BoolOutput)
}

func (o DmsKafkaTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DmsKafkaTopicOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

func (o DmsKafkaTopicOutput) SyncFlushing() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.BoolOutput { return v.SyncFlushing }).(pulumi.BoolOutput)
}

func (o DmsKafkaTopicOutput) SyncReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.BoolOutput { return v.SyncReplication }).(pulumi.BoolOutput)
}

func (o DmsKafkaTopicOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaTopic) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DmsKafkaTopicArrayOutput struct{ *pulumi.OutputState }

func (DmsKafkaTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaTopic)(nil)).Elem()
}

func (o DmsKafkaTopicArrayOutput) ToDmsKafkaTopicArrayOutput() DmsKafkaTopicArrayOutput {
	return o
}

func (o DmsKafkaTopicArrayOutput) ToDmsKafkaTopicArrayOutputWithContext(ctx context.Context) DmsKafkaTopicArrayOutput {
	return o
}

func (o DmsKafkaTopicArrayOutput) Index(i pulumi.IntInput) DmsKafkaTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsKafkaTopic {
		return vs[0].([]*DmsKafkaTopic)[vs[1].(int)]
	}).(DmsKafkaTopicOutput)
}

type DmsKafkaTopicMapOutput struct{ *pulumi.OutputState }

func (DmsKafkaTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaTopic)(nil)).Elem()
}

func (o DmsKafkaTopicMapOutput) ToDmsKafkaTopicMapOutput() DmsKafkaTopicMapOutput {
	return o
}

func (o DmsKafkaTopicMapOutput) ToDmsKafkaTopicMapOutputWithContext(ctx context.Context) DmsKafkaTopicMapOutput {
	return o
}

func (o DmsKafkaTopicMapOutput) MapIndex(k pulumi.StringInput) DmsKafkaTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsKafkaTopic {
		return vs[0].(map[string]*DmsKafkaTopic)[vs[1].(string)]
	}).(DmsKafkaTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaTopicInput)(nil)).Elem(), &DmsKafkaTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaTopicArrayInput)(nil)).Elem(), DmsKafkaTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaTopicMapInput)(nil)).Elem(), DmsKafkaTopicMap{})
	pulumi.RegisterOutputType(DmsKafkaTopicOutput{})
	pulumi.RegisterOutputType(DmsKafkaTopicArrayOutput{})
	pulumi.RegisterOutputType(DmsKafkaTopicMapOutput{})
}
