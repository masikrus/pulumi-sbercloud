// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsPgSqlLimit struct {
	pulumi.CustomResourceState

	// Specifies the name of the database.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Indicates whether the SQL limit is effective.
	IsEffective pulumi.BoolOutput `pulumi:"isEffective"`
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency pulumi.IntOutput `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.IntOutput `pulumi:"maxWaiting"`
	// Specifies the query ID
	QueryId pulumi.StringPtrOutput `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrOutput `pulumi:"queryString"`
	Region      pulumi.StringOutput    `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrOutput `pulumi:"searchPath"`
	// Indicates the ID of SQL limit.
	SqlLimitId pulumi.StringOutput `pulumi:"sqlLimitId"`
	// Specifies the SQL limit switch.
	Switch pulumi.StringOutput `pulumi:"switch"`
}

// NewRdsPgSqlLimit registers a new resource with the given unique name, arguments, and options.
func NewRdsPgSqlLimit(ctx *pulumi.Context,
	name string, args *RdsPgSqlLimitArgs, opts ...pulumi.ResourceOption) (*RdsPgSqlLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MaxConcurrency == nil {
		return nil, errors.New("invalid value for required argument 'MaxConcurrency'")
	}
	if args.MaxWaiting == nil {
		return nil, errors.New("invalid value for required argument 'MaxWaiting'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsPgSqlLimit
	err := ctx.RegisterResource("sbercloud:index/rdsPgSqlLimit:RdsPgSqlLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsPgSqlLimit gets an existing RdsPgSqlLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsPgSqlLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsPgSqlLimitState, opts ...pulumi.ResourceOption) (*RdsPgSqlLimit, error) {
	var resource RdsPgSqlLimit
	err := ctx.ReadResource("sbercloud:index/rdsPgSqlLimit:RdsPgSqlLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsPgSqlLimit resources.
type rdsPgSqlLimitState struct {
	// Specifies the name of the database.
	DbName *string `pulumi:"dbName"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// Indicates whether the SQL limit is effective.
	IsEffective *bool `pulumi:"isEffective"`
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting *int `pulumi:"maxWaiting"`
	// Specifies the query ID
	QueryId *string `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString *string `pulumi:"queryString"`
	Region      *string `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `pulumi:"searchPath"`
	// Indicates the ID of SQL limit.
	SqlLimitId *string `pulumi:"sqlLimitId"`
	// Specifies the SQL limit switch.
	Switch *string `pulumi:"switch"`
}

type RdsPgSqlLimitState struct {
	// Specifies the name of the database.
	DbName pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput
	// Indicates whether the SQL limit is effective.
	IsEffective pulumi.BoolPtrInput
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency pulumi.IntPtrInput
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.IntPtrInput
	// Specifies the query ID
	QueryId pulumi.StringPtrInput
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrInput
	// Indicates the ID of SQL limit.
	SqlLimitId pulumi.StringPtrInput
	// Specifies the SQL limit switch.
	Switch pulumi.StringPtrInput
}

func (RdsPgSqlLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgSqlLimitState)(nil)).Elem()
}

type rdsPgSqlLimitArgs struct {
	// Specifies the name of the database.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting int `pulumi:"maxWaiting"`
	// Specifies the query ID
	QueryId *string `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString *string `pulumi:"queryString"`
	Region      *string `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `pulumi:"searchPath"`
	// Specifies the SQL limit switch.
	Switch *string `pulumi:"switch"`
}

// The set of arguments for constructing a RdsPgSqlLimit resource.
type RdsPgSqlLimitArgs struct {
	// Specifies the name of the database.
	DbName pulumi.StringInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency pulumi.IntInput
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.IntInput
	// Specifies the query ID
	QueryId pulumi.StringPtrInput
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrInput
	// Specifies the SQL limit switch.
	Switch pulumi.StringPtrInput
}

func (RdsPgSqlLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgSqlLimitArgs)(nil)).Elem()
}

type RdsPgSqlLimitInput interface {
	pulumi.Input

	ToRdsPgSqlLimitOutput() RdsPgSqlLimitOutput
	ToRdsPgSqlLimitOutputWithContext(ctx context.Context) RdsPgSqlLimitOutput
}

func (*RdsPgSqlLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgSqlLimit)(nil)).Elem()
}

func (i *RdsPgSqlLimit) ToRdsPgSqlLimitOutput() RdsPgSqlLimitOutput {
	return i.ToRdsPgSqlLimitOutputWithContext(context.Background())
}

func (i *RdsPgSqlLimit) ToRdsPgSqlLimitOutputWithContext(ctx context.Context) RdsPgSqlLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgSqlLimitOutput)
}

// RdsPgSqlLimitArrayInput is an input type that accepts RdsPgSqlLimitArray and RdsPgSqlLimitArrayOutput values.
// You can construct a concrete instance of `RdsPgSqlLimitArrayInput` via:
//
//	RdsPgSqlLimitArray{ RdsPgSqlLimitArgs{...} }
type RdsPgSqlLimitArrayInput interface {
	pulumi.Input

	ToRdsPgSqlLimitArrayOutput() RdsPgSqlLimitArrayOutput
	ToRdsPgSqlLimitArrayOutputWithContext(context.Context) RdsPgSqlLimitArrayOutput
}

type RdsPgSqlLimitArray []RdsPgSqlLimitInput

func (RdsPgSqlLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgSqlLimit)(nil)).Elem()
}

func (i RdsPgSqlLimitArray) ToRdsPgSqlLimitArrayOutput() RdsPgSqlLimitArrayOutput {
	return i.ToRdsPgSqlLimitArrayOutputWithContext(context.Background())
}

func (i RdsPgSqlLimitArray) ToRdsPgSqlLimitArrayOutputWithContext(ctx context.Context) RdsPgSqlLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgSqlLimitArrayOutput)
}

// RdsPgSqlLimitMapInput is an input type that accepts RdsPgSqlLimitMap and RdsPgSqlLimitMapOutput values.
// You can construct a concrete instance of `RdsPgSqlLimitMapInput` via:
//
//	RdsPgSqlLimitMap{ "key": RdsPgSqlLimitArgs{...} }
type RdsPgSqlLimitMapInput interface {
	pulumi.Input

	ToRdsPgSqlLimitMapOutput() RdsPgSqlLimitMapOutput
	ToRdsPgSqlLimitMapOutputWithContext(context.Context) RdsPgSqlLimitMapOutput
}

type RdsPgSqlLimitMap map[string]RdsPgSqlLimitInput

func (RdsPgSqlLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgSqlLimit)(nil)).Elem()
}

func (i RdsPgSqlLimitMap) ToRdsPgSqlLimitMapOutput() RdsPgSqlLimitMapOutput {
	return i.ToRdsPgSqlLimitMapOutputWithContext(context.Background())
}

func (i RdsPgSqlLimitMap) ToRdsPgSqlLimitMapOutputWithContext(ctx context.Context) RdsPgSqlLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgSqlLimitMapOutput)
}

type RdsPgSqlLimitOutput struct{ *pulumi.OutputState }

func (RdsPgSqlLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgSqlLimit)(nil)).Elem()
}

func (o RdsPgSqlLimitOutput) ToRdsPgSqlLimitOutput() RdsPgSqlLimitOutput {
	return o
}

func (o RdsPgSqlLimitOutput) ToRdsPgSqlLimitOutputWithContext(ctx context.Context) RdsPgSqlLimitOutput {
	return o
}

// Specifies the name of the database.
func (o RdsPgSqlLimitOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS PostgreSQL instance.
func (o RdsPgSqlLimitOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates whether the SQL limit is effective.
func (o RdsPgSqlLimitOutput) IsEffective() pulumi.BoolOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.BoolOutput { return v.IsEffective }).(pulumi.BoolOutput)
}

// Specifies the number of SQL statements executed simultaneously
func (o RdsPgSqlLimitOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.IntOutput { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Specifies the max waiting time in seconds.
func (o RdsPgSqlLimitOutput) MaxWaiting() pulumi.IntOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.IntOutput { return v.MaxWaiting }).(pulumi.IntOutput)
}

// Specifies the query ID
func (o RdsPgSqlLimitOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringPtrOutput { return v.QueryId }).(pulumi.StringPtrOutput)
}

// Specifies the text form of SQL statement.
func (o RdsPgSqlLimitOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringPtrOutput { return v.QueryString }).(pulumi.StringPtrOutput)
}

func (o RdsPgSqlLimitOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the query order for names that are not schema qualified.
func (o RdsPgSqlLimitOutput) SearchPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringPtrOutput { return v.SearchPath }).(pulumi.StringPtrOutput)
}

// Indicates the ID of SQL limit.
func (o RdsPgSqlLimitOutput) SqlLimitId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringOutput { return v.SqlLimitId }).(pulumi.StringOutput)
}

// Specifies the SQL limit switch.
func (o RdsPgSqlLimitOutput) Switch() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgSqlLimit) pulumi.StringOutput { return v.Switch }).(pulumi.StringOutput)
}

type RdsPgSqlLimitArrayOutput struct{ *pulumi.OutputState }

func (RdsPgSqlLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgSqlLimit)(nil)).Elem()
}

func (o RdsPgSqlLimitArrayOutput) ToRdsPgSqlLimitArrayOutput() RdsPgSqlLimitArrayOutput {
	return o
}

func (o RdsPgSqlLimitArrayOutput) ToRdsPgSqlLimitArrayOutputWithContext(ctx context.Context) RdsPgSqlLimitArrayOutput {
	return o
}

func (o RdsPgSqlLimitArrayOutput) Index(i pulumi.IntInput) RdsPgSqlLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsPgSqlLimit {
		return vs[0].([]*RdsPgSqlLimit)[vs[1].(int)]
	}).(RdsPgSqlLimitOutput)
}

type RdsPgSqlLimitMapOutput struct{ *pulumi.OutputState }

func (RdsPgSqlLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgSqlLimit)(nil)).Elem()
}

func (o RdsPgSqlLimitMapOutput) ToRdsPgSqlLimitMapOutput() RdsPgSqlLimitMapOutput {
	return o
}

func (o RdsPgSqlLimitMapOutput) ToRdsPgSqlLimitMapOutputWithContext(ctx context.Context) RdsPgSqlLimitMapOutput {
	return o
}

func (o RdsPgSqlLimitMapOutput) MapIndex(k pulumi.StringInput) RdsPgSqlLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsPgSqlLimit {
		return vs[0].(map[string]*RdsPgSqlLimit)[vs[1].(string)]
	}).(RdsPgSqlLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgSqlLimitInput)(nil)).Elem(), &RdsPgSqlLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgSqlLimitArrayInput)(nil)).Elem(), RdsPgSqlLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgSqlLimitMapInput)(nil)).Elem(), RdsPgSqlLimitMap{})
	pulumi.RegisterOutputType(RdsPgSqlLimitOutput{})
	pulumi.RegisterOutputType(RdsPgSqlLimitArrayOutput{})
	pulumi.RegisterOutputType(RdsPgSqlLimitMapOutput{})
}
