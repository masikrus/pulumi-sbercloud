// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NatDnatRule struct {
	pulumi.CustomResourceState

	// The creation time of the DNAT rule.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the DNAT rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort pulumi.IntPtrOutput `pulumi:"externalServicePort"`
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange pulumi.StringPtrOutput `pulumi:"externalServicePortRange"`
	// The floating IP address of the DNAT rule.
	FloatingIpAddress pulumi.StringOutput `pulumi:"floatingIpAddress"`
	// The ID of the floating IP address.
	FloatingIpId pulumi.StringPtrOutput `pulumi:"floatingIpId"`
	// The global EIP address connected by the DNAT rule.
	GlobalEipAddress pulumi.StringOutput `pulumi:"globalEipAddress"`
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId pulumi.StringPtrOutput `pulumi:"globalEipId"`
	// The port used by Floating IP provide services for external systems.
	InternalServicePort pulumi.IntPtrOutput `pulumi:"internalServicePort"`
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange pulumi.StringPtrOutput `pulumi:"internalServicePortRange"`
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// The port ID of network.
	PortId pulumi.StringOutput `pulumi:"portId"`
	// The private IP address of a user.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The protocol type.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region where the DNAT rule is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the DNAT rule.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewNatDnatRule registers a new resource with the given unique name, arguments, and options.
func NewNatDnatRule(ctx *pulumi.Context,
	name string, args *NatDnatRuleArgs, opts ...pulumi.ResourceOption) (*NatDnatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatDnatRule
	err := ctx.RegisterResource("sbercloud:index/natDnatRule:NatDnatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatDnatRule gets an existing NatDnatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatDnatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatDnatRuleState, opts ...pulumi.ResourceOption) (*NatDnatRule, error) {
	var resource NatDnatRule
	err := ctx.ReadResource("sbercloud:index/natDnatRule:NatDnatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatDnatRule resources.
type natDnatRuleState struct {
	// The creation time of the DNAT rule.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the DNAT rule.
	Description *string `pulumi:"description"`
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort *int `pulumi:"externalServicePort"`
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange *string `pulumi:"externalServicePortRange"`
	// The floating IP address of the DNAT rule.
	FloatingIpAddress *string `pulumi:"floatingIpAddress"`
	// The ID of the floating IP address.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The global EIP address connected by the DNAT rule.
	GlobalEipAddress *string `pulumi:"globalEipAddress"`
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// The port used by Floating IP provide services for external systems.
	InternalServicePort *int `pulumi:"internalServicePort"`
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange *string `pulumi:"internalServicePortRange"`
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The port ID of network.
	PortId *string `pulumi:"portId"`
	// The private IP address of a user.
	PrivateIp *string `pulumi:"privateIp"`
	// The protocol type.
	Protocol *string `pulumi:"protocol"`
	// The region where the DNAT rule is located.
	Region *string `pulumi:"region"`
	// The current status of the DNAT rule.
	Status *string `pulumi:"status"`
}

type NatDnatRuleState struct {
	// The creation time of the DNAT rule.
	CreatedAt pulumi.StringPtrInput
	// The description of the DNAT rule.
	Description pulumi.StringPtrInput
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort pulumi.IntPtrInput
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange pulumi.StringPtrInput
	// The floating IP address of the DNAT rule.
	FloatingIpAddress pulumi.StringPtrInput
	// The ID of the floating IP address.
	FloatingIpId pulumi.StringPtrInput
	// The global EIP address connected by the DNAT rule.
	GlobalEipAddress pulumi.StringPtrInput
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// The port used by Floating IP provide services for external systems.
	InternalServicePort pulumi.IntPtrInput
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange pulumi.StringPtrInput
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId pulumi.StringPtrInput
	// The port ID of network.
	PortId pulumi.StringPtrInput
	// The private IP address of a user.
	PrivateIp pulumi.StringPtrInput
	// The protocol type.
	Protocol pulumi.StringPtrInput
	// The region where the DNAT rule is located.
	Region pulumi.StringPtrInput
	// The current status of the DNAT rule.
	Status pulumi.StringPtrInput
}

func (NatDnatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*natDnatRuleState)(nil)).Elem()
}

type natDnatRuleArgs struct {
	// The description of the DNAT rule.
	Description *string `pulumi:"description"`
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort *int `pulumi:"externalServicePort"`
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange *string `pulumi:"externalServicePortRange"`
	// The ID of the floating IP address.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// The port used by Floating IP provide services for external systems.
	InternalServicePort *int `pulumi:"internalServicePort"`
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange *string `pulumi:"internalServicePortRange"`
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The port ID of network.
	PortId *string `pulumi:"portId"`
	// The private IP address of a user.
	PrivateIp *string `pulumi:"privateIp"`
	// The protocol type.
	Protocol string `pulumi:"protocol"`
	// The region where the DNAT rule is located.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NatDnatRule resource.
type NatDnatRuleArgs struct {
	// The description of the DNAT rule.
	Description pulumi.StringPtrInput
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort pulumi.IntPtrInput
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange pulumi.StringPtrInput
	// The ID of the floating IP address.
	FloatingIpId pulumi.StringPtrInput
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// The port used by Floating IP provide services for external systems.
	InternalServicePort pulumi.IntPtrInput
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange pulumi.StringPtrInput
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId pulumi.StringInput
	// The port ID of network.
	PortId pulumi.StringPtrInput
	// The private IP address of a user.
	PrivateIp pulumi.StringPtrInput
	// The protocol type.
	Protocol pulumi.StringInput
	// The region where the DNAT rule is located.
	Region pulumi.StringPtrInput
}

func (NatDnatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natDnatRuleArgs)(nil)).Elem()
}

type NatDnatRuleInput interface {
	pulumi.Input

	ToNatDnatRuleOutput() NatDnatRuleOutput
	ToNatDnatRuleOutputWithContext(ctx context.Context) NatDnatRuleOutput
}

func (*NatDnatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NatDnatRule)(nil)).Elem()
}

func (i *NatDnatRule) ToNatDnatRuleOutput() NatDnatRuleOutput {
	return i.ToNatDnatRuleOutputWithContext(context.Background())
}

func (i *NatDnatRule) ToNatDnatRuleOutputWithContext(ctx context.Context) NatDnatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatDnatRuleOutput)
}

// NatDnatRuleArrayInput is an input type that accepts NatDnatRuleArray and NatDnatRuleArrayOutput values.
// You can construct a concrete instance of `NatDnatRuleArrayInput` via:
//
//	NatDnatRuleArray{ NatDnatRuleArgs{...} }
type NatDnatRuleArrayInput interface {
	pulumi.Input

	ToNatDnatRuleArrayOutput() NatDnatRuleArrayOutput
	ToNatDnatRuleArrayOutputWithContext(context.Context) NatDnatRuleArrayOutput
}

type NatDnatRuleArray []NatDnatRuleInput

func (NatDnatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatDnatRule)(nil)).Elem()
}

func (i NatDnatRuleArray) ToNatDnatRuleArrayOutput() NatDnatRuleArrayOutput {
	return i.ToNatDnatRuleArrayOutputWithContext(context.Background())
}

func (i NatDnatRuleArray) ToNatDnatRuleArrayOutputWithContext(ctx context.Context) NatDnatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatDnatRuleArrayOutput)
}

// NatDnatRuleMapInput is an input type that accepts NatDnatRuleMap and NatDnatRuleMapOutput values.
// You can construct a concrete instance of `NatDnatRuleMapInput` via:
//
//	NatDnatRuleMap{ "key": NatDnatRuleArgs{...} }
type NatDnatRuleMapInput interface {
	pulumi.Input

	ToNatDnatRuleMapOutput() NatDnatRuleMapOutput
	ToNatDnatRuleMapOutputWithContext(context.Context) NatDnatRuleMapOutput
}

type NatDnatRuleMap map[string]NatDnatRuleInput

func (NatDnatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatDnatRule)(nil)).Elem()
}

func (i NatDnatRuleMap) ToNatDnatRuleMapOutput() NatDnatRuleMapOutput {
	return i.ToNatDnatRuleMapOutputWithContext(context.Background())
}

func (i NatDnatRuleMap) ToNatDnatRuleMapOutputWithContext(ctx context.Context) NatDnatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatDnatRuleMapOutput)
}

type NatDnatRuleOutput struct{ *pulumi.OutputState }

func (NatDnatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatDnatRule)(nil)).Elem()
}

func (o NatDnatRuleOutput) ToNatDnatRuleOutput() NatDnatRuleOutput {
	return o
}

func (o NatDnatRuleOutput) ToNatDnatRuleOutputWithContext(ctx context.Context) NatDnatRuleOutput {
	return o
}

// The creation time of the DNAT rule.
func (o NatDnatRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the DNAT rule.
func (o NatDnatRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The port range used by Floating IP provide services for external systems.
func (o NatDnatRuleOutput) ExternalServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.IntPtrOutput { return v.ExternalServicePort }).(pulumi.IntPtrOutput)
}

// The port range used by ECSs or BMSs to provide services for external systems.
func (o NatDnatRuleOutput) ExternalServicePortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringPtrOutput { return v.ExternalServicePortRange }).(pulumi.StringPtrOutput)
}

// The floating IP address of the DNAT rule.
func (o NatDnatRuleOutput) FloatingIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.FloatingIpAddress }).(pulumi.StringOutput)
}

// The ID of the floating IP address.
func (o NatDnatRuleOutput) FloatingIpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringPtrOutput { return v.FloatingIpId }).(pulumi.StringPtrOutput)
}

// The global EIP address connected by the DNAT rule.
func (o NatDnatRuleOutput) GlobalEipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.GlobalEipAddress }).(pulumi.StringOutput)
}

// The ID of the global EIP connected by the DNAT rule.
func (o NatDnatRuleOutput) GlobalEipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringPtrOutput { return v.GlobalEipId }).(pulumi.StringPtrOutput)
}

// The port used by Floating IP provide services for external systems.
func (o NatDnatRuleOutput) InternalServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.IntPtrOutput { return v.InternalServicePort }).(pulumi.IntPtrOutput)
}

// The port used by ECSs or BMSs to provide services for external systems.
func (o NatDnatRuleOutput) InternalServicePortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringPtrOutput { return v.InternalServicePortRange }).(pulumi.StringPtrOutput)
}

// The ID of the NAT gateway to which the DNAT rule belongs.
func (o NatDnatRuleOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The port ID of network.
func (o NatDnatRuleOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// The private IP address of a user.
func (o NatDnatRuleOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// The protocol type.
func (o NatDnatRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region where the DNAT rule is located.
func (o NatDnatRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The current status of the DNAT rule.
func (o NatDnatRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NatDnatRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type NatDnatRuleArrayOutput struct{ *pulumi.OutputState }

func (NatDnatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatDnatRule)(nil)).Elem()
}

func (o NatDnatRuleArrayOutput) ToNatDnatRuleArrayOutput() NatDnatRuleArrayOutput {
	return o
}

func (o NatDnatRuleArrayOutput) ToNatDnatRuleArrayOutputWithContext(ctx context.Context) NatDnatRuleArrayOutput {
	return o
}

func (o NatDnatRuleArrayOutput) Index(i pulumi.IntInput) NatDnatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatDnatRule {
		return vs[0].([]*NatDnatRule)[vs[1].(int)]
	}).(NatDnatRuleOutput)
}

type NatDnatRuleMapOutput struct{ *pulumi.OutputState }

func (NatDnatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatDnatRule)(nil)).Elem()
}

func (o NatDnatRuleMapOutput) ToNatDnatRuleMapOutput() NatDnatRuleMapOutput {
	return o
}

func (o NatDnatRuleMapOutput) ToNatDnatRuleMapOutputWithContext(ctx context.Context) NatDnatRuleMapOutput {
	return o
}

func (o NatDnatRuleMapOutput) MapIndex(k pulumi.StringInput) NatDnatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatDnatRule {
		return vs[0].(map[string]*NatDnatRule)[vs[1].(string)]
	}).(NatDnatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatDnatRuleInput)(nil)).Elem(), &NatDnatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatDnatRuleArrayInput)(nil)).Elem(), NatDnatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatDnatRuleMapInput)(nil)).Elem(), NatDnatRuleMap{})
	pulumi.RegisterOutputType(NatDnatRuleOutput{})
	pulumi.RegisterOutputType(NatDnatRuleArrayOutput{})
	pulumi.RegisterOutputType(NatDnatRuleMapOutput{})
}
