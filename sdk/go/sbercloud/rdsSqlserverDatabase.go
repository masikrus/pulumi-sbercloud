// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsSqlserverDatabase struct {
	pulumi.CustomResourceState

	// Indicates the character set used by the database.
	CharacterSet pulumi.StringOutput `pulumi:"characterSet"`
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the database name.
	Name   pulumi.StringOutput `pulumi:"name"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the database status.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewRdsSqlserverDatabase registers a new resource with the given unique name, arguments, and options.
func NewRdsSqlserverDatabase(ctx *pulumi.Context,
	name string, args *RdsSqlserverDatabaseArgs, opts ...pulumi.ResourceOption) (*RdsSqlserverDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsSqlserverDatabase
	err := ctx.RegisterResource("sbercloud:index/rdsSqlserverDatabase:RdsSqlserverDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsSqlserverDatabase gets an existing RdsSqlserverDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsSqlserverDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsSqlserverDatabaseState, opts ...pulumi.ResourceOption) (*RdsSqlserverDatabase, error) {
	var resource RdsSqlserverDatabase
	err := ctx.ReadResource("sbercloud:index/rdsSqlserverDatabase:RdsSqlserverDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsSqlserverDatabase resources.
type rdsSqlserverDatabaseState struct {
	// Indicates the character set used by the database.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the database name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Indicates the database status.
	State *string `pulumi:"state"`
}

type RdsSqlserverDatabaseState struct {
	// Indicates the character set used by the database.
	CharacterSet pulumi.StringPtrInput
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the database name.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Indicates the database status.
	State pulumi.StringPtrInput
}

func (RdsSqlserverDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlserverDatabaseState)(nil)).Elem()
}

type rdsSqlserverDatabaseArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the database name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RdsSqlserverDatabase resource.
type RdsSqlserverDatabaseArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringInput
	// Specifies the database name.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
}

func (RdsSqlserverDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlserverDatabaseArgs)(nil)).Elem()
}

type RdsSqlserverDatabaseInput interface {
	pulumi.Input

	ToRdsSqlserverDatabaseOutput() RdsSqlserverDatabaseOutput
	ToRdsSqlserverDatabaseOutputWithContext(ctx context.Context) RdsSqlserverDatabaseOutput
}

func (*RdsSqlserverDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlserverDatabase)(nil)).Elem()
}

func (i *RdsSqlserverDatabase) ToRdsSqlserverDatabaseOutput() RdsSqlserverDatabaseOutput {
	return i.ToRdsSqlserverDatabaseOutputWithContext(context.Background())
}

func (i *RdsSqlserverDatabase) ToRdsSqlserverDatabaseOutputWithContext(ctx context.Context) RdsSqlserverDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverDatabaseOutput)
}

// RdsSqlserverDatabaseArrayInput is an input type that accepts RdsSqlserverDatabaseArray and RdsSqlserverDatabaseArrayOutput values.
// You can construct a concrete instance of `RdsSqlserverDatabaseArrayInput` via:
//
//	RdsSqlserverDatabaseArray{ RdsSqlserverDatabaseArgs{...} }
type RdsSqlserverDatabaseArrayInput interface {
	pulumi.Input

	ToRdsSqlserverDatabaseArrayOutput() RdsSqlserverDatabaseArrayOutput
	ToRdsSqlserverDatabaseArrayOutputWithContext(context.Context) RdsSqlserverDatabaseArrayOutput
}

type RdsSqlserverDatabaseArray []RdsSqlserverDatabaseInput

func (RdsSqlserverDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlserverDatabase)(nil)).Elem()
}

func (i RdsSqlserverDatabaseArray) ToRdsSqlserverDatabaseArrayOutput() RdsSqlserverDatabaseArrayOutput {
	return i.ToRdsSqlserverDatabaseArrayOutputWithContext(context.Background())
}

func (i RdsSqlserverDatabaseArray) ToRdsSqlserverDatabaseArrayOutputWithContext(ctx context.Context) RdsSqlserverDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverDatabaseArrayOutput)
}

// RdsSqlserverDatabaseMapInput is an input type that accepts RdsSqlserverDatabaseMap and RdsSqlserverDatabaseMapOutput values.
// You can construct a concrete instance of `RdsSqlserverDatabaseMapInput` via:
//
//	RdsSqlserverDatabaseMap{ "key": RdsSqlserverDatabaseArgs{...} }
type RdsSqlserverDatabaseMapInput interface {
	pulumi.Input

	ToRdsSqlserverDatabaseMapOutput() RdsSqlserverDatabaseMapOutput
	ToRdsSqlserverDatabaseMapOutputWithContext(context.Context) RdsSqlserverDatabaseMapOutput
}

type RdsSqlserverDatabaseMap map[string]RdsSqlserverDatabaseInput

func (RdsSqlserverDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlserverDatabase)(nil)).Elem()
}

func (i RdsSqlserverDatabaseMap) ToRdsSqlserverDatabaseMapOutput() RdsSqlserverDatabaseMapOutput {
	return i.ToRdsSqlserverDatabaseMapOutputWithContext(context.Background())
}

func (i RdsSqlserverDatabaseMap) ToRdsSqlserverDatabaseMapOutputWithContext(ctx context.Context) RdsSqlserverDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverDatabaseMapOutput)
}

type RdsSqlserverDatabaseOutput struct{ *pulumi.OutputState }

func (RdsSqlserverDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlserverDatabase)(nil)).Elem()
}

func (o RdsSqlserverDatabaseOutput) ToRdsSqlserverDatabaseOutput() RdsSqlserverDatabaseOutput {
	return o
}

func (o RdsSqlserverDatabaseOutput) ToRdsSqlserverDatabaseOutputWithContext(ctx context.Context) RdsSqlserverDatabaseOutput {
	return o
}

// Indicates the character set used by the database.
func (o RdsSqlserverDatabaseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabase) pulumi.StringOutput { return v.CharacterSet }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS SQLServer instance.
func (o RdsSqlserverDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the database name.
func (o RdsSqlserverDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RdsSqlserverDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the database status.
func (o RdsSqlserverDatabaseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverDatabase) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RdsSqlserverDatabaseArrayOutput struct{ *pulumi.OutputState }

func (RdsSqlserverDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlserverDatabase)(nil)).Elem()
}

func (o RdsSqlserverDatabaseArrayOutput) ToRdsSqlserverDatabaseArrayOutput() RdsSqlserverDatabaseArrayOutput {
	return o
}

func (o RdsSqlserverDatabaseArrayOutput) ToRdsSqlserverDatabaseArrayOutputWithContext(ctx context.Context) RdsSqlserverDatabaseArrayOutput {
	return o
}

func (o RdsSqlserverDatabaseArrayOutput) Index(i pulumi.IntInput) RdsSqlserverDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsSqlserverDatabase {
		return vs[0].([]*RdsSqlserverDatabase)[vs[1].(int)]
	}).(RdsSqlserverDatabaseOutput)
}

type RdsSqlserverDatabaseMapOutput struct{ *pulumi.OutputState }

func (RdsSqlserverDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlserverDatabase)(nil)).Elem()
}

func (o RdsSqlserverDatabaseMapOutput) ToRdsSqlserverDatabaseMapOutput() RdsSqlserverDatabaseMapOutput {
	return o
}

func (o RdsSqlserverDatabaseMapOutput) ToRdsSqlserverDatabaseMapOutputWithContext(ctx context.Context) RdsSqlserverDatabaseMapOutput {
	return o
}

func (o RdsSqlserverDatabaseMapOutput) MapIndex(k pulumi.StringInput) RdsSqlserverDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsSqlserverDatabase {
		return vs[0].(map[string]*RdsSqlserverDatabase)[vs[1].(string)]
	}).(RdsSqlserverDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverDatabaseInput)(nil)).Elem(), &RdsSqlserverDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverDatabaseArrayInput)(nil)).Elem(), RdsSqlserverDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverDatabaseMapInput)(nil)).Elem(), RdsSqlserverDatabaseMap{})
	pulumi.RegisterOutputType(RdsSqlserverDatabaseOutput{})
	pulumi.RegisterOutputType(RdsSqlserverDatabaseArrayOutput{})
	pulumi.RegisterOutputType(RdsSqlserverDatabaseMapOutput{})
}
