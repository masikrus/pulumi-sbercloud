// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupVpcSubnet(ctx *pulumi.Context, args *LookupVpcSubnetArgs, opts ...pulumi.InvokeOption) (*LookupVpcSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcSubnetResult
	err := ctx.Invoke("sbercloud:index/getVpcSubnet:getVpcSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcSubnet.
type LookupVpcSubnetArgs struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	Cidr             *string `pulumi:"cidr"`
	GatewayIp        *string `pulumi:"gatewayIp"`
	Id               *string `pulumi:"id"`
	Name             *string `pulumi:"name"`
	PrimaryDns       *string `pulumi:"primaryDns"`
	Region           *string `pulumi:"region"`
	SecondaryDns     *string `pulumi:"secondaryDns"`
	Status           *string `pulumi:"status"`
	VpcId            *string `pulumi:"vpcId"`
}

// A collection of values returned by getVpcSubnet.
type LookupVpcSubnetResult struct {
	AvailabilityZone string   `pulumi:"availabilityZone"`
	Cidr             string   `pulumi:"cidr"`
	Description      string   `pulumi:"description"`
	DhcpEnable       bool     `pulumi:"dhcpEnable"`
	DnsLists         []string `pulumi:"dnsLists"`
	GatewayIp        string   `pulumi:"gatewayIp"`
	Id               string   `pulumi:"id"`
	Ipv4SubnetId     string   `pulumi:"ipv4SubnetId"`
	Ipv6Cidr         string   `pulumi:"ipv6Cidr"`
	Ipv6Enable       bool     `pulumi:"ipv6Enable"`
	Ipv6Gateway      string   `pulumi:"ipv6Gateway"`
	Ipv6SubnetId     string   `pulumi:"ipv6SubnetId"`
	Name             string   `pulumi:"name"`
	PrimaryDns       string   `pulumi:"primaryDns"`
	Region           string   `pulumi:"region"`
	SecondaryDns     string   `pulumi:"secondaryDns"`
	Status           string   `pulumi:"status"`
	SubnetId         string   `pulumi:"subnetId"`
	VpcId            string   `pulumi:"vpcId"`
}

func LookupVpcSubnetOutput(ctx *pulumi.Context, args LookupVpcSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupVpcSubnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVpcSubnetResultOutput, error) {
			args := v.(LookupVpcSubnetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getVpcSubnet:getVpcSubnet", args, LookupVpcSubnetResultOutput{}, options).(LookupVpcSubnetResultOutput), nil
		}).(LookupVpcSubnetResultOutput)
}

// A collection of arguments for invoking getVpcSubnet.
type LookupVpcSubnetOutputArgs struct {
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	Cidr             pulumi.StringPtrInput `pulumi:"cidr"`
	GatewayIp        pulumi.StringPtrInput `pulumi:"gatewayIp"`
	Id               pulumi.StringPtrInput `pulumi:"id"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	PrimaryDns       pulumi.StringPtrInput `pulumi:"primaryDns"`
	Region           pulumi.StringPtrInput `pulumi:"region"`
	SecondaryDns     pulumi.StringPtrInput `pulumi:"secondaryDns"`
	Status           pulumi.StringPtrInput `pulumi:"status"`
	VpcId            pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupVpcSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getVpcSubnet.
type LookupVpcSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupVpcSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcSubnetResult)(nil)).Elem()
}

func (o LookupVpcSubnetResultOutput) ToLookupVpcSubnetResultOutput() LookupVpcSubnetResultOutput {
	return o
}

func (o LookupVpcSubnetResultOutput) ToLookupVpcSubnetResultOutputWithContext(ctx context.Context) LookupVpcSubnetResultOutput {
	return o
}

func (o LookupVpcSubnetResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Cidr }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) DhcpEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) bool { return v.DhcpEnable }).(pulumi.BoolOutput)
}

func (o LookupVpcSubnetResultOutput) DnsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) []string { return v.DnsLists }).(pulumi.StringArrayOutput)
}

func (o LookupVpcSubnetResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Ipv4SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Ipv4SubnetId }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Ipv6Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Ipv6Cidr }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o LookupVpcSubnetResultOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Ipv6SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Ipv6SubnetId }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) PrimaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.PrimaryDns }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) SecondaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.SecondaryDns }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupVpcSubnetResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcSubnetResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcSubnetResultOutput{})
}
