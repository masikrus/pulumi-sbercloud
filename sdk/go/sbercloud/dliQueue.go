// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DliQueue struct {
	pulumi.CustomResourceState

	CreateTime  pulumi.IntOutput    `pulumi:"createTime"`
	CuCount     pulumi.IntOutput    `pulumi:"cuCount"`
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName pulumi.StringOutput    `pulumi:"elasticResourcePoolName"`
	EnterpriseProjectId     pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	Feature                 pulumi.StringPtrOutput `pulumi:"feature"`
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr pulumi.StringPtrOutput `pulumi:"managementSubnetCidr"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Platform             pulumi.StringPtrOutput `pulumi:"platform"`
	QueueType            pulumi.StringPtrOutput `pulumi:"queueType"`
	Region               pulumi.StringOutput    `pulumi:"region"`
	// The queue resource mode.
	ResourceMode    pulumi.IntOutput                 `pulumi:"resourceMode"`
	ScalingPolicies DliQueueScalingPolicyArrayOutput `pulumi:"scalingPolicies"`
	SparkDriver     DliQueueSparkDriverPtrOutput     `pulumi:"sparkDriver"`
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr pulumi.StringPtrOutput `pulumi:"subnetCidr"`
	Tags       pulumi.StringMapOutput `pulumi:"tags"`
	// The CIDR block of the queue.
	VpcCidr pulumi.StringOutput `pulumi:"vpcCidr"`
}

// NewDliQueue registers a new resource with the given unique name, arguments, and options.
func NewDliQueue(ctx *pulumi.Context,
	name string, args *DliQueueArgs, opts ...pulumi.ResourceOption) (*DliQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CuCount == nil {
		return nil, errors.New("invalid value for required argument 'CuCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DliQueue
	err := ctx.RegisterResource("sbercloud:index/dliQueue:DliQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDliQueue gets an existing DliQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDliQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DliQueueState, opts ...pulumi.ResourceOption) (*DliQueue, error) {
	var resource DliQueue
	err := ctx.ReadResource("sbercloud:index/dliQueue:DliQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DliQueue resources.
type dliQueueState struct {
	CreateTime  *int    `pulumi:"createTime"`
	CuCount     *int    `pulumi:"cuCount"`
	Description *string `pulumi:"description"`
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName *string `pulumi:"elasticResourcePoolName"`
	EnterpriseProjectId     *string `pulumi:"enterpriseProjectId"`
	Feature                 *string `pulumi:"feature"`
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr *string `pulumi:"managementSubnetCidr"`
	Name                 *string `pulumi:"name"`
	Platform             *string `pulumi:"platform"`
	QueueType            *string `pulumi:"queueType"`
	Region               *string `pulumi:"region"`
	// The queue resource mode.
	ResourceMode    *int                    `pulumi:"resourceMode"`
	ScalingPolicies []DliQueueScalingPolicy `pulumi:"scalingPolicies"`
	SparkDriver     *DliQueueSparkDriver    `pulumi:"sparkDriver"`
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr *string           `pulumi:"subnetCidr"`
	Tags       map[string]string `pulumi:"tags"`
	// The CIDR block of the queue.
	VpcCidr *string `pulumi:"vpcCidr"`
}

type DliQueueState struct {
	CreateTime  pulumi.IntPtrInput
	CuCount     pulumi.IntPtrInput
	Description pulumi.StringPtrInput
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName pulumi.StringPtrInput
	EnterpriseProjectId     pulumi.StringPtrInput
	Feature                 pulumi.StringPtrInput
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Platform             pulumi.StringPtrInput
	QueueType            pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	// The queue resource mode.
	ResourceMode    pulumi.IntPtrInput
	ScalingPolicies DliQueueScalingPolicyArrayInput
	SparkDriver     DliQueueSparkDriverPtrInput
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	// The CIDR block of the queue.
	VpcCidr pulumi.StringPtrInput
}

func (DliQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*dliQueueState)(nil)).Elem()
}

type dliQueueArgs struct {
	CuCount     int     `pulumi:"cuCount"`
	Description *string `pulumi:"description"`
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName *string `pulumi:"elasticResourcePoolName"`
	EnterpriseProjectId     *string `pulumi:"enterpriseProjectId"`
	Feature                 *string `pulumi:"feature"`
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr *string `pulumi:"managementSubnetCidr"`
	Name                 *string `pulumi:"name"`
	Platform             *string `pulumi:"platform"`
	QueueType            *string `pulumi:"queueType"`
	Region               *string `pulumi:"region"`
	// The queue resource mode.
	ResourceMode    *int                    `pulumi:"resourceMode"`
	ScalingPolicies []DliQueueScalingPolicy `pulumi:"scalingPolicies"`
	SparkDriver     *DliQueueSparkDriver    `pulumi:"sparkDriver"`
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr *string           `pulumi:"subnetCidr"`
	Tags       map[string]string `pulumi:"tags"`
	// The CIDR block of the queue.
	VpcCidr *string `pulumi:"vpcCidr"`
}

// The set of arguments for constructing a DliQueue resource.
type DliQueueArgs struct {
	CuCount     pulumi.IntInput
	Description pulumi.StringPtrInput
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName pulumi.StringPtrInput
	EnterpriseProjectId     pulumi.StringPtrInput
	Feature                 pulumi.StringPtrInput
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Platform             pulumi.StringPtrInput
	QueueType            pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	// The queue resource mode.
	ResourceMode    pulumi.IntPtrInput
	ScalingPolicies DliQueueScalingPolicyArrayInput
	SparkDriver     DliQueueSparkDriverPtrInput
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	// The CIDR block of the queue.
	VpcCidr pulumi.StringPtrInput
}

func (DliQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dliQueueArgs)(nil)).Elem()
}

type DliQueueInput interface {
	pulumi.Input

	ToDliQueueOutput() DliQueueOutput
	ToDliQueueOutputWithContext(ctx context.Context) DliQueueOutput
}

func (*DliQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**DliQueue)(nil)).Elem()
}

func (i *DliQueue) ToDliQueueOutput() DliQueueOutput {
	return i.ToDliQueueOutputWithContext(context.Background())
}

func (i *DliQueue) ToDliQueueOutputWithContext(ctx context.Context) DliQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliQueueOutput)
}

// DliQueueArrayInput is an input type that accepts DliQueueArray and DliQueueArrayOutput values.
// You can construct a concrete instance of `DliQueueArrayInput` via:
//
//	DliQueueArray{ DliQueueArgs{...} }
type DliQueueArrayInput interface {
	pulumi.Input

	ToDliQueueArrayOutput() DliQueueArrayOutput
	ToDliQueueArrayOutputWithContext(context.Context) DliQueueArrayOutput
}

type DliQueueArray []DliQueueInput

func (DliQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DliQueue)(nil)).Elem()
}

func (i DliQueueArray) ToDliQueueArrayOutput() DliQueueArrayOutput {
	return i.ToDliQueueArrayOutputWithContext(context.Background())
}

func (i DliQueueArray) ToDliQueueArrayOutputWithContext(ctx context.Context) DliQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliQueueArrayOutput)
}

// DliQueueMapInput is an input type that accepts DliQueueMap and DliQueueMapOutput values.
// You can construct a concrete instance of `DliQueueMapInput` via:
//
//	DliQueueMap{ "key": DliQueueArgs{...} }
type DliQueueMapInput interface {
	pulumi.Input

	ToDliQueueMapOutput() DliQueueMapOutput
	ToDliQueueMapOutputWithContext(context.Context) DliQueueMapOutput
}

type DliQueueMap map[string]DliQueueInput

func (DliQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DliQueue)(nil)).Elem()
}

func (i DliQueueMap) ToDliQueueMapOutput() DliQueueMapOutput {
	return i.ToDliQueueMapOutputWithContext(context.Background())
}

func (i DliQueueMap) ToDliQueueMapOutputWithContext(ctx context.Context) DliQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliQueueMapOutput)
}

type DliQueueOutput struct{ *pulumi.OutputState }

func (DliQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DliQueue)(nil)).Elem()
}

func (o DliQueueOutput) ToDliQueueOutput() DliQueueOutput {
	return o
}

func (o DliQueueOutput) ToDliQueueOutputWithContext(ctx context.Context) DliQueueOutput {
	return o
}

func (o DliQueueOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

func (o DliQueueOutput) CuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.IntOutput { return v.CuCount }).(pulumi.IntOutput)
}

func (o DliQueueOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the elastic resource pool to which the queue belongs.
func (o DliQueueOutput) ElasticResourcePoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringOutput { return v.ElasticResourcePoolName }).(pulumi.StringOutput)
}

func (o DliQueueOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o DliQueueOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringPtrOutput { return v.Feature }).(pulumi.StringPtrOutput)
}

// Deprecated: management_subnet_cidr is Deprecated
func (o DliQueueOutput) ManagementSubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringPtrOutput { return v.ManagementSubnetCidr }).(pulumi.StringPtrOutput)
}

func (o DliQueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DliQueueOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringPtrOutput { return v.Platform }).(pulumi.StringPtrOutput)
}

func (o DliQueueOutput) QueueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringPtrOutput { return v.QueueType }).(pulumi.StringPtrOutput)
}

func (o DliQueueOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The queue resource mode.
func (o DliQueueOutput) ResourceMode() pulumi.IntOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.IntOutput { return v.ResourceMode }).(pulumi.IntOutput)
}

func (o DliQueueOutput) ScalingPolicies() DliQueueScalingPolicyArrayOutput {
	return o.ApplyT(func(v *DliQueue) DliQueueScalingPolicyArrayOutput { return v.ScalingPolicies }).(DliQueueScalingPolicyArrayOutput)
}

func (o DliQueueOutput) SparkDriver() DliQueueSparkDriverPtrOutput {
	return o.ApplyT(func(v *DliQueue) DliQueueSparkDriverPtrOutput { return v.SparkDriver }).(DliQueueSparkDriverPtrOutput)
}

// Deprecated: subnet_cidr is Deprecated
func (o DliQueueOutput) SubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringPtrOutput { return v.SubnetCidr }).(pulumi.StringPtrOutput)
}

func (o DliQueueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The CIDR block of the queue.
func (o DliQueueOutput) VpcCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *DliQueue) pulumi.StringOutput { return v.VpcCidr }).(pulumi.StringOutput)
}

type DliQueueArrayOutput struct{ *pulumi.OutputState }

func (DliQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DliQueue)(nil)).Elem()
}

func (o DliQueueArrayOutput) ToDliQueueArrayOutput() DliQueueArrayOutput {
	return o
}

func (o DliQueueArrayOutput) ToDliQueueArrayOutputWithContext(ctx context.Context) DliQueueArrayOutput {
	return o
}

func (o DliQueueArrayOutput) Index(i pulumi.IntInput) DliQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DliQueue {
		return vs[0].([]*DliQueue)[vs[1].(int)]
	}).(DliQueueOutput)
}

type DliQueueMapOutput struct{ *pulumi.OutputState }

func (DliQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DliQueue)(nil)).Elem()
}

func (o DliQueueMapOutput) ToDliQueueMapOutput() DliQueueMapOutput {
	return o
}

func (o DliQueueMapOutput) ToDliQueueMapOutputWithContext(ctx context.Context) DliQueueMapOutput {
	return o
}

func (o DliQueueMapOutput) MapIndex(k pulumi.StringInput) DliQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DliQueue {
		return vs[0].(map[string]*DliQueue)[vs[1].(string)]
	}).(DliQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DliQueueInput)(nil)).Elem(), &DliQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*DliQueueArrayInput)(nil)).Elem(), DliQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DliQueueMapInput)(nil)).Elem(), DliQueueMap{})
	pulumi.RegisterOutputType(DliQueueOutput{})
	pulumi.RegisterOutputType(DliQueueArrayOutput{})
	pulumi.RegisterOutputType(DliQueueMapOutput{})
}
