// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CbrPolicy struct {
	pulumi.CustomResourceState

	// The scheduling rule for the CBR policy backup execution.
	BackupCycle CbrPolicyBackupCycleOutput `pulumi:"backupCycle"`
	// The maximum number of retained backups.
	BackupQuantity pulumi.IntPtrOutput `pulumi:"backupQuantity"`
	// The ID of the replication destination project.
	DestinationProjectId pulumi.StringPtrOutput `pulumi:"destinationProjectId"`
	// The name of the replication destination region.
	DestinationRegion pulumi.StringPtrOutput `pulumi:"destinationRegion"`
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration pulumi.BoolPtrOutput `pulumi:"enableAcceleration"`
	// Whether to enable the CBR policy.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The long-term retention rules.
	LongTermRetention CbrPolicyLongTermRetentionPtrOutput `pulumi:"longTermRetention"`
	// The policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the policy is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The duration (in days) for retained backups.
	TimePeriod pulumi.IntPtrOutput `pulumi:"timePeriod"`
	// The UTC time zone.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// The protection type of the CBR policy.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCbrPolicy registers a new resource with the given unique name, arguments, and options.
func NewCbrPolicy(ctx *pulumi.Context,
	name string, args *CbrPolicyArgs, opts ...pulumi.ResourceOption) (*CbrPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupCycle == nil {
		return nil, errors.New("invalid value for required argument 'BackupCycle'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CbrPolicy
	err := ctx.RegisterResource("sbercloud:index/cbrPolicy:CbrPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCbrPolicy gets an existing CbrPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCbrPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CbrPolicyState, opts ...pulumi.ResourceOption) (*CbrPolicy, error) {
	var resource CbrPolicy
	err := ctx.ReadResource("sbercloud:index/cbrPolicy:CbrPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CbrPolicy resources.
type cbrPolicyState struct {
	// The scheduling rule for the CBR policy backup execution.
	BackupCycle *CbrPolicyBackupCycle `pulumi:"backupCycle"`
	// The maximum number of retained backups.
	BackupQuantity *int `pulumi:"backupQuantity"`
	// The ID of the replication destination project.
	DestinationProjectId *string `pulumi:"destinationProjectId"`
	// The name of the replication destination region.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// Whether to enable the CBR policy.
	Enabled *bool `pulumi:"enabled"`
	// The long-term retention rules.
	LongTermRetention *CbrPolicyLongTermRetention `pulumi:"longTermRetention"`
	// The policy name.
	Name *string `pulumi:"name"`
	// The region where the policy is located.
	Region *string `pulumi:"region"`
	// The duration (in days) for retained backups.
	TimePeriod *int `pulumi:"timePeriod"`
	// The UTC time zone.
	TimeZone *string `pulumi:"timeZone"`
	// The protection type of the CBR policy.
	Type *string `pulumi:"type"`
}

type CbrPolicyState struct {
	// The scheduling rule for the CBR policy backup execution.
	BackupCycle CbrPolicyBackupCyclePtrInput
	// The maximum number of retained backups.
	BackupQuantity pulumi.IntPtrInput
	// The ID of the replication destination project.
	DestinationProjectId pulumi.StringPtrInput
	// The name of the replication destination region.
	DestinationRegion pulumi.StringPtrInput
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration pulumi.BoolPtrInput
	// Whether to enable the CBR policy.
	Enabled pulumi.BoolPtrInput
	// The long-term retention rules.
	LongTermRetention CbrPolicyLongTermRetentionPtrInput
	// The policy name.
	Name pulumi.StringPtrInput
	// The region where the policy is located.
	Region pulumi.StringPtrInput
	// The duration (in days) for retained backups.
	TimePeriod pulumi.IntPtrInput
	// The UTC time zone.
	TimeZone pulumi.StringPtrInput
	// The protection type of the CBR policy.
	Type pulumi.StringPtrInput
}

func (CbrPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrPolicyState)(nil)).Elem()
}

type cbrPolicyArgs struct {
	// The scheduling rule for the CBR policy backup execution.
	BackupCycle CbrPolicyBackupCycle `pulumi:"backupCycle"`
	// The maximum number of retained backups.
	BackupQuantity *int `pulumi:"backupQuantity"`
	// The ID of the replication destination project.
	DestinationProjectId *string `pulumi:"destinationProjectId"`
	// The name of the replication destination region.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// Whether to enable the CBR policy.
	Enabled *bool `pulumi:"enabled"`
	// The long-term retention rules.
	LongTermRetention *CbrPolicyLongTermRetention `pulumi:"longTermRetention"`
	// The policy name.
	Name *string `pulumi:"name"`
	// The region where the policy is located.
	Region *string `pulumi:"region"`
	// The duration (in days) for retained backups.
	TimePeriod *int `pulumi:"timePeriod"`
	// The UTC time zone.
	TimeZone *string `pulumi:"timeZone"`
	// The protection type of the CBR policy.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CbrPolicy resource.
type CbrPolicyArgs struct {
	// The scheduling rule for the CBR policy backup execution.
	BackupCycle CbrPolicyBackupCycleInput
	// The maximum number of retained backups.
	BackupQuantity pulumi.IntPtrInput
	// The ID of the replication destination project.
	DestinationProjectId pulumi.StringPtrInput
	// The name of the replication destination region.
	DestinationRegion pulumi.StringPtrInput
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration pulumi.BoolPtrInput
	// Whether to enable the CBR policy.
	Enabled pulumi.BoolPtrInput
	// The long-term retention rules.
	LongTermRetention CbrPolicyLongTermRetentionPtrInput
	// The policy name.
	Name pulumi.StringPtrInput
	// The region where the policy is located.
	Region pulumi.StringPtrInput
	// The duration (in days) for retained backups.
	TimePeriod pulumi.IntPtrInput
	// The UTC time zone.
	TimeZone pulumi.StringPtrInput
	// The protection type of the CBR policy.
	Type pulumi.StringInput
}

func (CbrPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrPolicyArgs)(nil)).Elem()
}

type CbrPolicyInput interface {
	pulumi.Input

	ToCbrPolicyOutput() CbrPolicyOutput
	ToCbrPolicyOutputWithContext(ctx context.Context) CbrPolicyOutput
}

func (*CbrPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrPolicy)(nil)).Elem()
}

func (i *CbrPolicy) ToCbrPolicyOutput() CbrPolicyOutput {
	return i.ToCbrPolicyOutputWithContext(context.Background())
}

func (i *CbrPolicy) ToCbrPolicyOutputWithContext(ctx context.Context) CbrPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrPolicyOutput)
}

// CbrPolicyArrayInput is an input type that accepts CbrPolicyArray and CbrPolicyArrayOutput values.
// You can construct a concrete instance of `CbrPolicyArrayInput` via:
//
//	CbrPolicyArray{ CbrPolicyArgs{...} }
type CbrPolicyArrayInput interface {
	pulumi.Input

	ToCbrPolicyArrayOutput() CbrPolicyArrayOutput
	ToCbrPolicyArrayOutputWithContext(context.Context) CbrPolicyArrayOutput
}

type CbrPolicyArray []CbrPolicyInput

func (CbrPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrPolicy)(nil)).Elem()
}

func (i CbrPolicyArray) ToCbrPolicyArrayOutput() CbrPolicyArrayOutput {
	return i.ToCbrPolicyArrayOutputWithContext(context.Background())
}

func (i CbrPolicyArray) ToCbrPolicyArrayOutputWithContext(ctx context.Context) CbrPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrPolicyArrayOutput)
}

// CbrPolicyMapInput is an input type that accepts CbrPolicyMap and CbrPolicyMapOutput values.
// You can construct a concrete instance of `CbrPolicyMapInput` via:
//
//	CbrPolicyMap{ "key": CbrPolicyArgs{...} }
type CbrPolicyMapInput interface {
	pulumi.Input

	ToCbrPolicyMapOutput() CbrPolicyMapOutput
	ToCbrPolicyMapOutputWithContext(context.Context) CbrPolicyMapOutput
}

type CbrPolicyMap map[string]CbrPolicyInput

func (CbrPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrPolicy)(nil)).Elem()
}

func (i CbrPolicyMap) ToCbrPolicyMapOutput() CbrPolicyMapOutput {
	return i.ToCbrPolicyMapOutputWithContext(context.Background())
}

func (i CbrPolicyMap) ToCbrPolicyMapOutputWithContext(ctx context.Context) CbrPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrPolicyMapOutput)
}

type CbrPolicyOutput struct{ *pulumi.OutputState }

func (CbrPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrPolicy)(nil)).Elem()
}

func (o CbrPolicyOutput) ToCbrPolicyOutput() CbrPolicyOutput {
	return o
}

func (o CbrPolicyOutput) ToCbrPolicyOutputWithContext(ctx context.Context) CbrPolicyOutput {
	return o
}

// The scheduling rule for the CBR policy backup execution.
func (o CbrPolicyOutput) BackupCycle() CbrPolicyBackupCycleOutput {
	return o.ApplyT(func(v *CbrPolicy) CbrPolicyBackupCycleOutput { return v.BackupCycle }).(CbrPolicyBackupCycleOutput)
}

// The maximum number of retained backups.
func (o CbrPolicyOutput) BackupQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.IntPtrOutput { return v.BackupQuantity }).(pulumi.IntPtrOutput)
}

// The ID of the replication destination project.
func (o CbrPolicyOutput) DestinationProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.StringPtrOutput { return v.DestinationProjectId }).(pulumi.StringPtrOutput)
}

// The name of the replication destination region.
func (o CbrPolicyOutput) DestinationRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.StringPtrOutput { return v.DestinationRegion }).(pulumi.StringPtrOutput)
}

// Whether to enable the acceleration function to shorten the replication time for cross-region
func (o CbrPolicyOutput) EnableAcceleration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.BoolPtrOutput { return v.EnableAcceleration }).(pulumi.BoolPtrOutput)
}

// Whether to enable the CBR policy.
func (o CbrPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The long-term retention rules.
func (o CbrPolicyOutput) LongTermRetention() CbrPolicyLongTermRetentionPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) CbrPolicyLongTermRetentionPtrOutput { return v.LongTermRetention }).(CbrPolicyLongTermRetentionPtrOutput)
}

// The policy name.
func (o CbrPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the policy is located.
func (o CbrPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The duration (in days) for retained backups.
func (o CbrPolicyOutput) TimePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.IntPtrOutput { return v.TimePeriod }).(pulumi.IntPtrOutput)
}

// The UTC time zone.
func (o CbrPolicyOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// The protection type of the CBR policy.
func (o CbrPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CbrPolicyArrayOutput struct{ *pulumi.OutputState }

func (CbrPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrPolicy)(nil)).Elem()
}

func (o CbrPolicyArrayOutput) ToCbrPolicyArrayOutput() CbrPolicyArrayOutput {
	return o
}

func (o CbrPolicyArrayOutput) ToCbrPolicyArrayOutputWithContext(ctx context.Context) CbrPolicyArrayOutput {
	return o
}

func (o CbrPolicyArrayOutput) Index(i pulumi.IntInput) CbrPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CbrPolicy {
		return vs[0].([]*CbrPolicy)[vs[1].(int)]
	}).(CbrPolicyOutput)
}

type CbrPolicyMapOutput struct{ *pulumi.OutputState }

func (CbrPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrPolicy)(nil)).Elem()
}

func (o CbrPolicyMapOutput) ToCbrPolicyMapOutput() CbrPolicyMapOutput {
	return o
}

func (o CbrPolicyMapOutput) ToCbrPolicyMapOutputWithContext(ctx context.Context) CbrPolicyMapOutput {
	return o
}

func (o CbrPolicyMapOutput) MapIndex(k pulumi.StringInput) CbrPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CbrPolicy {
		return vs[0].(map[string]*CbrPolicy)[vs[1].(string)]
	}).(CbrPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CbrPolicyInput)(nil)).Elem(), &CbrPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrPolicyArrayInput)(nil)).Elem(), CbrPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrPolicyMapInput)(nil)).Elem(), CbrPolicyMap{})
	pulumi.RegisterOutputType(CbrPolicyOutput{})
	pulumi.RegisterOutputType(CbrPolicyArrayOutput{})
	pulumi.RegisterOutputType(CbrPolicyMapOutput{})
}
