// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnterpriseProject struct {
	pulumi.CustomResourceState

	CreatedAt            pulumi.StringOutput    `pulumi:"createdAt"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	Enable               pulumi.BoolPtrOutput   `pulumi:"enable"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	SkipDisableOnDestroy pulumi.BoolPtrOutput   `pulumi:"skipDisableOnDestroy"`
	Status               pulumi.IntOutput       `pulumi:"status"`
	Type                 pulumi.StringOutput    `pulumi:"type"`
	UpdatedAt            pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewEnterpriseProject registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseProject(ctx *pulumi.Context,
	name string, args *EnterpriseProjectArgs, opts ...pulumi.ResourceOption) (*EnterpriseProject, error) {
	if args == nil {
		args = &EnterpriseProjectArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnterpriseProject
	err := ctx.RegisterResource("sbercloud:index/enterpriseProject:EnterpriseProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseProject gets an existing EnterpriseProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseProjectState, opts ...pulumi.ResourceOption) (*EnterpriseProject, error) {
	var resource EnterpriseProject
	err := ctx.ReadResource("sbercloud:index/enterpriseProject:EnterpriseProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseProject resources.
type enterpriseProjectState struct {
	CreatedAt            *string `pulumi:"createdAt"`
	Description          *string `pulumi:"description"`
	Enable               *bool   `pulumi:"enable"`
	Name                 *string `pulumi:"name"`
	SkipDisableOnDestroy *bool   `pulumi:"skipDisableOnDestroy"`
	Status               *int    `pulumi:"status"`
	Type                 *string `pulumi:"type"`
	UpdatedAt            *string `pulumi:"updatedAt"`
}

type EnterpriseProjectState struct {
	CreatedAt            pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	Enable               pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	SkipDisableOnDestroy pulumi.BoolPtrInput
	Status               pulumi.IntPtrInput
	Type                 pulumi.StringPtrInput
	UpdatedAt            pulumi.StringPtrInput
}

func (EnterpriseProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseProjectState)(nil)).Elem()
}

type enterpriseProjectArgs struct {
	Description          *string `pulumi:"description"`
	Enable               *bool   `pulumi:"enable"`
	Name                 *string `pulumi:"name"`
	SkipDisableOnDestroy *bool   `pulumi:"skipDisableOnDestroy"`
	Type                 *string `pulumi:"type"`
}

// The set of arguments for constructing a EnterpriseProject resource.
type EnterpriseProjectArgs struct {
	Description          pulumi.StringPtrInput
	Enable               pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	SkipDisableOnDestroy pulumi.BoolPtrInput
	Type                 pulumi.StringPtrInput
}

func (EnterpriseProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseProjectArgs)(nil)).Elem()
}

type EnterpriseProjectInput interface {
	pulumi.Input

	ToEnterpriseProjectOutput() EnterpriseProjectOutput
	ToEnterpriseProjectOutputWithContext(ctx context.Context) EnterpriseProjectOutput
}

func (*EnterpriseProject) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseProject)(nil)).Elem()
}

func (i *EnterpriseProject) ToEnterpriseProjectOutput() EnterpriseProjectOutput {
	return i.ToEnterpriseProjectOutputWithContext(context.Background())
}

func (i *EnterpriseProject) ToEnterpriseProjectOutputWithContext(ctx context.Context) EnterpriseProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseProjectOutput)
}

// EnterpriseProjectArrayInput is an input type that accepts EnterpriseProjectArray and EnterpriseProjectArrayOutput values.
// You can construct a concrete instance of `EnterpriseProjectArrayInput` via:
//
//	EnterpriseProjectArray{ EnterpriseProjectArgs{...} }
type EnterpriseProjectArrayInput interface {
	pulumi.Input

	ToEnterpriseProjectArrayOutput() EnterpriseProjectArrayOutput
	ToEnterpriseProjectArrayOutputWithContext(context.Context) EnterpriseProjectArrayOutput
}

type EnterpriseProjectArray []EnterpriseProjectInput

func (EnterpriseProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseProject)(nil)).Elem()
}

func (i EnterpriseProjectArray) ToEnterpriseProjectArrayOutput() EnterpriseProjectArrayOutput {
	return i.ToEnterpriseProjectArrayOutputWithContext(context.Background())
}

func (i EnterpriseProjectArray) ToEnterpriseProjectArrayOutputWithContext(ctx context.Context) EnterpriseProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseProjectArrayOutput)
}

// EnterpriseProjectMapInput is an input type that accepts EnterpriseProjectMap and EnterpriseProjectMapOutput values.
// You can construct a concrete instance of `EnterpriseProjectMapInput` via:
//
//	EnterpriseProjectMap{ "key": EnterpriseProjectArgs{...} }
type EnterpriseProjectMapInput interface {
	pulumi.Input

	ToEnterpriseProjectMapOutput() EnterpriseProjectMapOutput
	ToEnterpriseProjectMapOutputWithContext(context.Context) EnterpriseProjectMapOutput
}

type EnterpriseProjectMap map[string]EnterpriseProjectInput

func (EnterpriseProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseProject)(nil)).Elem()
}

func (i EnterpriseProjectMap) ToEnterpriseProjectMapOutput() EnterpriseProjectMapOutput {
	return i.ToEnterpriseProjectMapOutputWithContext(context.Background())
}

func (i EnterpriseProjectMap) ToEnterpriseProjectMapOutputWithContext(ctx context.Context) EnterpriseProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseProjectMapOutput)
}

type EnterpriseProjectOutput struct{ *pulumi.OutputState }

func (EnterpriseProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseProject)(nil)).Elem()
}

func (o EnterpriseProjectOutput) ToEnterpriseProjectOutput() EnterpriseProjectOutput {
	return o
}

func (o EnterpriseProjectOutput) ToEnterpriseProjectOutputWithContext(ctx context.Context) EnterpriseProjectOutput {
	return o
}

func (o EnterpriseProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o EnterpriseProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EnterpriseProjectOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o EnterpriseProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnterpriseProjectOutput) SkipDisableOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.BoolPtrOutput { return v.SkipDisableOnDestroy }).(pulumi.BoolPtrOutput)
}

func (o EnterpriseProjectOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

func (o EnterpriseProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o EnterpriseProjectOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseProject) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type EnterpriseProjectArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseProject)(nil)).Elem()
}

func (o EnterpriseProjectArrayOutput) ToEnterpriseProjectArrayOutput() EnterpriseProjectArrayOutput {
	return o
}

func (o EnterpriseProjectArrayOutput) ToEnterpriseProjectArrayOutputWithContext(ctx context.Context) EnterpriseProjectArrayOutput {
	return o
}

func (o EnterpriseProjectArrayOutput) Index(i pulumi.IntInput) EnterpriseProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseProject {
		return vs[0].([]*EnterpriseProject)[vs[1].(int)]
	}).(EnterpriseProjectOutput)
}

type EnterpriseProjectMapOutput struct{ *pulumi.OutputState }

func (EnterpriseProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseProject)(nil)).Elem()
}

func (o EnterpriseProjectMapOutput) ToEnterpriseProjectMapOutput() EnterpriseProjectMapOutput {
	return o
}

func (o EnterpriseProjectMapOutput) ToEnterpriseProjectMapOutputWithContext(ctx context.Context) EnterpriseProjectMapOutput {
	return o
}

func (o EnterpriseProjectMapOutput) MapIndex(k pulumi.StringInput) EnterpriseProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseProject {
		return vs[0].(map[string]*EnterpriseProject)[vs[1].(string)]
	}).(EnterpriseProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseProjectInput)(nil)).Elem(), &EnterpriseProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseProjectArrayInput)(nil)).Elem(), EnterpriseProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseProjectMapInput)(nil)).Elem(), EnterpriseProjectMap{})
	pulumi.RegisterOutputType(EnterpriseProjectOutput{})
	pulumi.RegisterOutputType(EnterpriseProjectArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseProjectMapOutput{})
}
