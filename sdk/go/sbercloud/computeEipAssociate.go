// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeEipAssociate struct {
	pulumi.CustomResourceState

	BandwidthId pulumi.StringPtrOutput `pulumi:"bandwidthId"`
	FixedIp     pulumi.StringOutput    `pulumi:"fixedIp"`
	InstanceId  pulumi.StringOutput    `pulumi:"instanceId"`
	PortId      pulumi.StringOutput    `pulumi:"portId"`
	PublicIp    pulumi.StringPtrOutput `pulumi:"publicIp"`
	Region      pulumi.StringOutput    `pulumi:"region"`
}

// NewComputeEipAssociate registers a new resource with the given unique name, arguments, and options.
func NewComputeEipAssociate(ctx *pulumi.Context,
	name string, args *ComputeEipAssociateArgs, opts ...pulumi.ResourceOption) (*ComputeEipAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeEipAssociate
	err := ctx.RegisterResource("sbercloud:index/computeEipAssociate:ComputeEipAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeEipAssociate gets an existing ComputeEipAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeEipAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeEipAssociateState, opts ...pulumi.ResourceOption) (*ComputeEipAssociate, error) {
	var resource ComputeEipAssociate
	err := ctx.ReadResource("sbercloud:index/computeEipAssociate:ComputeEipAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeEipAssociate resources.
type computeEipAssociateState struct {
	BandwidthId *string `pulumi:"bandwidthId"`
	FixedIp     *string `pulumi:"fixedIp"`
	InstanceId  *string `pulumi:"instanceId"`
	PortId      *string `pulumi:"portId"`
	PublicIp    *string `pulumi:"publicIp"`
	Region      *string `pulumi:"region"`
}

type ComputeEipAssociateState struct {
	BandwidthId pulumi.StringPtrInput
	FixedIp     pulumi.StringPtrInput
	InstanceId  pulumi.StringPtrInput
	PortId      pulumi.StringPtrInput
	PublicIp    pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
}

func (ComputeEipAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEipAssociateState)(nil)).Elem()
}

type computeEipAssociateArgs struct {
	BandwidthId *string `pulumi:"bandwidthId"`
	FixedIp     *string `pulumi:"fixedIp"`
	InstanceId  string  `pulumi:"instanceId"`
	PublicIp    *string `pulumi:"publicIp"`
	Region      *string `pulumi:"region"`
}

// The set of arguments for constructing a ComputeEipAssociate resource.
type ComputeEipAssociateArgs struct {
	BandwidthId pulumi.StringPtrInput
	FixedIp     pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	PublicIp    pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
}

func (ComputeEipAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeEipAssociateArgs)(nil)).Elem()
}

type ComputeEipAssociateInput interface {
	pulumi.Input

	ToComputeEipAssociateOutput() ComputeEipAssociateOutput
	ToComputeEipAssociateOutputWithContext(ctx context.Context) ComputeEipAssociateOutput
}

func (*ComputeEipAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEipAssociate)(nil)).Elem()
}

func (i *ComputeEipAssociate) ToComputeEipAssociateOutput() ComputeEipAssociateOutput {
	return i.ToComputeEipAssociateOutputWithContext(context.Background())
}

func (i *ComputeEipAssociate) ToComputeEipAssociateOutputWithContext(ctx context.Context) ComputeEipAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEipAssociateOutput)
}

// ComputeEipAssociateArrayInput is an input type that accepts ComputeEipAssociateArray and ComputeEipAssociateArrayOutput values.
// You can construct a concrete instance of `ComputeEipAssociateArrayInput` via:
//
//	ComputeEipAssociateArray{ ComputeEipAssociateArgs{...} }
type ComputeEipAssociateArrayInput interface {
	pulumi.Input

	ToComputeEipAssociateArrayOutput() ComputeEipAssociateArrayOutput
	ToComputeEipAssociateArrayOutputWithContext(context.Context) ComputeEipAssociateArrayOutput
}

type ComputeEipAssociateArray []ComputeEipAssociateInput

func (ComputeEipAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeEipAssociate)(nil)).Elem()
}

func (i ComputeEipAssociateArray) ToComputeEipAssociateArrayOutput() ComputeEipAssociateArrayOutput {
	return i.ToComputeEipAssociateArrayOutputWithContext(context.Background())
}

func (i ComputeEipAssociateArray) ToComputeEipAssociateArrayOutputWithContext(ctx context.Context) ComputeEipAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEipAssociateArrayOutput)
}

// ComputeEipAssociateMapInput is an input type that accepts ComputeEipAssociateMap and ComputeEipAssociateMapOutput values.
// You can construct a concrete instance of `ComputeEipAssociateMapInput` via:
//
//	ComputeEipAssociateMap{ "key": ComputeEipAssociateArgs{...} }
type ComputeEipAssociateMapInput interface {
	pulumi.Input

	ToComputeEipAssociateMapOutput() ComputeEipAssociateMapOutput
	ToComputeEipAssociateMapOutputWithContext(context.Context) ComputeEipAssociateMapOutput
}

type ComputeEipAssociateMap map[string]ComputeEipAssociateInput

func (ComputeEipAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeEipAssociate)(nil)).Elem()
}

func (i ComputeEipAssociateMap) ToComputeEipAssociateMapOutput() ComputeEipAssociateMapOutput {
	return i.ToComputeEipAssociateMapOutputWithContext(context.Background())
}

func (i ComputeEipAssociateMap) ToComputeEipAssociateMapOutputWithContext(ctx context.Context) ComputeEipAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEipAssociateMapOutput)
}

type ComputeEipAssociateOutput struct{ *pulumi.OutputState }

func (ComputeEipAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEipAssociate)(nil)).Elem()
}

func (o ComputeEipAssociateOutput) ToComputeEipAssociateOutput() ComputeEipAssociateOutput {
	return o
}

func (o ComputeEipAssociateOutput) ToComputeEipAssociateOutputWithContext(ctx context.Context) ComputeEipAssociateOutput {
	return o
}

func (o ComputeEipAssociateOutput) BandwidthId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEipAssociate) pulumi.StringPtrOutput { return v.BandwidthId }).(pulumi.StringPtrOutput)
}

func (o ComputeEipAssociateOutput) FixedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEipAssociate) pulumi.StringOutput { return v.FixedIp }).(pulumi.StringOutput)
}

func (o ComputeEipAssociateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEipAssociate) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ComputeEipAssociateOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEipAssociate) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

func (o ComputeEipAssociateOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEipAssociate) pulumi.StringPtrOutput { return v.PublicIp }).(pulumi.StringPtrOutput)
}

func (o ComputeEipAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeEipAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ComputeEipAssociateArrayOutput struct{ *pulumi.OutputState }

func (ComputeEipAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeEipAssociate)(nil)).Elem()
}

func (o ComputeEipAssociateArrayOutput) ToComputeEipAssociateArrayOutput() ComputeEipAssociateArrayOutput {
	return o
}

func (o ComputeEipAssociateArrayOutput) ToComputeEipAssociateArrayOutputWithContext(ctx context.Context) ComputeEipAssociateArrayOutput {
	return o
}

func (o ComputeEipAssociateArrayOutput) Index(i pulumi.IntInput) ComputeEipAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeEipAssociate {
		return vs[0].([]*ComputeEipAssociate)[vs[1].(int)]
	}).(ComputeEipAssociateOutput)
}

type ComputeEipAssociateMapOutput struct{ *pulumi.OutputState }

func (ComputeEipAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeEipAssociate)(nil)).Elem()
}

func (o ComputeEipAssociateMapOutput) ToComputeEipAssociateMapOutput() ComputeEipAssociateMapOutput {
	return o
}

func (o ComputeEipAssociateMapOutput) ToComputeEipAssociateMapOutputWithContext(ctx context.Context) ComputeEipAssociateMapOutput {
	return o
}

func (o ComputeEipAssociateMapOutput) MapIndex(k pulumi.StringInput) ComputeEipAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeEipAssociate {
		return vs[0].(map[string]*ComputeEipAssociate)[vs[1].(string)]
	}).(ComputeEipAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEipAssociateInput)(nil)).Elem(), &ComputeEipAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEipAssociateArrayInput)(nil)).Elem(), ComputeEipAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEipAssociateMapInput)(nil)).Elem(), ComputeEipAssociateMap{})
	pulumi.RegisterOutputType(ComputeEipAssociateOutput{})
	pulumi.RegisterOutputType(ComputeEipAssociateArrayOutput{})
	pulumi.RegisterOutputType(ComputeEipAssociateMapOutput{})
}
