// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApigThrottlingPolicy struct {
	pulumi.CustomResourceState

	// The array of one or more special throttling policies for APP limit.
	AppThrottles ApigThrottlingPolicyAppThrottleArrayOutput `pulumi:"appThrottles"`
	// The creation time of the throttling policy.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description about the API throttling policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests pulumi.IntOutput `pulumi:"maxApiRequests"`
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests pulumi.IntPtrOutput `pulumi:"maxAppRequests"`
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests pulumi.IntPtrOutput `pulumi:"maxIpRequests"`
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests pulumi.IntPtrOutput `pulumi:"maxUserRequests"`
	// The name of the throttling policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The period of time for limiting the number of API calls.
	Period pulumi.IntOutput `pulumi:"period"`
	// The time unit for limiting the number of API calls.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The region where the throttling policy is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The type of the request throttling policy.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles ApigThrottlingPolicyUserThrottleArrayOutput `pulumi:"userThrottles"`
}

// NewApigThrottlingPolicy registers a new resource with the given unique name, arguments, and options.
func NewApigThrottlingPolicy(ctx *pulumi.Context,
	name string, args *ApigThrottlingPolicyArgs, opts ...pulumi.ResourceOption) (*ApigThrottlingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MaxApiRequests == nil {
		return nil, errors.New("invalid value for required argument 'MaxApiRequests'")
	}
	if args.Period == nil {
		return nil, errors.New("invalid value for required argument 'Period'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigThrottlingPolicy
	err := ctx.RegisterResource("sbercloud:index/apigThrottlingPolicy:ApigThrottlingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigThrottlingPolicy gets an existing ApigThrottlingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigThrottlingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigThrottlingPolicyState, opts ...pulumi.ResourceOption) (*ApigThrottlingPolicy, error) {
	var resource ApigThrottlingPolicy
	err := ctx.ReadResource("sbercloud:index/apigThrottlingPolicy:ApigThrottlingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigThrottlingPolicy resources.
type apigThrottlingPolicyState struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles []ApigThrottlingPolicyAppThrottle `pulumi:"appThrottles"`
	// The creation time of the throttling policy.
	CreatedAt *string `pulumi:"createdAt"`
	// The description about the API throttling policy.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests *int `pulumi:"maxApiRequests"`
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests *int `pulumi:"maxAppRequests"`
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests *int `pulumi:"maxIpRequests"`
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests *int `pulumi:"maxUserRequests"`
	// The name of the throttling policy.
	Name *string `pulumi:"name"`
	// The period of time for limiting the number of API calls.
	Period *int `pulumi:"period"`
	// The time unit for limiting the number of API calls.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The region where the throttling policy is located.
	Region *string `pulumi:"region"`
	// The type of the request throttling policy.
	Type *string `pulumi:"type"`
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles []ApigThrottlingPolicyUserThrottle `pulumi:"userThrottles"`
}

type ApigThrottlingPolicyState struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles ApigThrottlingPolicyAppThrottleArrayInput
	// The creation time of the throttling policy.
	CreatedAt pulumi.StringPtrInput
	// The description about the API throttling policy.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId pulumi.StringPtrInput
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests pulumi.IntPtrInput
	// The name of the throttling policy.
	Name pulumi.StringPtrInput
	// The period of time for limiting the number of API calls.
	Period pulumi.IntPtrInput
	// The time unit for limiting the number of API calls.
	PeriodUnit pulumi.StringPtrInput
	// The region where the throttling policy is located.
	Region pulumi.StringPtrInput
	// The type of the request throttling policy.
	Type pulumi.StringPtrInput
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles ApigThrottlingPolicyUserThrottleArrayInput
}

func (ApigThrottlingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigThrottlingPolicyState)(nil)).Elem()
}

type apigThrottlingPolicyArgs struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles []ApigThrottlingPolicyAppThrottle `pulumi:"appThrottles"`
	// The description about the API throttling policy.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId string `pulumi:"instanceId"`
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests int `pulumi:"maxApiRequests"`
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests *int `pulumi:"maxAppRequests"`
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests *int `pulumi:"maxIpRequests"`
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests *int `pulumi:"maxUserRequests"`
	// The name of the throttling policy.
	Name *string `pulumi:"name"`
	// The period of time for limiting the number of API calls.
	Period int `pulumi:"period"`
	// The time unit for limiting the number of API calls.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The region where the throttling policy is located.
	Region *string `pulumi:"region"`
	// The type of the request throttling policy.
	Type *string `pulumi:"type"`
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles []ApigThrottlingPolicyUserThrottle `pulumi:"userThrottles"`
}

// The set of arguments for constructing a ApigThrottlingPolicy resource.
type ApigThrottlingPolicyArgs struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles ApigThrottlingPolicyAppThrottleArrayInput
	// The description about the API throttling policy.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId pulumi.StringInput
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests pulumi.IntInput
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests pulumi.IntPtrInput
	// The name of the throttling policy.
	Name pulumi.StringPtrInput
	// The period of time for limiting the number of API calls.
	Period pulumi.IntInput
	// The time unit for limiting the number of API calls.
	PeriodUnit pulumi.StringPtrInput
	// The region where the throttling policy is located.
	Region pulumi.StringPtrInput
	// The type of the request throttling policy.
	Type pulumi.StringPtrInput
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles ApigThrottlingPolicyUserThrottleArrayInput
}

func (ApigThrottlingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigThrottlingPolicyArgs)(nil)).Elem()
}

type ApigThrottlingPolicyInput interface {
	pulumi.Input

	ToApigThrottlingPolicyOutput() ApigThrottlingPolicyOutput
	ToApigThrottlingPolicyOutputWithContext(ctx context.Context) ApigThrottlingPolicyOutput
}

func (*ApigThrottlingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigThrottlingPolicy)(nil)).Elem()
}

func (i *ApigThrottlingPolicy) ToApigThrottlingPolicyOutput() ApigThrottlingPolicyOutput {
	return i.ToApigThrottlingPolicyOutputWithContext(context.Background())
}

func (i *ApigThrottlingPolicy) ToApigThrottlingPolicyOutputWithContext(ctx context.Context) ApigThrottlingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigThrottlingPolicyOutput)
}

// ApigThrottlingPolicyArrayInput is an input type that accepts ApigThrottlingPolicyArray and ApigThrottlingPolicyArrayOutput values.
// You can construct a concrete instance of `ApigThrottlingPolicyArrayInput` via:
//
//	ApigThrottlingPolicyArray{ ApigThrottlingPolicyArgs{...} }
type ApigThrottlingPolicyArrayInput interface {
	pulumi.Input

	ToApigThrottlingPolicyArrayOutput() ApigThrottlingPolicyArrayOutput
	ToApigThrottlingPolicyArrayOutputWithContext(context.Context) ApigThrottlingPolicyArrayOutput
}

type ApigThrottlingPolicyArray []ApigThrottlingPolicyInput

func (ApigThrottlingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigThrottlingPolicy)(nil)).Elem()
}

func (i ApigThrottlingPolicyArray) ToApigThrottlingPolicyArrayOutput() ApigThrottlingPolicyArrayOutput {
	return i.ToApigThrottlingPolicyArrayOutputWithContext(context.Background())
}

func (i ApigThrottlingPolicyArray) ToApigThrottlingPolicyArrayOutputWithContext(ctx context.Context) ApigThrottlingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigThrottlingPolicyArrayOutput)
}

// ApigThrottlingPolicyMapInput is an input type that accepts ApigThrottlingPolicyMap and ApigThrottlingPolicyMapOutput values.
// You can construct a concrete instance of `ApigThrottlingPolicyMapInput` via:
//
//	ApigThrottlingPolicyMap{ "key": ApigThrottlingPolicyArgs{...} }
type ApigThrottlingPolicyMapInput interface {
	pulumi.Input

	ToApigThrottlingPolicyMapOutput() ApigThrottlingPolicyMapOutput
	ToApigThrottlingPolicyMapOutputWithContext(context.Context) ApigThrottlingPolicyMapOutput
}

type ApigThrottlingPolicyMap map[string]ApigThrottlingPolicyInput

func (ApigThrottlingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigThrottlingPolicy)(nil)).Elem()
}

func (i ApigThrottlingPolicyMap) ToApigThrottlingPolicyMapOutput() ApigThrottlingPolicyMapOutput {
	return i.ToApigThrottlingPolicyMapOutputWithContext(context.Background())
}

func (i ApigThrottlingPolicyMap) ToApigThrottlingPolicyMapOutputWithContext(ctx context.Context) ApigThrottlingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigThrottlingPolicyMapOutput)
}

type ApigThrottlingPolicyOutput struct{ *pulumi.OutputState }

func (ApigThrottlingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigThrottlingPolicy)(nil)).Elem()
}

func (o ApigThrottlingPolicyOutput) ToApigThrottlingPolicyOutput() ApigThrottlingPolicyOutput {
	return o
}

func (o ApigThrottlingPolicyOutput) ToApigThrottlingPolicyOutputWithContext(ctx context.Context) ApigThrottlingPolicyOutput {
	return o
}

// The array of one or more special throttling policies for APP limit.
func (o ApigThrottlingPolicyOutput) AppThrottles() ApigThrottlingPolicyAppThrottleArrayOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) ApigThrottlingPolicyAppThrottleArrayOutput { return v.AppThrottles }).(ApigThrottlingPolicyAppThrottleArrayOutput)
}

// The creation time of the throttling policy.
func (o ApigThrottlingPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description about the API throttling policy.
func (o ApigThrottlingPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the dedicated instance to which the throttling policy belongs.
func (o ApigThrottlingPolicyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The maximum number of times an API can be accessed within a specified period..
func (o ApigThrottlingPolicyOutput) MaxApiRequests() pulumi.IntOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.IntOutput { return v.MaxApiRequests }).(pulumi.IntOutput)
}

// The maximum number of times the API can be accessed by an app within the same period.
func (o ApigThrottlingPolicyOutput) MaxAppRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.IntPtrOutput { return v.MaxAppRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of times the API can be accessed by an IP address within the same period.
func (o ApigThrottlingPolicyOutput) MaxIpRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.IntPtrOutput { return v.MaxIpRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of times the API can be accessed by a user within the same period.
func (o ApigThrottlingPolicyOutput) MaxUserRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.IntPtrOutput { return v.MaxUserRequests }).(pulumi.IntPtrOutput)
}

// The name of the throttling policy.
func (o ApigThrottlingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The period of time for limiting the number of API calls.
func (o ApigThrottlingPolicyOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// The time unit for limiting the number of API calls.
func (o ApigThrottlingPolicyOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The region where the throttling policy is located.
func (o ApigThrottlingPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The type of the request throttling policy.
func (o ApigThrottlingPolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The array of one or more special throttling policies for IAM user limit.
func (o ApigThrottlingPolicyOutput) UserThrottles() ApigThrottlingPolicyUserThrottleArrayOutput {
	return o.ApplyT(func(v *ApigThrottlingPolicy) ApigThrottlingPolicyUserThrottleArrayOutput { return v.UserThrottles }).(ApigThrottlingPolicyUserThrottleArrayOutput)
}

type ApigThrottlingPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApigThrottlingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigThrottlingPolicy)(nil)).Elem()
}

func (o ApigThrottlingPolicyArrayOutput) ToApigThrottlingPolicyArrayOutput() ApigThrottlingPolicyArrayOutput {
	return o
}

func (o ApigThrottlingPolicyArrayOutput) ToApigThrottlingPolicyArrayOutputWithContext(ctx context.Context) ApigThrottlingPolicyArrayOutput {
	return o
}

func (o ApigThrottlingPolicyArrayOutput) Index(i pulumi.IntInput) ApigThrottlingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigThrottlingPolicy {
		return vs[0].([]*ApigThrottlingPolicy)[vs[1].(int)]
	}).(ApigThrottlingPolicyOutput)
}

type ApigThrottlingPolicyMapOutput struct{ *pulumi.OutputState }

func (ApigThrottlingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigThrottlingPolicy)(nil)).Elem()
}

func (o ApigThrottlingPolicyMapOutput) ToApigThrottlingPolicyMapOutput() ApigThrottlingPolicyMapOutput {
	return o
}

func (o ApigThrottlingPolicyMapOutput) ToApigThrottlingPolicyMapOutputWithContext(ctx context.Context) ApigThrottlingPolicyMapOutput {
	return o
}

func (o ApigThrottlingPolicyMapOutput) MapIndex(k pulumi.StringInput) ApigThrottlingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigThrottlingPolicy {
		return vs[0].(map[string]*ApigThrottlingPolicy)[vs[1].(string)]
	}).(ApigThrottlingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigThrottlingPolicyInput)(nil)).Elem(), &ApigThrottlingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigThrottlingPolicyArrayInput)(nil)).Elem(), ApigThrottlingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigThrottlingPolicyMapInput)(nil)).Elem(), ApigThrottlingPolicyMap{})
	pulumi.RegisterOutputType(ApigThrottlingPolicyOutput{})
	pulumi.RegisterOutputType(ApigThrottlingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApigThrottlingPolicyMapOutput{})
}
