// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcPeeringConnectionAccepter struct {
	pulumi.CustomResourceState

	Accept                 pulumi.BoolPtrOutput `pulumi:"accept"`
	Description            pulumi.StringOutput  `pulumi:"description"`
	Name                   pulumi.StringOutput  `pulumi:"name"`
	PeerTenantId           pulumi.StringOutput  `pulumi:"peerTenantId"`
	PeerVpcId              pulumi.StringOutput  `pulumi:"peerVpcId"`
	Region                 pulumi.StringOutput  `pulumi:"region"`
	Status                 pulumi.StringOutput  `pulumi:"status"`
	VpcId                  pulumi.StringOutput  `pulumi:"vpcId"`
	VpcPeeringConnectionId pulumi.StringOutput  `pulumi:"vpcPeeringConnectionId"`
}

// NewVpcPeeringConnectionAccepter registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionAccepterArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcPeeringConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpcPeeringConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcPeeringConnectionAccepter
	err := ctx.RegisterResource("sbercloud:index/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnectionAccepter gets an existing VpcPeeringConnectionAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnectionAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionAccepterState, opts ...pulumi.ResourceOption) (*VpcPeeringConnectionAccepter, error) {
	var resource VpcPeeringConnectionAccepter
	err := ctx.ReadResource("sbercloud:index/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnectionAccepter resources.
type vpcPeeringConnectionAccepterState struct {
	Accept                 *bool   `pulumi:"accept"`
	Description            *string `pulumi:"description"`
	Name                   *string `pulumi:"name"`
	PeerTenantId           *string `pulumi:"peerTenantId"`
	PeerVpcId              *string `pulumi:"peerVpcId"`
	Region                 *string `pulumi:"region"`
	Status                 *string `pulumi:"status"`
	VpcId                  *string `pulumi:"vpcId"`
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

type VpcPeeringConnectionAccepterState struct {
	Accept                 pulumi.BoolPtrInput
	Description            pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	PeerTenantId           pulumi.StringPtrInput
	PeerVpcId              pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
	Status                 pulumi.StringPtrInput
	VpcId                  pulumi.StringPtrInput
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (VpcPeeringConnectionAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionAccepterState)(nil)).Elem()
}

type vpcPeeringConnectionAccepterArgs struct {
	Accept                 *bool   `pulumi:"accept"`
	Region                 *string `pulumi:"region"`
	VpcPeeringConnectionId string  `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a VpcPeeringConnectionAccepter resource.
type VpcPeeringConnectionAccepterArgs struct {
	Accept                 pulumi.BoolPtrInput
	Region                 pulumi.StringPtrInput
	VpcPeeringConnectionId pulumi.StringInput
}

func (VpcPeeringConnectionAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionAccepterArgs)(nil)).Elem()
}

type VpcPeeringConnectionAccepterInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterOutput() VpcPeeringConnectionAccepterOutput
	ToVpcPeeringConnectionAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterOutput
}

func (*VpcPeeringConnectionAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (i *VpcPeeringConnectionAccepter) ToVpcPeeringConnectionAccepterOutput() VpcPeeringConnectionAccepterOutput {
	return i.ToVpcPeeringConnectionAccepterOutputWithContext(context.Background())
}

func (i *VpcPeeringConnectionAccepter) ToVpcPeeringConnectionAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterOutput)
}

// VpcPeeringConnectionAccepterArrayInput is an input type that accepts VpcPeeringConnectionAccepterArray and VpcPeeringConnectionAccepterArrayOutput values.
// You can construct a concrete instance of `VpcPeeringConnectionAccepterArrayInput` via:
//
//	VpcPeeringConnectionAccepterArray{ VpcPeeringConnectionAccepterArgs{...} }
type VpcPeeringConnectionAccepterArrayInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterArrayOutput() VpcPeeringConnectionAccepterArrayOutput
	ToVpcPeeringConnectionAccepterArrayOutputWithContext(context.Context) VpcPeeringConnectionAccepterArrayOutput
}

type VpcPeeringConnectionAccepterArray []VpcPeeringConnectionAccepterInput

func (VpcPeeringConnectionAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (i VpcPeeringConnectionAccepterArray) ToVpcPeeringConnectionAccepterArrayOutput() VpcPeeringConnectionAccepterArrayOutput {
	return i.ToVpcPeeringConnectionAccepterArrayOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionAccepterArray) ToVpcPeeringConnectionAccepterArrayOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterArrayOutput)
}

// VpcPeeringConnectionAccepterMapInput is an input type that accepts VpcPeeringConnectionAccepterMap and VpcPeeringConnectionAccepterMapOutput values.
// You can construct a concrete instance of `VpcPeeringConnectionAccepterMapInput` via:
//
//	VpcPeeringConnectionAccepterMap{ "key": VpcPeeringConnectionAccepterArgs{...} }
type VpcPeeringConnectionAccepterMapInput interface {
	pulumi.Input

	ToVpcPeeringConnectionAccepterMapOutput() VpcPeeringConnectionAccepterMapOutput
	ToVpcPeeringConnectionAccepterMapOutputWithContext(context.Context) VpcPeeringConnectionAccepterMapOutput
}

type VpcPeeringConnectionAccepterMap map[string]VpcPeeringConnectionAccepterInput

func (VpcPeeringConnectionAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (i VpcPeeringConnectionAccepterMap) ToVpcPeeringConnectionAccepterMapOutput() VpcPeeringConnectionAccepterMapOutput {
	return i.ToVpcPeeringConnectionAccepterMapOutputWithContext(context.Background())
}

func (i VpcPeeringConnectionAccepterMap) ToVpcPeeringConnectionAccepterMapOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionAccepterMapOutput)
}

type VpcPeeringConnectionAccepterOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (o VpcPeeringConnectionAccepterOutput) ToVpcPeeringConnectionAccepterOutput() VpcPeeringConnectionAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterOutput) ToVpcPeeringConnectionAccepterOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterOutput {
	return o
}

func (o VpcPeeringConnectionAccepterOutput) Accept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.BoolPtrOutput { return v.Accept }).(pulumi.BoolPtrOutput)
}

func (o VpcPeeringConnectionAccepterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) PeerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.PeerTenantId }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.PeerVpcId }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionAccepterOutput) VpcPeeringConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnectionAccepter) pulumi.StringOutput { return v.VpcPeeringConnectionId }).(pulumi.StringOutput)
}

type VpcPeeringConnectionAccepterArrayOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (o VpcPeeringConnectionAccepterArrayOutput) ToVpcPeeringConnectionAccepterArrayOutput() VpcPeeringConnectionAccepterArrayOutput {
	return o
}

func (o VpcPeeringConnectionAccepterArrayOutput) ToVpcPeeringConnectionAccepterArrayOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterArrayOutput {
	return o
}

func (o VpcPeeringConnectionAccepterArrayOutput) Index(i pulumi.IntInput) VpcPeeringConnectionAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcPeeringConnectionAccepter {
		return vs[0].([]*VpcPeeringConnectionAccepter)[vs[1].(int)]
	}).(VpcPeeringConnectionAccepterOutput)
}

type VpcPeeringConnectionAccepterMapOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcPeeringConnectionAccepter)(nil)).Elem()
}

func (o VpcPeeringConnectionAccepterMapOutput) ToVpcPeeringConnectionAccepterMapOutput() VpcPeeringConnectionAccepterMapOutput {
	return o
}

func (o VpcPeeringConnectionAccepterMapOutput) ToVpcPeeringConnectionAccepterMapOutputWithContext(ctx context.Context) VpcPeeringConnectionAccepterMapOutput {
	return o
}

func (o VpcPeeringConnectionAccepterMapOutput) MapIndex(k pulumi.StringInput) VpcPeeringConnectionAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcPeeringConnectionAccepter {
		return vs[0].(map[string]*VpcPeeringConnectionAccepter)[vs[1].(string)]
	}).(VpcPeeringConnectionAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionAccepterInput)(nil)).Elem(), &VpcPeeringConnectionAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionAccepterArrayInput)(nil)).Elem(), VpcPeeringConnectionAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionAccepterMapInput)(nil)).Elem(), VpcPeeringConnectionAccepterMap{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterArrayOutput{})
	pulumi.RegisterOutputType(VpcPeeringConnectionAccepterMapOutput{})
}
