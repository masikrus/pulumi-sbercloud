// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DmsKafkaUser struct {
	pulumi.CustomResourceState

	CreatedAt   pulumi.StringOutput    `pulumi:"createdAt"`
	DefaultApp  pulumi.BoolOutput      `pulumi:"defaultApp"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	InstanceId  pulumi.StringOutput    `pulumi:"instanceId"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Password    pulumi.StringOutput    `pulumi:"password"`
	Region      pulumi.StringOutput    `pulumi:"region"`
	Role        pulumi.StringOutput    `pulumi:"role"`
}

// NewDmsKafkaUser registers a new resource with the given unique name, arguments, and options.
func NewDmsKafkaUser(ctx *pulumi.Context,
	name string, args *DmsKafkaUserArgs, opts ...pulumi.ResourceOption) (*DmsKafkaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsKafkaUser
	err := ctx.RegisterResource("sbercloud:index/dmsKafkaUser:DmsKafkaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsKafkaUser gets an existing DmsKafkaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsKafkaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsKafkaUserState, opts ...pulumi.ResourceOption) (*DmsKafkaUser, error) {
	var resource DmsKafkaUser
	err := ctx.ReadResource("sbercloud:index/dmsKafkaUser:DmsKafkaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsKafkaUser resources.
type dmsKafkaUserState struct {
	CreatedAt   *string `pulumi:"createdAt"`
	DefaultApp  *bool   `pulumi:"defaultApp"`
	Description *string `pulumi:"description"`
	InstanceId  *string `pulumi:"instanceId"`
	Name        *string `pulumi:"name"`
	Password    *string `pulumi:"password"`
	Region      *string `pulumi:"region"`
	Role        *string `pulumi:"role"`
}

type DmsKafkaUserState struct {
	CreatedAt   pulumi.StringPtrInput
	DefaultApp  pulumi.BoolPtrInput
	Description pulumi.StringPtrInput
	InstanceId  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Password    pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Role        pulumi.StringPtrInput
}

func (DmsKafkaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaUserState)(nil)).Elem()
}

type dmsKafkaUserArgs struct {
	Description *string `pulumi:"description"`
	InstanceId  string  `pulumi:"instanceId"`
	Name        *string `pulumi:"name"`
	Password    string  `pulumi:"password"`
	Region      *string `pulumi:"region"`
}

// The set of arguments for constructing a DmsKafkaUser resource.
type DmsKafkaUserArgs struct {
	Description pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	Name        pulumi.StringPtrInput
	Password    pulumi.StringInput
	Region      pulumi.StringPtrInput
}

func (DmsKafkaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaUserArgs)(nil)).Elem()
}

type DmsKafkaUserInput interface {
	pulumi.Input

	ToDmsKafkaUserOutput() DmsKafkaUserOutput
	ToDmsKafkaUserOutputWithContext(ctx context.Context) DmsKafkaUserOutput
}

func (*DmsKafkaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaUser)(nil)).Elem()
}

func (i *DmsKafkaUser) ToDmsKafkaUserOutput() DmsKafkaUserOutput {
	return i.ToDmsKafkaUserOutputWithContext(context.Background())
}

func (i *DmsKafkaUser) ToDmsKafkaUserOutputWithContext(ctx context.Context) DmsKafkaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaUserOutput)
}

// DmsKafkaUserArrayInput is an input type that accepts DmsKafkaUserArray and DmsKafkaUserArrayOutput values.
// You can construct a concrete instance of `DmsKafkaUserArrayInput` via:
//
//	DmsKafkaUserArray{ DmsKafkaUserArgs{...} }
type DmsKafkaUserArrayInput interface {
	pulumi.Input

	ToDmsKafkaUserArrayOutput() DmsKafkaUserArrayOutput
	ToDmsKafkaUserArrayOutputWithContext(context.Context) DmsKafkaUserArrayOutput
}

type DmsKafkaUserArray []DmsKafkaUserInput

func (DmsKafkaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaUser)(nil)).Elem()
}

func (i DmsKafkaUserArray) ToDmsKafkaUserArrayOutput() DmsKafkaUserArrayOutput {
	return i.ToDmsKafkaUserArrayOutputWithContext(context.Background())
}

func (i DmsKafkaUserArray) ToDmsKafkaUserArrayOutputWithContext(ctx context.Context) DmsKafkaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaUserArrayOutput)
}

// DmsKafkaUserMapInput is an input type that accepts DmsKafkaUserMap and DmsKafkaUserMapOutput values.
// You can construct a concrete instance of `DmsKafkaUserMapInput` via:
//
//	DmsKafkaUserMap{ "key": DmsKafkaUserArgs{...} }
type DmsKafkaUserMapInput interface {
	pulumi.Input

	ToDmsKafkaUserMapOutput() DmsKafkaUserMapOutput
	ToDmsKafkaUserMapOutputWithContext(context.Context) DmsKafkaUserMapOutput
}

type DmsKafkaUserMap map[string]DmsKafkaUserInput

func (DmsKafkaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaUser)(nil)).Elem()
}

func (i DmsKafkaUserMap) ToDmsKafkaUserMapOutput() DmsKafkaUserMapOutput {
	return i.ToDmsKafkaUserMapOutputWithContext(context.Background())
}

func (i DmsKafkaUserMap) ToDmsKafkaUserMapOutputWithContext(ctx context.Context) DmsKafkaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaUserMapOutput)
}

type DmsKafkaUserOutput struct{ *pulumi.OutputState }

func (DmsKafkaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaUser)(nil)).Elem()
}

func (o DmsKafkaUserOutput) ToDmsKafkaUserOutput() DmsKafkaUserOutput {
	return o
}

func (o DmsKafkaUserOutput) ToDmsKafkaUserOutputWithContext(ctx context.Context) DmsKafkaUserOutput {
	return o
}

func (o DmsKafkaUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DmsKafkaUserOutput) DefaultApp() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.BoolOutput { return v.DefaultApp }).(pulumi.BoolOutput)
}

func (o DmsKafkaUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DmsKafkaUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DmsKafkaUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DmsKafkaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o DmsKafkaUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DmsKafkaUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaUser) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type DmsKafkaUserArrayOutput struct{ *pulumi.OutputState }

func (DmsKafkaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaUser)(nil)).Elem()
}

func (o DmsKafkaUserArrayOutput) ToDmsKafkaUserArrayOutput() DmsKafkaUserArrayOutput {
	return o
}

func (o DmsKafkaUserArrayOutput) ToDmsKafkaUserArrayOutputWithContext(ctx context.Context) DmsKafkaUserArrayOutput {
	return o
}

func (o DmsKafkaUserArrayOutput) Index(i pulumi.IntInput) DmsKafkaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsKafkaUser {
		return vs[0].([]*DmsKafkaUser)[vs[1].(int)]
	}).(DmsKafkaUserOutput)
}

type DmsKafkaUserMapOutput struct{ *pulumi.OutputState }

func (DmsKafkaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaUser)(nil)).Elem()
}

func (o DmsKafkaUserMapOutput) ToDmsKafkaUserMapOutput() DmsKafkaUserMapOutput {
	return o
}

func (o DmsKafkaUserMapOutput) ToDmsKafkaUserMapOutputWithContext(ctx context.Context) DmsKafkaUserMapOutput {
	return o
}

func (o DmsKafkaUserMapOutput) MapIndex(k pulumi.StringInput) DmsKafkaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsKafkaUser {
		return vs[0].(map[string]*DmsKafkaUser)[vs[1].(string)]
	}).(DmsKafkaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaUserInput)(nil)).Elem(), &DmsKafkaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaUserArrayInput)(nil)).Elem(), DmsKafkaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaUserMapInput)(nil)).Elem(), DmsKafkaUserMap{})
	pulumi.RegisterOutputType(DmsKafkaUserOutput{})
	pulumi.RegisterOutputType(DmsKafkaUserArrayOutput{})
	pulumi.RegisterOutputType(DmsKafkaUserMapOutput{})
}
