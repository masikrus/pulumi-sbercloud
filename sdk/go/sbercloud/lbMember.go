// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LbMember struct {
	pulumi.CustomResourceState

	Address pulumi.StringOutput `pulumi:"address"`
	// schema: Deprecated
	AdminStateUp        pulumi.BoolPtrOutput `pulumi:"adminStateUp"`
	BackendServerStatus pulumi.BoolOutput    `pulumi:"backendServerStatus"`
	Name                pulumi.StringOutput  `pulumi:"name"`
	OperatingStatus     pulumi.StringOutput  `pulumi:"operatingStatus"`
	PoolId              pulumi.StringOutput  `pulumi:"poolId"`
	ProtocolPort        pulumi.IntOutput     `pulumi:"protocolPort"`
	Region              pulumi.StringOutput  `pulumi:"region"`
	// the IPv4 subnet ID of the subnet in which to access the member
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	Weight   pulumi.IntOutput    `pulumi:"weight"`
}

// NewLbMember registers a new resource with the given unique name, arguments, and options.
func NewLbMember(ctx *pulumi.Context,
	name string, args *LbMemberArgs, opts ...pulumi.ResourceOption) (*LbMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.ProtocolPort == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolPort'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbMember
	err := ctx.RegisterResource("sbercloud:index/lbMember:LbMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbMember gets an existing LbMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbMemberState, opts ...pulumi.ResourceOption) (*LbMember, error) {
	var resource LbMember
	err := ctx.ReadResource("sbercloud:index/lbMember:LbMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbMember resources.
type lbMemberState struct {
	Address *string `pulumi:"address"`
	// schema: Deprecated
	AdminStateUp        *bool   `pulumi:"adminStateUp"`
	BackendServerStatus *bool   `pulumi:"backendServerStatus"`
	Name                *string `pulumi:"name"`
	OperatingStatus     *string `pulumi:"operatingStatus"`
	PoolId              *string `pulumi:"poolId"`
	ProtocolPort        *int    `pulumi:"protocolPort"`
	Region              *string `pulumi:"region"`
	// the IPv4 subnet ID of the subnet in which to access the member
	SubnetId *string `pulumi:"subnetId"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Weight   *int    `pulumi:"weight"`
}

type LbMemberState struct {
	Address pulumi.StringPtrInput
	// schema: Deprecated
	AdminStateUp        pulumi.BoolPtrInput
	BackendServerStatus pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	OperatingStatus     pulumi.StringPtrInput
	PoolId              pulumi.StringPtrInput
	ProtocolPort        pulumi.IntPtrInput
	Region              pulumi.StringPtrInput
	// the IPv4 subnet ID of the subnet in which to access the member
	SubnetId pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Weight   pulumi.IntPtrInput
}

func (LbMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbMemberState)(nil)).Elem()
}

type lbMemberArgs struct {
	Address string `pulumi:"address"`
	// schema: Deprecated
	AdminStateUp *bool   `pulumi:"adminStateUp"`
	Name         *string `pulumi:"name"`
	PoolId       string  `pulumi:"poolId"`
	ProtocolPort int     `pulumi:"protocolPort"`
	Region       *string `pulumi:"region"`
	// the IPv4 subnet ID of the subnet in which to access the member
	SubnetId string `pulumi:"subnetId"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Weight   *int    `pulumi:"weight"`
}

// The set of arguments for constructing a LbMember resource.
type LbMemberArgs struct {
	Address pulumi.StringInput
	// schema: Deprecated
	AdminStateUp pulumi.BoolPtrInput
	Name         pulumi.StringPtrInput
	PoolId       pulumi.StringInput
	ProtocolPort pulumi.IntInput
	Region       pulumi.StringPtrInput
	// the IPv4 subnet ID of the subnet in which to access the member
	SubnetId pulumi.StringInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Weight   pulumi.IntPtrInput
}

func (LbMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbMemberArgs)(nil)).Elem()
}

type LbMemberInput interface {
	pulumi.Input

	ToLbMemberOutput() LbMemberOutput
	ToLbMemberOutputWithContext(ctx context.Context) LbMemberOutput
}

func (*LbMember) ElementType() reflect.Type {
	return reflect.TypeOf((**LbMember)(nil)).Elem()
}

func (i *LbMember) ToLbMemberOutput() LbMemberOutput {
	return i.ToLbMemberOutputWithContext(context.Background())
}

func (i *LbMember) ToLbMemberOutputWithContext(ctx context.Context) LbMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMemberOutput)
}

// LbMemberArrayInput is an input type that accepts LbMemberArray and LbMemberArrayOutput values.
// You can construct a concrete instance of `LbMemberArrayInput` via:
//
//	LbMemberArray{ LbMemberArgs{...} }
type LbMemberArrayInput interface {
	pulumi.Input

	ToLbMemberArrayOutput() LbMemberArrayOutput
	ToLbMemberArrayOutputWithContext(context.Context) LbMemberArrayOutput
}

type LbMemberArray []LbMemberInput

func (LbMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbMember)(nil)).Elem()
}

func (i LbMemberArray) ToLbMemberArrayOutput() LbMemberArrayOutput {
	return i.ToLbMemberArrayOutputWithContext(context.Background())
}

func (i LbMemberArray) ToLbMemberArrayOutputWithContext(ctx context.Context) LbMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMemberArrayOutput)
}

// LbMemberMapInput is an input type that accepts LbMemberMap and LbMemberMapOutput values.
// You can construct a concrete instance of `LbMemberMapInput` via:
//
//	LbMemberMap{ "key": LbMemberArgs{...} }
type LbMemberMapInput interface {
	pulumi.Input

	ToLbMemberMapOutput() LbMemberMapOutput
	ToLbMemberMapOutputWithContext(context.Context) LbMemberMapOutput
}

type LbMemberMap map[string]LbMemberInput

func (LbMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbMember)(nil)).Elem()
}

func (i LbMemberMap) ToLbMemberMapOutput() LbMemberMapOutput {
	return i.ToLbMemberMapOutputWithContext(context.Background())
}

func (i LbMemberMap) ToLbMemberMapOutputWithContext(ctx context.Context) LbMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMemberMapOutput)
}

type LbMemberOutput struct{ *pulumi.OutputState }

func (LbMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbMember)(nil)).Elem()
}

func (o LbMemberOutput) ToLbMemberOutput() LbMemberOutput {
	return o
}

func (o LbMemberOutput) ToLbMemberOutputWithContext(ctx context.Context) LbMemberOutput {
	return o
}

func (o LbMemberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o LbMemberOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbMember) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o LbMemberOutput) BackendServerStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v *LbMember) pulumi.BoolOutput { return v.BackendServerStatus }).(pulumi.BoolOutput)
}

func (o LbMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LbMemberOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

func (o LbMemberOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

func (o LbMemberOutput) ProtocolPort() pulumi.IntOutput {
	return o.ApplyT(func(v *LbMember) pulumi.IntOutput { return v.ProtocolPort }).(pulumi.IntOutput)
}

func (o LbMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// the IPv4 subnet ID of the subnet in which to access the member
func (o LbMemberOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o LbMemberOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMember) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o LbMemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *LbMember) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type LbMemberArrayOutput struct{ *pulumi.OutputState }

func (LbMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbMember)(nil)).Elem()
}

func (o LbMemberArrayOutput) ToLbMemberArrayOutput() LbMemberArrayOutput {
	return o
}

func (o LbMemberArrayOutput) ToLbMemberArrayOutputWithContext(ctx context.Context) LbMemberArrayOutput {
	return o
}

func (o LbMemberArrayOutput) Index(i pulumi.IntInput) LbMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbMember {
		return vs[0].([]*LbMember)[vs[1].(int)]
	}).(LbMemberOutput)
}

type LbMemberMapOutput struct{ *pulumi.OutputState }

func (LbMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbMember)(nil)).Elem()
}

func (o LbMemberMapOutput) ToLbMemberMapOutput() LbMemberMapOutput {
	return o
}

func (o LbMemberMapOutput) ToLbMemberMapOutputWithContext(ctx context.Context) LbMemberMapOutput {
	return o
}

func (o LbMemberMapOutput) MapIndex(k pulumi.StringInput) LbMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbMember {
		return vs[0].(map[string]*LbMember)[vs[1].(string)]
	}).(LbMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbMemberInput)(nil)).Elem(), &LbMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMemberArrayInput)(nil)).Elem(), LbMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMemberMapInput)(nil)).Elem(), LbMemberMap{})
	pulumi.RegisterOutputType(LbMemberOutput{})
	pulumi.RegisterOutputType(LbMemberArrayOutput{})
	pulumi.RegisterOutputType(LbMemberMapOutput{})
}
