// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetCceClusterCertificate(ctx *pulumi.Context, args *GetCceClusterCertificateArgs, opts ...pulumi.InvokeOption) (*GetCceClusterCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCceClusterCertificateResult
	err := ctx.Invoke("sbercloud:index/getCceClusterCertificate:getCceClusterCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCceClusterCertificate.
type GetCceClusterCertificateArgs struct {
	ClusterId string  `pulumi:"clusterId"`
	Duration  int     `pulumi:"duration"`
	Region    *string `pulumi:"region"`
}

// A collection of values returned by getCceClusterCertificate.
type GetCceClusterCertificateResult struct {
	ClusterId      string                            `pulumi:"clusterId"`
	Clusters       []GetCceClusterCertificateCluster `pulumi:"clusters"`
	Contexts       []GetCceClusterCertificateContext `pulumi:"contexts"`
	CurrentContext string                            `pulumi:"currentContext"`
	Duration       int                               `pulumi:"duration"`
	// The provider-assigned unique ID for this managed resource.
	Id            string                         `pulumi:"id"`
	KubeConfigRaw string                         `pulumi:"kubeConfigRaw"`
	Region        string                         `pulumi:"region"`
	Users         []GetCceClusterCertificateUser `pulumi:"users"`
}

func GetCceClusterCertificateOutput(ctx *pulumi.Context, args GetCceClusterCertificateOutputArgs, opts ...pulumi.InvokeOption) GetCceClusterCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCceClusterCertificateResultOutput, error) {
			args := v.(GetCceClusterCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getCceClusterCertificate:getCceClusterCertificate", args, GetCceClusterCertificateResultOutput{}, options).(GetCceClusterCertificateResultOutput), nil
		}).(GetCceClusterCertificateResultOutput)
}

// A collection of arguments for invoking getCceClusterCertificate.
type GetCceClusterCertificateOutputArgs struct {
	ClusterId pulumi.StringInput    `pulumi:"clusterId"`
	Duration  pulumi.IntInput       `pulumi:"duration"`
	Region    pulumi.StringPtrInput `pulumi:"region"`
}

func (GetCceClusterCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCceClusterCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCceClusterCertificate.
type GetCceClusterCertificateResultOutput struct{ *pulumi.OutputState }

func (GetCceClusterCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCceClusterCertificateResult)(nil)).Elem()
}

func (o GetCceClusterCertificateResultOutput) ToGetCceClusterCertificateResultOutput() GetCceClusterCertificateResultOutput {
	return o
}

func (o GetCceClusterCertificateResultOutput) ToGetCceClusterCertificateResultOutputWithContext(ctx context.Context) GetCceClusterCertificateResultOutput {
	return o
}

func (o GetCceClusterCertificateResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o GetCceClusterCertificateResultOutput) Clusters() GetCceClusterCertificateClusterArrayOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) []GetCceClusterCertificateCluster { return v.Clusters }).(GetCceClusterCertificateClusterArrayOutput)
}

func (o GetCceClusterCertificateResultOutput) Contexts() GetCceClusterCertificateContextArrayOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) []GetCceClusterCertificateContext { return v.Contexts }).(GetCceClusterCertificateContextArrayOutput)
}

func (o GetCceClusterCertificateResultOutput) CurrentContext() pulumi.StringOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) string { return v.CurrentContext }).(pulumi.StringOutput)
}

func (o GetCceClusterCertificateResultOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) int { return v.Duration }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCceClusterCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCceClusterCertificateResultOutput) KubeConfigRaw() pulumi.StringOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) string { return v.KubeConfigRaw }).(pulumi.StringOutput)
}

func (o GetCceClusterCertificateResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetCceClusterCertificateResultOutput) Users() GetCceClusterCertificateUserArrayOutput {
	return o.ApplyT(func(v GetCceClusterCertificateResult) []GetCceClusterCertificateUser { return v.Users }).(GetCceClusterCertificateUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCceClusterCertificateResultOutput{})
}
