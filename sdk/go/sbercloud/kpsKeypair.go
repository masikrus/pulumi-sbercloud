// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KpsKeypair struct {
	pulumi.CustomResourceState

	CreatedAt      pulumi.StringOutput    `pulumi:"createdAt"`
	Description    pulumi.StringPtrOutput `pulumi:"description"`
	EncryptionType pulumi.StringOutput    `pulumi:"encryptionType"`
	Fingerprint    pulumi.StringOutput    `pulumi:"fingerprint"`
	IsManaged      pulumi.BoolOutput      `pulumi:"isManaged"`
	KeyFile        pulumi.StringOutput    `pulumi:"keyFile"`
	KmsKeyId       pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	KmsKeyName     pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	PrivateKey     pulumi.StringPtrOutput `pulumi:"privateKey"`
	PublicKey      pulumi.StringOutput    `pulumi:"publicKey"`
	Region         pulumi.StringOutput    `pulumi:"region"`
	Scope          pulumi.StringOutput    `pulumi:"scope"`
	UserId         pulumi.StringOutput    `pulumi:"userId"`
}

// NewKpsKeypair registers a new resource with the given unique name, arguments, and options.
func NewKpsKeypair(ctx *pulumi.Context,
	name string, args *KpsKeypairArgs, opts ...pulumi.ResourceOption) (*KpsKeypair, error) {
	if args == nil {
		args = &KpsKeypairArgs{}
	}

	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KpsKeypair
	err := ctx.RegisterResource("sbercloud:index/kpsKeypair:KpsKeypair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKpsKeypair gets an existing KpsKeypair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKpsKeypair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KpsKeypairState, opts ...pulumi.ResourceOption) (*KpsKeypair, error) {
	var resource KpsKeypair
	err := ctx.ReadResource("sbercloud:index/kpsKeypair:KpsKeypair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KpsKeypair resources.
type kpsKeypairState struct {
	CreatedAt      *string `pulumi:"createdAt"`
	Description    *string `pulumi:"description"`
	EncryptionType *string `pulumi:"encryptionType"`
	Fingerprint    *string `pulumi:"fingerprint"`
	IsManaged      *bool   `pulumi:"isManaged"`
	KeyFile        *string `pulumi:"keyFile"`
	KmsKeyId       *string `pulumi:"kmsKeyId"`
	KmsKeyName     *string `pulumi:"kmsKeyName"`
	Name           *string `pulumi:"name"`
	PrivateKey     *string `pulumi:"privateKey"`
	PublicKey      *string `pulumi:"publicKey"`
	Region         *string `pulumi:"region"`
	Scope          *string `pulumi:"scope"`
	UserId         *string `pulumi:"userId"`
}

type KpsKeypairState struct {
	CreatedAt      pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	EncryptionType pulumi.StringPtrInput
	Fingerprint    pulumi.StringPtrInput
	IsManaged      pulumi.BoolPtrInput
	KeyFile        pulumi.StringPtrInput
	KmsKeyId       pulumi.StringPtrInput
	KmsKeyName     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	PrivateKey     pulumi.StringPtrInput
	PublicKey      pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
	Scope          pulumi.StringPtrInput
	UserId         pulumi.StringPtrInput
}

func (KpsKeypairState) ElementType() reflect.Type {
	return reflect.TypeOf((*kpsKeypairState)(nil)).Elem()
}

type kpsKeypairArgs struct {
	Description    *string `pulumi:"description"`
	EncryptionType *string `pulumi:"encryptionType"`
	KeyFile        *string `pulumi:"keyFile"`
	KmsKeyId       *string `pulumi:"kmsKeyId"`
	KmsKeyName     *string `pulumi:"kmsKeyName"`
	Name           *string `pulumi:"name"`
	PrivateKey     *string `pulumi:"privateKey"`
	PublicKey      *string `pulumi:"publicKey"`
	Region         *string `pulumi:"region"`
	Scope          *string `pulumi:"scope"`
	UserId         *string `pulumi:"userId"`
}

// The set of arguments for constructing a KpsKeypair resource.
type KpsKeypairArgs struct {
	Description    pulumi.StringPtrInput
	EncryptionType pulumi.StringPtrInput
	KeyFile        pulumi.StringPtrInput
	KmsKeyId       pulumi.StringPtrInput
	KmsKeyName     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	PrivateKey     pulumi.StringPtrInput
	PublicKey      pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
	Scope          pulumi.StringPtrInput
	UserId         pulumi.StringPtrInput
}

func (KpsKeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kpsKeypairArgs)(nil)).Elem()
}

type KpsKeypairInput interface {
	pulumi.Input

	ToKpsKeypairOutput() KpsKeypairOutput
	ToKpsKeypairOutputWithContext(ctx context.Context) KpsKeypairOutput
}

func (*KpsKeypair) ElementType() reflect.Type {
	return reflect.TypeOf((**KpsKeypair)(nil)).Elem()
}

func (i *KpsKeypair) ToKpsKeypairOutput() KpsKeypairOutput {
	return i.ToKpsKeypairOutputWithContext(context.Background())
}

func (i *KpsKeypair) ToKpsKeypairOutputWithContext(ctx context.Context) KpsKeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairOutput)
}

// KpsKeypairArrayInput is an input type that accepts KpsKeypairArray and KpsKeypairArrayOutput values.
// You can construct a concrete instance of `KpsKeypairArrayInput` via:
//
//	KpsKeypairArray{ KpsKeypairArgs{...} }
type KpsKeypairArrayInput interface {
	pulumi.Input

	ToKpsKeypairArrayOutput() KpsKeypairArrayOutput
	ToKpsKeypairArrayOutputWithContext(context.Context) KpsKeypairArrayOutput
}

type KpsKeypairArray []KpsKeypairInput

func (KpsKeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KpsKeypair)(nil)).Elem()
}

func (i KpsKeypairArray) ToKpsKeypairArrayOutput() KpsKeypairArrayOutput {
	return i.ToKpsKeypairArrayOutputWithContext(context.Background())
}

func (i KpsKeypairArray) ToKpsKeypairArrayOutputWithContext(ctx context.Context) KpsKeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairArrayOutput)
}

// KpsKeypairMapInput is an input type that accepts KpsKeypairMap and KpsKeypairMapOutput values.
// You can construct a concrete instance of `KpsKeypairMapInput` via:
//
//	KpsKeypairMap{ "key": KpsKeypairArgs{...} }
type KpsKeypairMapInput interface {
	pulumi.Input

	ToKpsKeypairMapOutput() KpsKeypairMapOutput
	ToKpsKeypairMapOutputWithContext(context.Context) KpsKeypairMapOutput
}

type KpsKeypairMap map[string]KpsKeypairInput

func (KpsKeypairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KpsKeypair)(nil)).Elem()
}

func (i KpsKeypairMap) ToKpsKeypairMapOutput() KpsKeypairMapOutput {
	return i.ToKpsKeypairMapOutputWithContext(context.Background())
}

func (i KpsKeypairMap) ToKpsKeypairMapOutputWithContext(ctx context.Context) KpsKeypairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairMapOutput)
}

type KpsKeypairOutput struct{ *pulumi.OutputState }

func (KpsKeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpsKeypair)(nil)).Elem()
}

func (o KpsKeypairOutput) ToKpsKeypairOutput() KpsKeypairOutput {
	return o
}

func (o KpsKeypairOutput) ToKpsKeypairOutputWithContext(ctx context.Context) KpsKeypairOutput {
	return o
}

func (o KpsKeypairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KpsKeypairOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.EncryptionType }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) IsManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.BoolOutput { return v.IsManaged }).(pulumi.BoolOutput)
}

func (o KpsKeypairOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.KeyFile }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o KpsKeypairOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

func (o KpsKeypairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o KpsKeypairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

func (o KpsKeypairOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypair) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type KpsKeypairArrayOutput struct{ *pulumi.OutputState }

func (KpsKeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KpsKeypair)(nil)).Elem()
}

func (o KpsKeypairArrayOutput) ToKpsKeypairArrayOutput() KpsKeypairArrayOutput {
	return o
}

func (o KpsKeypairArrayOutput) ToKpsKeypairArrayOutputWithContext(ctx context.Context) KpsKeypairArrayOutput {
	return o
}

func (o KpsKeypairArrayOutput) Index(i pulumi.IntInput) KpsKeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KpsKeypair {
		return vs[0].([]*KpsKeypair)[vs[1].(int)]
	}).(KpsKeypairOutput)
}

type KpsKeypairMapOutput struct{ *pulumi.OutputState }

func (KpsKeypairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KpsKeypair)(nil)).Elem()
}

func (o KpsKeypairMapOutput) ToKpsKeypairMapOutput() KpsKeypairMapOutput {
	return o
}

func (o KpsKeypairMapOutput) ToKpsKeypairMapOutputWithContext(ctx context.Context) KpsKeypairMapOutput {
	return o
}

func (o KpsKeypairMapOutput) MapIndex(k pulumi.StringInput) KpsKeypairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KpsKeypair {
		return vs[0].(map[string]*KpsKeypair)[vs[1].(string)]
	}).(KpsKeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairInput)(nil)).Elem(), &KpsKeypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairArrayInput)(nil)).Elem(), KpsKeypairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairMapInput)(nil)).Elem(), KpsKeypairMap{})
	pulumi.RegisterOutputType(KpsKeypairOutput{})
	pulumi.RegisterOutputType(KpsKeypairArrayOutput{})
	pulumi.RegisterOutputType(KpsKeypairMapOutput{})
}
