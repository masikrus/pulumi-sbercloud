// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkingSecgroupRule struct {
	pulumi.CustomResourceState

	Action               pulumi.StringOutput    `pulumi:"action"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	Direction            pulumi.StringOutput    `pulumi:"direction"`
	Ethertype            pulumi.StringOutput    `pulumi:"ethertype"`
	PortRangeMax         pulumi.IntOutput       `pulumi:"portRangeMax"`
	PortRangeMin         pulumi.IntOutput       `pulumi:"portRangeMin"`
	Ports                pulumi.StringOutput    `pulumi:"ports"`
	Priority             pulumi.IntOutput       `pulumi:"priority"`
	Protocol             pulumi.StringOutput    `pulumi:"protocol"`
	Region               pulumi.StringOutput    `pulumi:"region"`
	RemoteAddressGroupId pulumi.StringOutput    `pulumi:"remoteAddressGroupId"`
	RemoteGroupId        pulumi.StringOutput    `pulumi:"remoteGroupId"`
	RemoteIpPrefix       pulumi.StringOutput    `pulumi:"remoteIpPrefix"`
	SecurityGroupId      pulumi.StringOutput    `pulumi:"securityGroupId"`
}

// NewNetworkingSecgroupRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkingSecgroupRule(ctx *pulumi.Context,
	name string, args *NetworkingSecgroupRuleArgs, opts ...pulumi.ResourceOption) (*NetworkingSecgroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.Ethertype == nil {
		return nil, errors.New("invalid value for required argument 'Ethertype'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkingSecgroupRule
	err := ctx.RegisterResource("sbercloud:index/networkingSecgroupRule:NetworkingSecgroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingSecgroupRule gets an existing NetworkingSecgroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingSecgroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingSecgroupRuleState, opts ...pulumi.ResourceOption) (*NetworkingSecgroupRule, error) {
	var resource NetworkingSecgroupRule
	err := ctx.ReadResource("sbercloud:index/networkingSecgroupRule:NetworkingSecgroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingSecgroupRule resources.
type networkingSecgroupRuleState struct {
	Action               *string `pulumi:"action"`
	Description          *string `pulumi:"description"`
	Direction            *string `pulumi:"direction"`
	Ethertype            *string `pulumi:"ethertype"`
	PortRangeMax         *int    `pulumi:"portRangeMax"`
	PortRangeMin         *int    `pulumi:"portRangeMin"`
	Ports                *string `pulumi:"ports"`
	Priority             *int    `pulumi:"priority"`
	Protocol             *string `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	RemoteAddressGroupId *string `pulumi:"remoteAddressGroupId"`
	RemoteGroupId        *string `pulumi:"remoteGroupId"`
	RemoteIpPrefix       *string `pulumi:"remoteIpPrefix"`
	SecurityGroupId      *string `pulumi:"securityGroupId"`
}

type NetworkingSecgroupRuleState struct {
	Action               pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	Direction            pulumi.StringPtrInput
	Ethertype            pulumi.StringPtrInput
	PortRangeMax         pulumi.IntPtrInput
	PortRangeMin         pulumi.IntPtrInput
	Ports                pulumi.StringPtrInput
	Priority             pulumi.IntPtrInput
	Protocol             pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	RemoteAddressGroupId pulumi.StringPtrInput
	RemoteGroupId        pulumi.StringPtrInput
	RemoteIpPrefix       pulumi.StringPtrInput
	SecurityGroupId      pulumi.StringPtrInput
}

func (NetworkingSecgroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingSecgroupRuleState)(nil)).Elem()
}

type networkingSecgroupRuleArgs struct {
	Action               *string `pulumi:"action"`
	Description          *string `pulumi:"description"`
	Direction            string  `pulumi:"direction"`
	Ethertype            string  `pulumi:"ethertype"`
	PortRangeMax         *int    `pulumi:"portRangeMax"`
	PortRangeMin         *int    `pulumi:"portRangeMin"`
	Ports                *string `pulumi:"ports"`
	Priority             *int    `pulumi:"priority"`
	Protocol             *string `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	RemoteAddressGroupId *string `pulumi:"remoteAddressGroupId"`
	RemoteGroupId        *string `pulumi:"remoteGroupId"`
	RemoteIpPrefix       *string `pulumi:"remoteIpPrefix"`
	SecurityGroupId      string  `pulumi:"securityGroupId"`
}

// The set of arguments for constructing a NetworkingSecgroupRule resource.
type NetworkingSecgroupRuleArgs struct {
	Action               pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	Direction            pulumi.StringInput
	Ethertype            pulumi.StringInput
	PortRangeMax         pulumi.IntPtrInput
	PortRangeMin         pulumi.IntPtrInput
	Ports                pulumi.StringPtrInput
	Priority             pulumi.IntPtrInput
	Protocol             pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	RemoteAddressGroupId pulumi.StringPtrInput
	RemoteGroupId        pulumi.StringPtrInput
	RemoteIpPrefix       pulumi.StringPtrInput
	SecurityGroupId      pulumi.StringInput
}

func (NetworkingSecgroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingSecgroupRuleArgs)(nil)).Elem()
}

type NetworkingSecgroupRuleInput interface {
	pulumi.Input

	ToNetworkingSecgroupRuleOutput() NetworkingSecgroupRuleOutput
	ToNetworkingSecgroupRuleOutputWithContext(ctx context.Context) NetworkingSecgroupRuleOutput
}

func (*NetworkingSecgroupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingSecgroupRule)(nil)).Elem()
}

func (i *NetworkingSecgroupRule) ToNetworkingSecgroupRuleOutput() NetworkingSecgroupRuleOutput {
	return i.ToNetworkingSecgroupRuleOutputWithContext(context.Background())
}

func (i *NetworkingSecgroupRule) ToNetworkingSecgroupRuleOutputWithContext(ctx context.Context) NetworkingSecgroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingSecgroupRuleOutput)
}

// NetworkingSecgroupRuleArrayInput is an input type that accepts NetworkingSecgroupRuleArray and NetworkingSecgroupRuleArrayOutput values.
// You can construct a concrete instance of `NetworkingSecgroupRuleArrayInput` via:
//
//	NetworkingSecgroupRuleArray{ NetworkingSecgroupRuleArgs{...} }
type NetworkingSecgroupRuleArrayInput interface {
	pulumi.Input

	ToNetworkingSecgroupRuleArrayOutput() NetworkingSecgroupRuleArrayOutput
	ToNetworkingSecgroupRuleArrayOutputWithContext(context.Context) NetworkingSecgroupRuleArrayOutput
}

type NetworkingSecgroupRuleArray []NetworkingSecgroupRuleInput

func (NetworkingSecgroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingSecgroupRule)(nil)).Elem()
}

func (i NetworkingSecgroupRuleArray) ToNetworkingSecgroupRuleArrayOutput() NetworkingSecgroupRuleArrayOutput {
	return i.ToNetworkingSecgroupRuleArrayOutputWithContext(context.Background())
}

func (i NetworkingSecgroupRuleArray) ToNetworkingSecgroupRuleArrayOutputWithContext(ctx context.Context) NetworkingSecgroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingSecgroupRuleArrayOutput)
}

// NetworkingSecgroupRuleMapInput is an input type that accepts NetworkingSecgroupRuleMap and NetworkingSecgroupRuleMapOutput values.
// You can construct a concrete instance of `NetworkingSecgroupRuleMapInput` via:
//
//	NetworkingSecgroupRuleMap{ "key": NetworkingSecgroupRuleArgs{...} }
type NetworkingSecgroupRuleMapInput interface {
	pulumi.Input

	ToNetworkingSecgroupRuleMapOutput() NetworkingSecgroupRuleMapOutput
	ToNetworkingSecgroupRuleMapOutputWithContext(context.Context) NetworkingSecgroupRuleMapOutput
}

type NetworkingSecgroupRuleMap map[string]NetworkingSecgroupRuleInput

func (NetworkingSecgroupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingSecgroupRule)(nil)).Elem()
}

func (i NetworkingSecgroupRuleMap) ToNetworkingSecgroupRuleMapOutput() NetworkingSecgroupRuleMapOutput {
	return i.ToNetworkingSecgroupRuleMapOutputWithContext(context.Background())
}

func (i NetworkingSecgroupRuleMap) ToNetworkingSecgroupRuleMapOutputWithContext(ctx context.Context) NetworkingSecgroupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingSecgroupRuleMapOutput)
}

type NetworkingSecgroupRuleOutput struct{ *pulumi.OutputState }

func (NetworkingSecgroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingSecgroupRule)(nil)).Elem()
}

func (o NetworkingSecgroupRuleOutput) ToNetworkingSecgroupRuleOutput() NetworkingSecgroupRuleOutput {
	return o
}

func (o NetworkingSecgroupRuleOutput) ToNetworkingSecgroupRuleOutputWithContext(ctx context.Context) NetworkingSecgroupRuleOutput {
	return o
}

func (o NetworkingSecgroupRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworkingSecgroupRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) Ethertype() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.Ethertype }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) PortRangeMax() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.IntOutput { return v.PortRangeMax }).(pulumi.IntOutput)
}

func (o NetworkingSecgroupRuleOutput) PortRangeMin() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.IntOutput { return v.PortRangeMin }).(pulumi.IntOutput)
}

func (o NetworkingSecgroupRuleOutput) Ports() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.Ports }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o NetworkingSecgroupRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) RemoteAddressGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.RemoteAddressGroupId }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) RemoteGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.RemoteGroupId }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) RemoteIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.RemoteIpPrefix }).(pulumi.StringOutput)
}

func (o NetworkingSecgroupRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingSecgroupRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

type NetworkingSecgroupRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkingSecgroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingSecgroupRule)(nil)).Elem()
}

func (o NetworkingSecgroupRuleArrayOutput) ToNetworkingSecgroupRuleArrayOutput() NetworkingSecgroupRuleArrayOutput {
	return o
}

func (o NetworkingSecgroupRuleArrayOutput) ToNetworkingSecgroupRuleArrayOutputWithContext(ctx context.Context) NetworkingSecgroupRuleArrayOutput {
	return o
}

func (o NetworkingSecgroupRuleArrayOutput) Index(i pulumi.IntInput) NetworkingSecgroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingSecgroupRule {
		return vs[0].([]*NetworkingSecgroupRule)[vs[1].(int)]
	}).(NetworkingSecgroupRuleOutput)
}

type NetworkingSecgroupRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkingSecgroupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingSecgroupRule)(nil)).Elem()
}

func (o NetworkingSecgroupRuleMapOutput) ToNetworkingSecgroupRuleMapOutput() NetworkingSecgroupRuleMapOutput {
	return o
}

func (o NetworkingSecgroupRuleMapOutput) ToNetworkingSecgroupRuleMapOutputWithContext(ctx context.Context) NetworkingSecgroupRuleMapOutput {
	return o
}

func (o NetworkingSecgroupRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkingSecgroupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingSecgroupRule {
		return vs[0].(map[string]*NetworkingSecgroupRule)[vs[1].(string)]
	}).(NetworkingSecgroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingSecgroupRuleInput)(nil)).Elem(), &NetworkingSecgroupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingSecgroupRuleArrayInput)(nil)).Elem(), NetworkingSecgroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingSecgroupRuleMapInput)(nil)).Elem(), NetworkingSecgroupRuleMap{})
	pulumi.RegisterOutputType(NetworkingSecgroupRuleOutput{})
	pulumi.RegisterOutputType(NetworkingSecgroupRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkingSecgroupRuleMapOutput{})
}
