// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsParametergroup struct {
	pulumi.CustomResourceState

	ConfigurationParameters RdsParametergroupConfigurationParameterArrayOutput `pulumi:"configurationParameters"`
	CreatedAt               pulumi.StringOutput                                `pulumi:"createdAt"`
	Datastore               RdsParametergroupDatastoreOutput                   `pulumi:"datastore"`
	Description             pulumi.StringPtrOutput                             `pulumi:"description"`
	Name                    pulumi.StringOutput                                `pulumi:"name"`
	Region                  pulumi.StringOutput                                `pulumi:"region"`
	UpdatedAt               pulumi.StringOutput                                `pulumi:"updatedAt"`
	Values                  pulumi.StringMapOutput                             `pulumi:"values"`
}

// NewRdsParametergroup registers a new resource with the given unique name, arguments, and options.
func NewRdsParametergroup(ctx *pulumi.Context,
	name string, args *RdsParametergroupArgs, opts ...pulumi.ResourceOption) (*RdsParametergroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Datastore == nil {
		return nil, errors.New("invalid value for required argument 'Datastore'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsParametergroup
	err := ctx.RegisterResource("sbercloud:index/rdsParametergroup:RdsParametergroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsParametergroup gets an existing RdsParametergroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsParametergroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsParametergroupState, opts ...pulumi.ResourceOption) (*RdsParametergroup, error) {
	var resource RdsParametergroup
	err := ctx.ReadResource("sbercloud:index/rdsParametergroup:RdsParametergroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsParametergroup resources.
type rdsParametergroupState struct {
	ConfigurationParameters []RdsParametergroupConfigurationParameter `pulumi:"configurationParameters"`
	CreatedAt               *string                                   `pulumi:"createdAt"`
	Datastore               *RdsParametergroupDatastore               `pulumi:"datastore"`
	Description             *string                                   `pulumi:"description"`
	Name                    *string                                   `pulumi:"name"`
	Region                  *string                                   `pulumi:"region"`
	UpdatedAt               *string                                   `pulumi:"updatedAt"`
	Values                  map[string]string                         `pulumi:"values"`
}

type RdsParametergroupState struct {
	ConfigurationParameters RdsParametergroupConfigurationParameterArrayInput
	CreatedAt               pulumi.StringPtrInput
	Datastore               RdsParametergroupDatastorePtrInput
	Description             pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	UpdatedAt               pulumi.StringPtrInput
	Values                  pulumi.StringMapInput
}

func (RdsParametergroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsParametergroupState)(nil)).Elem()
}

type rdsParametergroupArgs struct {
	Datastore   RdsParametergroupDatastore `pulumi:"datastore"`
	Description *string                    `pulumi:"description"`
	Name        *string                    `pulumi:"name"`
	Region      *string                    `pulumi:"region"`
	Values      map[string]string          `pulumi:"values"`
}

// The set of arguments for constructing a RdsParametergroup resource.
type RdsParametergroupArgs struct {
	Datastore   RdsParametergroupDatastoreInput
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Values      pulumi.StringMapInput
}

func (RdsParametergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsParametergroupArgs)(nil)).Elem()
}

type RdsParametergroupInput interface {
	pulumi.Input

	ToRdsParametergroupOutput() RdsParametergroupOutput
	ToRdsParametergroupOutputWithContext(ctx context.Context) RdsParametergroupOutput
}

func (*RdsParametergroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsParametergroup)(nil)).Elem()
}

func (i *RdsParametergroup) ToRdsParametergroupOutput() RdsParametergroupOutput {
	return i.ToRdsParametergroupOutputWithContext(context.Background())
}

func (i *RdsParametergroup) ToRdsParametergroupOutputWithContext(ctx context.Context) RdsParametergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsParametergroupOutput)
}

// RdsParametergroupArrayInput is an input type that accepts RdsParametergroupArray and RdsParametergroupArrayOutput values.
// You can construct a concrete instance of `RdsParametergroupArrayInput` via:
//
//	RdsParametergroupArray{ RdsParametergroupArgs{...} }
type RdsParametergroupArrayInput interface {
	pulumi.Input

	ToRdsParametergroupArrayOutput() RdsParametergroupArrayOutput
	ToRdsParametergroupArrayOutputWithContext(context.Context) RdsParametergroupArrayOutput
}

type RdsParametergroupArray []RdsParametergroupInput

func (RdsParametergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsParametergroup)(nil)).Elem()
}

func (i RdsParametergroupArray) ToRdsParametergroupArrayOutput() RdsParametergroupArrayOutput {
	return i.ToRdsParametergroupArrayOutputWithContext(context.Background())
}

func (i RdsParametergroupArray) ToRdsParametergroupArrayOutputWithContext(ctx context.Context) RdsParametergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsParametergroupArrayOutput)
}

// RdsParametergroupMapInput is an input type that accepts RdsParametergroupMap and RdsParametergroupMapOutput values.
// You can construct a concrete instance of `RdsParametergroupMapInput` via:
//
//	RdsParametergroupMap{ "key": RdsParametergroupArgs{...} }
type RdsParametergroupMapInput interface {
	pulumi.Input

	ToRdsParametergroupMapOutput() RdsParametergroupMapOutput
	ToRdsParametergroupMapOutputWithContext(context.Context) RdsParametergroupMapOutput
}

type RdsParametergroupMap map[string]RdsParametergroupInput

func (RdsParametergroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsParametergroup)(nil)).Elem()
}

func (i RdsParametergroupMap) ToRdsParametergroupMapOutput() RdsParametergroupMapOutput {
	return i.ToRdsParametergroupMapOutputWithContext(context.Background())
}

func (i RdsParametergroupMap) ToRdsParametergroupMapOutputWithContext(ctx context.Context) RdsParametergroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsParametergroupMapOutput)
}

type RdsParametergroupOutput struct{ *pulumi.OutputState }

func (RdsParametergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsParametergroup)(nil)).Elem()
}

func (o RdsParametergroupOutput) ToRdsParametergroupOutput() RdsParametergroupOutput {
	return o
}

func (o RdsParametergroupOutput) ToRdsParametergroupOutputWithContext(ctx context.Context) RdsParametergroupOutput {
	return o
}

func (o RdsParametergroupOutput) ConfigurationParameters() RdsParametergroupConfigurationParameterArrayOutput {
	return o.ApplyT(func(v *RdsParametergroup) RdsParametergroupConfigurationParameterArrayOutput {
		return v.ConfigurationParameters
	}).(RdsParametergroupConfigurationParameterArrayOutput)
}

func (o RdsParametergroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsParametergroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o RdsParametergroupOutput) Datastore() RdsParametergroupDatastoreOutput {
	return o.ApplyT(func(v *RdsParametergroup) RdsParametergroupDatastoreOutput { return v.Datastore }).(RdsParametergroupDatastoreOutput)
}

func (o RdsParametergroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsParametergroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RdsParametergroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsParametergroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RdsParametergroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsParametergroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o RdsParametergroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsParametergroup) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o RdsParametergroupOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RdsParametergroup) pulumi.StringMapOutput { return v.Values }).(pulumi.StringMapOutput)
}

type RdsParametergroupArrayOutput struct{ *pulumi.OutputState }

func (RdsParametergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsParametergroup)(nil)).Elem()
}

func (o RdsParametergroupArrayOutput) ToRdsParametergroupArrayOutput() RdsParametergroupArrayOutput {
	return o
}

func (o RdsParametergroupArrayOutput) ToRdsParametergroupArrayOutputWithContext(ctx context.Context) RdsParametergroupArrayOutput {
	return o
}

func (o RdsParametergroupArrayOutput) Index(i pulumi.IntInput) RdsParametergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsParametergroup {
		return vs[0].([]*RdsParametergroup)[vs[1].(int)]
	}).(RdsParametergroupOutput)
}

type RdsParametergroupMapOutput struct{ *pulumi.OutputState }

func (RdsParametergroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsParametergroup)(nil)).Elem()
}

func (o RdsParametergroupMapOutput) ToRdsParametergroupMapOutput() RdsParametergroupMapOutput {
	return o
}

func (o RdsParametergroupMapOutput) ToRdsParametergroupMapOutputWithContext(ctx context.Context) RdsParametergroupMapOutput {
	return o
}

func (o RdsParametergroupMapOutput) MapIndex(k pulumi.StringInput) RdsParametergroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsParametergroup {
		return vs[0].(map[string]*RdsParametergroup)[vs[1].(string)]
	}).(RdsParametergroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsParametergroupInput)(nil)).Elem(), &RdsParametergroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsParametergroupArrayInput)(nil)).Elem(), RdsParametergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsParametergroupMapInput)(nil)).Elem(), RdsParametergroupMap{})
	pulumi.RegisterOutputType(RdsParametergroupOutput{})
	pulumi.RegisterOutputType(RdsParametergroupArrayOutput{})
	pulumi.RegisterOutputType(RdsParametergroupMapOutput{})
}
