// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "sbercloud:index/aomServiceDiscoveryRule:AomServiceDiscoveryRule":
		r = &AomServiceDiscoveryRule{}
	case "sbercloud:index/apiGatewayApi:ApiGatewayApi":
		r = &ApiGatewayApi{}
	case "sbercloud:index/apiGatewayGroup:ApiGatewayGroup":
		r = &ApiGatewayGroup{}
	case "sbercloud:index/apigAclPolicy:ApigAclPolicy":
		r = &ApigAclPolicy{}
	case "sbercloud:index/apigAclPolicyAssociate:ApigAclPolicyAssociate":
		r = &ApigAclPolicyAssociate{}
	case "sbercloud:index/apigApi:ApigApi":
		r = &ApigApi{}
	case "sbercloud:index/apigApiPublishment:ApigApiPublishment":
		r = &ApigApiPublishment{}
	case "sbercloud:index/apigAppcode:ApigAppcode":
		r = &ApigAppcode{}
	case "sbercloud:index/apigApplication:ApigApplication":
		r = &ApigApplication{}
	case "sbercloud:index/apigApplicationAcl:ApigApplicationAcl":
		r = &ApigApplicationAcl{}
	case "sbercloud:index/apigApplicationAuthorization:ApigApplicationAuthorization":
		r = &ApigApplicationAuthorization{}
	case "sbercloud:index/apigApplicationQuota:ApigApplicationQuota":
		r = &ApigApplicationQuota{}
	case "sbercloud:index/apigApplicationQuotaAssociate:ApigApplicationQuotaAssociate":
		r = &ApigApplicationQuotaAssociate{}
	case "sbercloud:index/apigCertificate:ApigCertificate":
		r = &ApigCertificate{}
	case "sbercloud:index/apigChannel:ApigChannel":
		r = &ApigChannel{}
	case "sbercloud:index/apigCustomAuthorizer:ApigCustomAuthorizer":
		r = &ApigCustomAuthorizer{}
	case "sbercloud:index/apigEndpointConnectionManagement:ApigEndpointConnectionManagement":
		r = &ApigEndpointConnectionManagement{}
	case "sbercloud:index/apigEndpointWhitelist:ApigEndpointWhitelist":
		r = &ApigEndpointWhitelist{}
	case "sbercloud:index/apigEnvironment:ApigEnvironment":
		r = &ApigEnvironment{}
	case "sbercloud:index/apigEnvironmentVariable:ApigEnvironmentVariable":
		r = &ApigEnvironmentVariable{}
	case "sbercloud:index/apigGroup:ApigGroup":
		r = &ApigGroup{}
	case "sbercloud:index/apigInstance:ApigInstance":
		r = &ApigInstance{}
	case "sbercloud:index/apigInstanceFeature:ApigInstanceFeature":
		r = &ApigInstanceFeature{}
	case "sbercloud:index/apigInstanceRoutes:ApigInstanceRoutes":
		r = &ApigInstanceRoutes{}
	case "sbercloud:index/apigPlugin:ApigPlugin":
		r = &ApigPlugin{}
	case "sbercloud:index/apigPluginAssociate:ApigPluginAssociate":
		r = &ApigPluginAssociate{}
	case "sbercloud:index/apigResponse:ApigResponse":
		r = &ApigResponse{}
	case "sbercloud:index/apigSignature:ApigSignature":
		r = &ApigSignature{}
	case "sbercloud:index/apigSignatureAssociate:ApigSignatureAssociate":
		r = &ApigSignatureAssociate{}
	case "sbercloud:index/apigThrottlingPolicy:ApigThrottlingPolicy":
		r = &ApigThrottlingPolicy{}
	case "sbercloud:index/apigThrottlingPolicyAssociate:ApigThrottlingPolicyAssociate":
		r = &ApigThrottlingPolicyAssociate{}
	case "sbercloud:index/asBandwidthPolicy:AsBandwidthPolicy":
		r = &AsBandwidthPolicy{}
	case "sbercloud:index/asConfiguration:AsConfiguration":
		r = &AsConfiguration{}
	case "sbercloud:index/asGroup:AsGroup":
		r = &AsGroup{}
	case "sbercloud:index/asPolicy:AsPolicy":
		r = &AsPolicy{}
	case "sbercloud:index/cbhAssetAgencyAuthorization:CbhAssetAgencyAuthorization":
		r = &CbhAssetAgencyAuthorization{}
	case "sbercloud:index/cbhHaInstance:CbhHaInstance":
		r = &CbhHaInstance{}
	case "sbercloud:index/cbhInstance:CbhInstance":
		r = &CbhInstance{}
	case "sbercloud:index/cbrBackupShare:CbrBackupShare":
		r = &CbrBackupShare{}
	case "sbercloud:index/cbrBackupShareAccepter:CbrBackupShareAccepter":
		r = &CbrBackupShareAccepter{}
	case "sbercloud:index/cbrCheckpoint:CbrCheckpoint":
		r = &CbrCheckpoint{}
	case "sbercloud:index/cbrPolicy:CbrPolicy":
		r = &CbrPolicy{}
	case "sbercloud:index/cbrVault:CbrVault":
		r = &CbrVault{}
	case "sbercloud:index/cceAddon:CceAddon":
		r = &CceAddon{}
	case "sbercloud:index/cceCluster:CceCluster":
		r = &CceCluster{}
	case "sbercloud:index/cceNamespace:CceNamespace":
		r = &CceNamespace{}
	case "sbercloud:index/cceNode:CceNode":
		r = &CceNode{}
	case "sbercloud:index/cceNodeAttach:CceNodeAttach":
		r = &CceNodeAttach{}
	case "sbercloud:index/cceNodePool:CceNodePool":
		r = &CceNodePool{}
	case "sbercloud:index/ccePvc:CcePvc":
		r = &CcePvc{}
	case "sbercloud:index/cdmCluster:CdmCluster":
		r = &CdmCluster{}
	case "sbercloud:index/cesAlarmrule:CesAlarmrule":
		r = &CesAlarmrule{}
	case "sbercloud:index/computeEipAssociate:ComputeEipAssociate":
		r = &ComputeEipAssociate{}
	case "sbercloud:index/computeInstance:ComputeInstance":
		r = &ComputeInstance{}
	case "sbercloud:index/computeInterfaceAttach:ComputeInterfaceAttach":
		r = &ComputeInterfaceAttach{}
	case "sbercloud:index/computeKeypair:ComputeKeypair":
		r = &ComputeKeypair{}
	case "sbercloud:index/computeServergroup:ComputeServergroup":
		r = &ComputeServergroup{}
	case "sbercloud:index/computeVolumeAttach:ComputeVolumeAttach":
		r = &ComputeVolumeAttach{}
	case "sbercloud:index/cssCluster:CssCluster":
		r = &CssCluster{}
	case "sbercloud:index/cssConfiguration:CssConfiguration":
		r = &CssConfiguration{}
	case "sbercloud:index/ctsDataTracker:CtsDataTracker":
		r = &CtsDataTracker{}
	case "sbercloud:index/ctsNotification:CtsNotification":
		r = &CtsNotification{}
	case "sbercloud:index/ctsTracker:CtsTracker":
		r = &CtsTracker{}
	case "sbercloud:index/dcsAccount:DcsAccount":
		r = &DcsAccount{}
	case "sbercloud:index/dcsBackup:DcsBackup":
		r = &DcsBackup{}
	case "sbercloud:index/dcsInstance:DcsInstance":
		r = &DcsInstance{}
	case "sbercloud:index/dcsParameters:DcsParameters":
		r = &DcsParameters{}
	case "sbercloud:index/dcsRestore:DcsRestore":
		r = &DcsRestore{}
	case "sbercloud:index/ddsInstance:DdsInstance":
		r = &DdsInstance{}
	case "sbercloud:index/disStream:DisStream":
		r = &DisStream{}
	case "sbercloud:index/dliDatabase:DliDatabase":
		r = &DliDatabase{}
	case "sbercloud:index/dliPackage:DliPackage":
		r = &DliPackage{}
	case "sbercloud:index/dliQueue:DliQueue":
		r = &DliQueue{}
	case "sbercloud:index/dliSparkJob:DliSparkJob":
		r = &DliSparkJob{}
	case "sbercloud:index/dmsInstance:DmsInstance":
		r = &DmsInstance{}
	case "sbercloud:index/dmsKafkaInstance:DmsKafkaInstance":
		r = &DmsKafkaInstance{}
	case "sbercloud:index/dmsKafkaMessageProduce:DmsKafkaMessageProduce":
		r = &DmsKafkaMessageProduce{}
	case "sbercloud:index/dmsKafkaPermissions:DmsKafkaPermissions":
		r = &DmsKafkaPermissions{}
	case "sbercloud:index/dmsKafkaTopic:DmsKafkaTopic":
		r = &DmsKafkaTopic{}
	case "sbercloud:index/dmsKafkaUser:DmsKafkaUser":
		r = &DmsKafkaUser{}
	case "sbercloud:index/dmsRabbitmqInstance:DmsRabbitmqInstance":
		r = &DmsRabbitmqInstance{}
	case "sbercloud:index/dnsRecordset:DnsRecordset":
		r = &DnsRecordset{}
	case "sbercloud:index/dnsZone:DnsZone":
		r = &DnsZone{}
	case "sbercloud:index/drsJob:DrsJob":
		r = &DrsJob{}
	case "sbercloud:index/dwsCluster:DwsCluster":
		r = &DwsCluster{}
	case "sbercloud:index/elbCertificate:ElbCertificate":
		r = &ElbCertificate{}
	case "sbercloud:index/elbIpgroup:ElbIpgroup":
		r = &ElbIpgroup{}
	case "sbercloud:index/elbL7policy:ElbL7policy":
		r = &ElbL7policy{}
	case "sbercloud:index/elbL7rule:ElbL7rule":
		r = &ElbL7rule{}
	case "sbercloud:index/elbListener:ElbListener":
		r = &ElbListener{}
	case "sbercloud:index/elbLoadbalancer:ElbLoadbalancer":
		r = &ElbLoadbalancer{}
	case "sbercloud:index/elbMember:ElbMember":
		r = &ElbMember{}
	case "sbercloud:index/elbMonitor:ElbMonitor":
		r = &ElbMonitor{}
	case "sbercloud:index/elbPool:ElbPool":
		r = &ElbPool{}
	case "sbercloud:index/elbSecurityPolicy:ElbSecurityPolicy":
		r = &ElbSecurityPolicy{}
	case "sbercloud:index/enterpriseProject:EnterpriseProject":
		r = &EnterpriseProject{}
	case "sbercloud:index/evsSnapshot:EvsSnapshot":
		r = &EvsSnapshot{}
	case "sbercloud:index/evsVolume:EvsVolume":
		r = &EvsVolume{}
	case "sbercloud:index/fgsFunction:FgsFunction":
		r = &FgsFunction{}
	case "sbercloud:index/gesGraph:GesGraph":
		r = &GesGraph{}
	case "sbercloud:index/identityAccessKey:IdentityAccessKey":
		r = &IdentityAccessKey{}
	case "sbercloud:index/identityAcl:IdentityAcl":
		r = &IdentityAcl{}
	case "sbercloud:index/identityAgency:IdentityAgency":
		r = &IdentityAgency{}
	case "sbercloud:index/identityGroup:IdentityGroup":
		r = &IdentityGroup{}
	case "sbercloud:index/identityGroupMembership:IdentityGroupMembership":
		r = &IdentityGroupMembership{}
	case "sbercloud:index/identityGroupMembershipV3:IdentityGroupMembershipV3":
		r = &IdentityGroupMembershipV3{}
	case "sbercloud:index/identityGroupRoleAssignment:IdentityGroupRoleAssignment":
		r = &IdentityGroupRoleAssignment{}
	case "sbercloud:index/identityGroupV3:IdentityGroupV3":
		r = &IdentityGroupV3{}
	case "sbercloud:index/identityProject:IdentityProject":
		r = &IdentityProject{}
	case "sbercloud:index/identityProvider:IdentityProvider":
		r = &IdentityProvider{}
	case "sbercloud:index/identityProviderConversion:IdentityProviderConversion":
		r = &IdentityProviderConversion{}
	case "sbercloud:index/identityRole:IdentityRole":
		r = &IdentityRole{}
	case "sbercloud:index/identityRoleAssignment:IdentityRoleAssignment":
		r = &IdentityRoleAssignment{}
	case "sbercloud:index/identityRoleAssignmentV3:IdentityRoleAssignmentV3":
		r = &IdentityRoleAssignmentV3{}
	case "sbercloud:index/identityUser:IdentityUser":
		r = &IdentityUser{}
	case "sbercloud:index/identityUserV3:IdentityUserV3":
		r = &IdentityUserV3{}
	case "sbercloud:index/imagesImage:ImagesImage":
		r = &ImagesImage{}
	case "sbercloud:index/kmsKey:KmsKey":
		r = &KmsKey{}
	case "sbercloud:index/kpsKeypair:KpsKeypair":
		r = &KpsKeypair{}
	case "sbercloud:index/lbCertificate:LbCertificate":
		r = &LbCertificate{}
	case "sbercloud:index/lbL7policy:LbL7policy":
		r = &LbL7policy{}
	case "sbercloud:index/lbL7rule:LbL7rule":
		r = &LbL7rule{}
	case "sbercloud:index/lbListener:LbListener":
		r = &LbListener{}
	case "sbercloud:index/lbLoadbalancer:LbLoadbalancer":
		r = &LbLoadbalancer{}
	case "sbercloud:index/lbMember:LbMember":
		r = &LbMember{}
	case "sbercloud:index/lbMonitor:LbMonitor":
		r = &LbMonitor{}
	case "sbercloud:index/lbPool:LbPool":
		r = &LbPool{}
	case "sbercloud:index/lbWhitelist:LbWhitelist":
		r = &LbWhitelist{}
	case "sbercloud:index/ltsGroup:LtsGroup":
		r = &LtsGroup{}
	case "sbercloud:index/ltsStream:LtsStream":
		r = &LtsStream{}
	case "sbercloud:index/mapreduceCluster:MapreduceCluster":
		r = &MapreduceCluster{}
	case "sbercloud:index/mapreduceJob:MapreduceJob":
		r = &MapreduceJob{}
	case "sbercloud:index/natDnatRule:NatDnatRule":
		r = &NatDnatRule{}
	case "sbercloud:index/natGateway:NatGateway":
		r = &NatGateway{}
	case "sbercloud:index/natSnatRule:NatSnatRule":
		r = &NatSnatRule{}
	case "sbercloud:index/networkAcl:NetworkAcl":
		r = &NetworkAcl{}
	case "sbercloud:index/networkAclRule:NetworkAclRule":
		r = &NetworkAclRule{}
	case "sbercloud:index/networkingEipAssociate:NetworkingEipAssociate":
		r = &NetworkingEipAssociate{}
	case "sbercloud:index/networkingSecgroup:NetworkingSecgroup":
		r = &NetworkingSecgroup{}
	case "sbercloud:index/networkingSecgroupRule:NetworkingSecgroupRule":
		r = &NetworkingSecgroupRule{}
	case "sbercloud:index/networkingVip:NetworkingVip":
		r = &NetworkingVip{}
	case "sbercloud:index/networkingVipAssociate:NetworkingVipAssociate":
		r = &NetworkingVipAssociate{}
	case "sbercloud:index/obsBucket:ObsBucket":
		r = &ObsBucket{}
	case "sbercloud:index/obsBucketAcl:ObsBucketAcl":
		r = &ObsBucketAcl{}
	case "sbercloud:index/obsBucketObject:ObsBucketObject":
		r = &ObsBucketObject{}
	case "sbercloud:index/obsBucketPolicy:ObsBucketPolicy":
		r = &ObsBucketPolicy{}
	case "sbercloud:index/rdsBackup:RdsBackup":
		r = &RdsBackup{}
	case "sbercloud:index/rdsInstance:RdsInstance":
		r = &RdsInstance{}
	case "sbercloud:index/rdsMysqlAccount:RdsMysqlAccount":
		r = &RdsMysqlAccount{}
	case "sbercloud:index/rdsMysqlBinlog:RdsMysqlBinlog":
		r = &RdsMysqlBinlog{}
	case "sbercloud:index/rdsMysqlDatabase:RdsMysqlDatabase":
		r = &RdsMysqlDatabase{}
	case "sbercloud:index/rdsMysqlDatabasePrivilege:RdsMysqlDatabasePrivilege":
		r = &RdsMysqlDatabasePrivilege{}
	case "sbercloud:index/rdsMysqlDatabaseTableRestore:RdsMysqlDatabaseTableRestore":
		r = &RdsMysqlDatabaseTableRestore{}
	case "sbercloud:index/rdsParametergroup:RdsParametergroup":
		r = &RdsParametergroup{}
	case "sbercloud:index/rdsPgAccount:RdsPgAccount":
		r = &RdsPgAccount{}
	case "sbercloud:index/rdsPgAccountRoles:RdsPgAccountRoles":
		r = &RdsPgAccountRoles{}
	case "sbercloud:index/rdsPgDatabase:RdsPgDatabase":
		r = &RdsPgDatabase{}
	case "sbercloud:index/rdsPgHba:RdsPgHba":
		r = &RdsPgHba{}
	case "sbercloud:index/rdsPgPlugin:RdsPgPlugin":
		r = &RdsPgPlugin{}
	case "sbercloud:index/rdsPgPluginParameter:RdsPgPluginParameter":
		r = &RdsPgPluginParameter{}
	case "sbercloud:index/rdsPgPluginUpdate:RdsPgPluginUpdate":
		r = &RdsPgPluginUpdate{}
	case "sbercloud:index/rdsPgSqlLimit:RdsPgSqlLimit":
		r = &RdsPgSqlLimit{}
	case "sbercloud:index/rdsReadReplicaInstance:RdsReadReplicaInstance":
		r = &RdsReadReplicaInstance{}
	case "sbercloud:index/rdsSqlAudit:RdsSqlAudit":
		r = &RdsSqlAudit{}
	case "sbercloud:index/rdsSqlserverAccount:RdsSqlserverAccount":
		r = &RdsSqlserverAccount{}
	case "sbercloud:index/rdsSqlserverDatabase:RdsSqlserverDatabase":
		r = &RdsSqlserverDatabase{}
	case "sbercloud:index/rdsSqlserverDatabasePrivilege:RdsSqlserverDatabasePrivilege":
		r = &RdsSqlserverDatabasePrivilege{}
	case "sbercloud:index/sfsAccessRule:SfsAccessRule":
		r = &SfsAccessRule{}
	case "sbercloud:index/sfsFileSystem:SfsFileSystem":
		r = &SfsFileSystem{}
	case "sbercloud:index/sfsTurbo:SfsTurbo":
		r = &SfsTurbo{}
	case "sbercloud:index/sfsTurboDataTask:SfsTurboDataTask":
		r = &SfsTurboDataTask{}
	case "sbercloud:index/sfsTurboDir:SfsTurboDir":
		r = &SfsTurboDir{}
	case "sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota":
		r = &SfsTurboDirQuota{}
	case "sbercloud:index/sfsTurboDuTask:SfsTurboDuTask":
		r = &SfsTurboDuTask{}
	case "sbercloud:index/sfsTurboObsTarget:SfsTurboObsTarget":
		r = &SfsTurboObsTarget{}
	case "sbercloud:index/sfsTurboPermRule:SfsTurboPermRule":
		r = &SfsTurboPermRule{}
	case "sbercloud:index/smnSubscription:SmnSubscription":
		r = &SmnSubscription{}
	case "sbercloud:index/smnTopic:SmnTopic":
		r = &SmnTopic{}
	case "sbercloud:index/swrOrganization:SwrOrganization":
		r = &SwrOrganization{}
	case "sbercloud:index/swrOrganizationPermissions:SwrOrganizationPermissions":
		r = &SwrOrganizationPermissions{}
	case "sbercloud:index/swrRepository:SwrRepository":
		r = &SwrRepository{}
	case "sbercloud:index/vpc:Vpc":
		r = &Vpc{}
	case "sbercloud:index/vpcAddressGroup:VpcAddressGroup":
		r = &VpcAddressGroup{}
	case "sbercloud:index/vpcBandwidth:VpcBandwidth":
		r = &VpcBandwidth{}
	case "sbercloud:index/vpcEip:VpcEip":
		r = &VpcEip{}
	case "sbercloud:index/vpcPeeringConnection:VpcPeeringConnection":
		r = &VpcPeeringConnection{}
	case "sbercloud:index/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter":
		r = &VpcPeeringConnectionAccepter{}
	case "sbercloud:index/vpcRoute:VpcRoute":
		r = &VpcRoute{}
	case "sbercloud:index/vpcRouteTable:VpcRouteTable":
		r = &VpcRouteTable{}
	case "sbercloud:index/vpcSubnet:VpcSubnet":
		r = &VpcSubnet{}
	case "sbercloud:index/vpcepEndpoint:VpcepEndpoint":
		r = &VpcepEndpoint{}
	case "sbercloud:index/vpcepService:VpcepService":
		r = &VpcepService{}
	case "sbercloud:index/vpnConnection:VpnConnection":
		r = &VpnConnection{}
	case "sbercloud:index/vpnConnectionHealthCheck:VpnConnectionHealthCheck":
		r = &VpnConnectionHealthCheck{}
	case "sbercloud:index/vpnCustomerGateway:VpnCustomerGateway":
		r = &VpnCustomerGateway{}
	case "sbercloud:index/vpnGateway:VpnGateway":
		r = &VpnGateway{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:sbercloud" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/aomServiceDiscoveryRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apiGatewayApi",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apiGatewayGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigAclPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigAclPolicyAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApi",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApiPublishment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigAppcode",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApplication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApplicationAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApplicationAuthorization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApplicationQuota",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigApplicationQuotaAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigChannel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigCustomAuthorizer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigEndpointConnectionManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigEndpointWhitelist",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigEnvironment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigEnvironmentVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigInstanceFeature",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigInstanceRoutes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigPlugin",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigPluginAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigResponse",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigSignature",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigSignatureAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigThrottlingPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/apigThrottlingPolicyAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/asBandwidthPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/asConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/asGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/asPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbhAssetAgencyAuthorization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbhHaInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbhInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbrBackupShare",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbrBackupShareAccepter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbrCheckpoint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbrPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cbrVault",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cceAddon",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cceCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cceNamespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cceNode",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cceNodeAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cceNodePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ccePvc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cdmCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cesAlarmrule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/computeEipAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/computeInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/computeInterfaceAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/computeKeypair",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/computeServergroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/computeVolumeAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cssCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/cssConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ctsDataTracker",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ctsNotification",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ctsTracker",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dcsAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dcsBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dcsInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dcsParameters",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dcsRestore",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ddsInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/disStream",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dliDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dliPackage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dliQueue",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dliSparkJob",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsKafkaInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsKafkaMessageProduce",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsKafkaPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsKafkaTopic",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsKafkaUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dmsRabbitmqInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dnsRecordset",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dnsZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/drsJob",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/dwsCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbIpgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbL7policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbL7rule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbListener",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbLoadbalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/elbSecurityPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/enterpriseProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/evsSnapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/evsVolume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/fgsFunction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/gesGraph",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityAccessKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityAgency",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityGroupMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityGroupMembershipV3",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityGroupRoleAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityGroupV3",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityProvider",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityProviderConversion",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityRoleAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityRoleAssignmentV3",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/identityUserV3",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/imagesImage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/kmsKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/kpsKeypair",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbL7policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbL7rule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbListener",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbLoadbalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/lbWhitelist",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ltsGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/ltsStream",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/mapreduceCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/mapreduceJob",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/natDnatRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/natGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/natSnatRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkAclRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkingEipAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkingSecgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkingSecgroupRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkingVip",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/networkingVipAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/obsBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/obsBucketAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/obsBucketObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/obsBucketPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsMysqlAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsMysqlBinlog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsMysqlDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsMysqlDatabasePrivilege",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsMysqlDatabaseTableRestore",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsParametergroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgAccountRoles",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgHba",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgPlugin",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgPluginParameter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgPluginUpdate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsPgSqlLimit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsReadReplicaInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsSqlAudit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsSqlserverAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsSqlserverDatabase",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/rdsSqlserverDatabasePrivilege",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsAccessRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsFileSystem",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurbo",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurboDataTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurboDir",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurboDirQuota",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurboDuTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurboObsTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/sfsTurboPermRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/smnSubscription",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/smnTopic",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/swrOrganization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/swrOrganizationPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/swrRepository",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcAddressGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcBandwidth",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcEip",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcPeeringConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcPeeringConnectionAccepter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcRouteTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcepEndpoint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpcepService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpnConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpnConnectionHealthCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpnCustomerGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"index/vpnGateway",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"sbercloud",
		&pkg{version},
	)
}
