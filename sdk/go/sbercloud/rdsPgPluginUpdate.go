// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsPgPluginUpdate struct {
	pulumi.CustomResourceState

	// Specifies the database name.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Specifies the extension name.
	ExtensionName pulumi.StringOutput `pulumi:"extensionName"`
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
}

// NewRdsPgPluginUpdate registers a new resource with the given unique name, arguments, and options.
func NewRdsPgPluginUpdate(ctx *pulumi.Context,
	name string, args *RdsPgPluginUpdateArgs, opts ...pulumi.ResourceOption) (*RdsPgPluginUpdate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ExtensionName == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsPgPluginUpdate
	err := ctx.RegisterResource("sbercloud:index/rdsPgPluginUpdate:RdsPgPluginUpdate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsPgPluginUpdate gets an existing RdsPgPluginUpdate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsPgPluginUpdate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsPgPluginUpdateState, opts ...pulumi.ResourceOption) (*RdsPgPluginUpdate, error) {
	var resource RdsPgPluginUpdate
	err := ctx.ReadResource("sbercloud:index/rdsPgPluginUpdate:RdsPgPluginUpdate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsPgPluginUpdate resources.
type rdsPgPluginUpdateState struct {
	// Specifies the database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Specifies the extension name.
	ExtensionName *string `pulumi:"extensionName"`
	// Specifies the ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

type RdsPgPluginUpdateState struct {
	// Specifies the database name.
	DatabaseName pulumi.StringPtrInput
	// Specifies the extension name.
	ExtensionName pulumi.StringPtrInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
}

func (RdsPgPluginUpdateState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgPluginUpdateState)(nil)).Elem()
}

type rdsPgPluginUpdateArgs struct {
	// Specifies the database name.
	DatabaseName string `pulumi:"databaseName"`
	// Specifies the extension name.
	ExtensionName string `pulumi:"extensionName"`
	// Specifies the ID of the RDS instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

// The set of arguments for constructing a RdsPgPluginUpdate resource.
type RdsPgPluginUpdateArgs struct {
	// Specifies the database name.
	DatabaseName pulumi.StringInput
	// Specifies the extension name.
	ExtensionName pulumi.StringInput
	// Specifies the ID of the RDS instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
}

func (RdsPgPluginUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgPluginUpdateArgs)(nil)).Elem()
}

type RdsPgPluginUpdateInput interface {
	pulumi.Input

	ToRdsPgPluginUpdateOutput() RdsPgPluginUpdateOutput
	ToRdsPgPluginUpdateOutputWithContext(ctx context.Context) RdsPgPluginUpdateOutput
}

func (*RdsPgPluginUpdate) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgPluginUpdate)(nil)).Elem()
}

func (i *RdsPgPluginUpdate) ToRdsPgPluginUpdateOutput() RdsPgPluginUpdateOutput {
	return i.ToRdsPgPluginUpdateOutputWithContext(context.Background())
}

func (i *RdsPgPluginUpdate) ToRdsPgPluginUpdateOutputWithContext(ctx context.Context) RdsPgPluginUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginUpdateOutput)
}

// RdsPgPluginUpdateArrayInput is an input type that accepts RdsPgPluginUpdateArray and RdsPgPluginUpdateArrayOutput values.
// You can construct a concrete instance of `RdsPgPluginUpdateArrayInput` via:
//
//	RdsPgPluginUpdateArray{ RdsPgPluginUpdateArgs{...} }
type RdsPgPluginUpdateArrayInput interface {
	pulumi.Input

	ToRdsPgPluginUpdateArrayOutput() RdsPgPluginUpdateArrayOutput
	ToRdsPgPluginUpdateArrayOutputWithContext(context.Context) RdsPgPluginUpdateArrayOutput
}

type RdsPgPluginUpdateArray []RdsPgPluginUpdateInput

func (RdsPgPluginUpdateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgPluginUpdate)(nil)).Elem()
}

func (i RdsPgPluginUpdateArray) ToRdsPgPluginUpdateArrayOutput() RdsPgPluginUpdateArrayOutput {
	return i.ToRdsPgPluginUpdateArrayOutputWithContext(context.Background())
}

func (i RdsPgPluginUpdateArray) ToRdsPgPluginUpdateArrayOutputWithContext(ctx context.Context) RdsPgPluginUpdateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginUpdateArrayOutput)
}

// RdsPgPluginUpdateMapInput is an input type that accepts RdsPgPluginUpdateMap and RdsPgPluginUpdateMapOutput values.
// You can construct a concrete instance of `RdsPgPluginUpdateMapInput` via:
//
//	RdsPgPluginUpdateMap{ "key": RdsPgPluginUpdateArgs{...} }
type RdsPgPluginUpdateMapInput interface {
	pulumi.Input

	ToRdsPgPluginUpdateMapOutput() RdsPgPluginUpdateMapOutput
	ToRdsPgPluginUpdateMapOutputWithContext(context.Context) RdsPgPluginUpdateMapOutput
}

type RdsPgPluginUpdateMap map[string]RdsPgPluginUpdateInput

func (RdsPgPluginUpdateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgPluginUpdate)(nil)).Elem()
}

func (i RdsPgPluginUpdateMap) ToRdsPgPluginUpdateMapOutput() RdsPgPluginUpdateMapOutput {
	return i.ToRdsPgPluginUpdateMapOutputWithContext(context.Background())
}

func (i RdsPgPluginUpdateMap) ToRdsPgPluginUpdateMapOutputWithContext(ctx context.Context) RdsPgPluginUpdateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginUpdateMapOutput)
}

type RdsPgPluginUpdateOutput struct{ *pulumi.OutputState }

func (RdsPgPluginUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgPluginUpdate)(nil)).Elem()
}

func (o RdsPgPluginUpdateOutput) ToRdsPgPluginUpdateOutput() RdsPgPluginUpdateOutput {
	return o
}

func (o RdsPgPluginUpdateOutput) ToRdsPgPluginUpdateOutputWithContext(ctx context.Context) RdsPgPluginUpdateOutput {
	return o
}

// Specifies the database name.
func (o RdsPgPluginUpdateOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginUpdate) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Specifies the extension name.
func (o RdsPgPluginUpdateOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginUpdate) pulumi.StringOutput { return v.ExtensionName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS instance.
func (o RdsPgPluginUpdateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginUpdate) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RdsPgPluginUpdateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPluginUpdate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RdsPgPluginUpdateArrayOutput struct{ *pulumi.OutputState }

func (RdsPgPluginUpdateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgPluginUpdate)(nil)).Elem()
}

func (o RdsPgPluginUpdateArrayOutput) ToRdsPgPluginUpdateArrayOutput() RdsPgPluginUpdateArrayOutput {
	return o
}

func (o RdsPgPluginUpdateArrayOutput) ToRdsPgPluginUpdateArrayOutputWithContext(ctx context.Context) RdsPgPluginUpdateArrayOutput {
	return o
}

func (o RdsPgPluginUpdateArrayOutput) Index(i pulumi.IntInput) RdsPgPluginUpdateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsPgPluginUpdate {
		return vs[0].([]*RdsPgPluginUpdate)[vs[1].(int)]
	}).(RdsPgPluginUpdateOutput)
}

type RdsPgPluginUpdateMapOutput struct{ *pulumi.OutputState }

func (RdsPgPluginUpdateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgPluginUpdate)(nil)).Elem()
}

func (o RdsPgPluginUpdateMapOutput) ToRdsPgPluginUpdateMapOutput() RdsPgPluginUpdateMapOutput {
	return o
}

func (o RdsPgPluginUpdateMapOutput) ToRdsPgPluginUpdateMapOutputWithContext(ctx context.Context) RdsPgPluginUpdateMapOutput {
	return o
}

func (o RdsPgPluginUpdateMapOutput) MapIndex(k pulumi.StringInput) RdsPgPluginUpdateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsPgPluginUpdate {
		return vs[0].(map[string]*RdsPgPluginUpdate)[vs[1].(string)]
	}).(RdsPgPluginUpdateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginUpdateInput)(nil)).Elem(), &RdsPgPluginUpdate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginUpdateArrayInput)(nil)).Elem(), RdsPgPluginUpdateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginUpdateMapInput)(nil)).Elem(), RdsPgPluginUpdateMap{})
	pulumi.RegisterOutputType(RdsPgPluginUpdateOutput{})
	pulumi.RegisterOutputType(RdsPgPluginUpdateArrayOutput{})
	pulumi.RegisterOutputType(RdsPgPluginUpdateMapOutput{})
}
