// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityRoleAssignment struct {
	pulumi.CustomResourceState

	DomainId            pulumi.StringPtrOutput `pulumi:"domainId"`
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	GroupId             pulumi.StringOutput    `pulumi:"groupId"`
	ProjectId           pulumi.StringPtrOutput `pulumi:"projectId"`
	RoleId              pulumi.StringOutput    `pulumi:"roleId"`
}

// NewIdentityRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewIdentityRoleAssignment(ctx *pulumi.Context,
	name string, args *IdentityRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*IdentityRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityRoleAssignment
	err := ctx.RegisterResource("sbercloud:index/identityRoleAssignment:IdentityRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityRoleAssignment gets an existing IdentityRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityRoleAssignmentState, opts ...pulumi.ResourceOption) (*IdentityRoleAssignment, error) {
	var resource IdentityRoleAssignment
	err := ctx.ReadResource("sbercloud:index/identityRoleAssignment:IdentityRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityRoleAssignment resources.
type identityRoleAssignmentState struct {
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	GroupId             *string `pulumi:"groupId"`
	ProjectId           *string `pulumi:"projectId"`
	RoleId              *string `pulumi:"roleId"`
}

type IdentityRoleAssignmentState struct {
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringPtrInput
	ProjectId           pulumi.StringPtrInput
	RoleId              pulumi.StringPtrInput
}

func (IdentityRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityRoleAssignmentState)(nil)).Elem()
}

type identityRoleAssignmentArgs struct {
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	GroupId             string  `pulumi:"groupId"`
	ProjectId           *string `pulumi:"projectId"`
	RoleId              string  `pulumi:"roleId"`
}

// The set of arguments for constructing a IdentityRoleAssignment resource.
type IdentityRoleAssignmentArgs struct {
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringInput
	ProjectId           pulumi.StringPtrInput
	RoleId              pulumi.StringInput
}

func (IdentityRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityRoleAssignmentArgs)(nil)).Elem()
}

type IdentityRoleAssignmentInput interface {
	pulumi.Input

	ToIdentityRoleAssignmentOutput() IdentityRoleAssignmentOutput
	ToIdentityRoleAssignmentOutputWithContext(ctx context.Context) IdentityRoleAssignmentOutput
}

func (*IdentityRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityRoleAssignment)(nil)).Elem()
}

func (i *IdentityRoleAssignment) ToIdentityRoleAssignmentOutput() IdentityRoleAssignmentOutput {
	return i.ToIdentityRoleAssignmentOutputWithContext(context.Background())
}

func (i *IdentityRoleAssignment) ToIdentityRoleAssignmentOutputWithContext(ctx context.Context) IdentityRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleAssignmentOutput)
}

// IdentityRoleAssignmentArrayInput is an input type that accepts IdentityRoleAssignmentArray and IdentityRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `IdentityRoleAssignmentArrayInput` via:
//
//	IdentityRoleAssignmentArray{ IdentityRoleAssignmentArgs{...} }
type IdentityRoleAssignmentArrayInput interface {
	pulumi.Input

	ToIdentityRoleAssignmentArrayOutput() IdentityRoleAssignmentArrayOutput
	ToIdentityRoleAssignmentArrayOutputWithContext(context.Context) IdentityRoleAssignmentArrayOutput
}

type IdentityRoleAssignmentArray []IdentityRoleAssignmentInput

func (IdentityRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityRoleAssignment)(nil)).Elem()
}

func (i IdentityRoleAssignmentArray) ToIdentityRoleAssignmentArrayOutput() IdentityRoleAssignmentArrayOutput {
	return i.ToIdentityRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i IdentityRoleAssignmentArray) ToIdentityRoleAssignmentArrayOutputWithContext(ctx context.Context) IdentityRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleAssignmentArrayOutput)
}

// IdentityRoleAssignmentMapInput is an input type that accepts IdentityRoleAssignmentMap and IdentityRoleAssignmentMapOutput values.
// You can construct a concrete instance of `IdentityRoleAssignmentMapInput` via:
//
//	IdentityRoleAssignmentMap{ "key": IdentityRoleAssignmentArgs{...} }
type IdentityRoleAssignmentMapInput interface {
	pulumi.Input

	ToIdentityRoleAssignmentMapOutput() IdentityRoleAssignmentMapOutput
	ToIdentityRoleAssignmentMapOutputWithContext(context.Context) IdentityRoleAssignmentMapOutput
}

type IdentityRoleAssignmentMap map[string]IdentityRoleAssignmentInput

func (IdentityRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityRoleAssignment)(nil)).Elem()
}

func (i IdentityRoleAssignmentMap) ToIdentityRoleAssignmentMapOutput() IdentityRoleAssignmentMapOutput {
	return i.ToIdentityRoleAssignmentMapOutputWithContext(context.Background())
}

func (i IdentityRoleAssignmentMap) ToIdentityRoleAssignmentMapOutputWithContext(ctx context.Context) IdentityRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleAssignmentMapOutput)
}

type IdentityRoleAssignmentOutput struct{ *pulumi.OutputState }

func (IdentityRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityRoleAssignment)(nil)).Elem()
}

func (o IdentityRoleAssignmentOutput) ToIdentityRoleAssignmentOutput() IdentityRoleAssignmentOutput {
	return o
}

func (o IdentityRoleAssignmentOutput) ToIdentityRoleAssignmentOutputWithContext(ctx context.Context) IdentityRoleAssignmentOutput {
	return o
}

func (o IdentityRoleAssignmentOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityRoleAssignment) pulumi.StringPtrOutput { return v.DomainId }).(pulumi.StringPtrOutput)
}

func (o IdentityRoleAssignmentOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityRoleAssignment) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

func (o IdentityRoleAssignmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRoleAssignment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o IdentityRoleAssignmentOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityRoleAssignment) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o IdentityRoleAssignmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRoleAssignment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type IdentityRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (IdentityRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityRoleAssignment)(nil)).Elem()
}

func (o IdentityRoleAssignmentArrayOutput) ToIdentityRoleAssignmentArrayOutput() IdentityRoleAssignmentArrayOutput {
	return o
}

func (o IdentityRoleAssignmentArrayOutput) ToIdentityRoleAssignmentArrayOutputWithContext(ctx context.Context) IdentityRoleAssignmentArrayOutput {
	return o
}

func (o IdentityRoleAssignmentArrayOutput) Index(i pulumi.IntInput) IdentityRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityRoleAssignment {
		return vs[0].([]*IdentityRoleAssignment)[vs[1].(int)]
	}).(IdentityRoleAssignmentOutput)
}

type IdentityRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (IdentityRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityRoleAssignment)(nil)).Elem()
}

func (o IdentityRoleAssignmentMapOutput) ToIdentityRoleAssignmentMapOutput() IdentityRoleAssignmentMapOutput {
	return o
}

func (o IdentityRoleAssignmentMapOutput) ToIdentityRoleAssignmentMapOutputWithContext(ctx context.Context) IdentityRoleAssignmentMapOutput {
	return o
}

func (o IdentityRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) IdentityRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityRoleAssignment {
		return vs[0].(map[string]*IdentityRoleAssignment)[vs[1].(string)]
	}).(IdentityRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleAssignmentInput)(nil)).Elem(), &IdentityRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleAssignmentArrayInput)(nil)).Elem(), IdentityRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleAssignmentMapInput)(nil)).Elem(), IdentityRoleAssignmentMap{})
	pulumi.RegisterOutputType(IdentityRoleAssignmentOutput{})
	pulumi.RegisterOutputType(IdentityRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(IdentityRoleAssignmentMapOutput{})
}
