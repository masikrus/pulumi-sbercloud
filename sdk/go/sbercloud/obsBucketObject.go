// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ObsBucketObject struct {
	pulumi.CustomResourceState

	Acl          pulumi.StringPtrOutput `pulumi:"acl"`
	Bucket       pulumi.StringOutput    `pulumi:"bucket"`
	Content      pulumi.StringPtrOutput `pulumi:"content"`
	ContentType  pulumi.StringOutput    `pulumi:"contentType"`
	Encryption   pulumi.BoolPtrOutput   `pulumi:"encryption"`
	Etag         pulumi.StringOutput    `pulumi:"etag"`
	Key          pulumi.StringOutput    `pulumi:"key"`
	KmsKeyId     pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	Region       pulumi.StringOutput    `pulumi:"region"`
	Size         pulumi.IntOutput       `pulumi:"size"`
	Source       pulumi.StringPtrOutput `pulumi:"source"`
	StorageClass pulumi.StringOutput    `pulumi:"storageClass"`
	VersionId    pulumi.StringOutput    `pulumi:"versionId"`
}

// NewObsBucketObject registers a new resource with the given unique name, arguments, and options.
func NewObsBucketObject(ctx *pulumi.Context,
	name string, args *ObsBucketObjectArgs, opts ...pulumi.ResourceOption) (*ObsBucketObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObsBucketObject
	err := ctx.RegisterResource("sbercloud:index/obsBucketObject:ObsBucketObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObsBucketObject gets an existing ObsBucketObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObsBucketObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObsBucketObjectState, opts ...pulumi.ResourceOption) (*ObsBucketObject, error) {
	var resource ObsBucketObject
	err := ctx.ReadResource("sbercloud:index/obsBucketObject:ObsBucketObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObsBucketObject resources.
type obsBucketObjectState struct {
	Acl          *string `pulumi:"acl"`
	Bucket       *string `pulumi:"bucket"`
	Content      *string `pulumi:"content"`
	ContentType  *string `pulumi:"contentType"`
	Encryption   *bool   `pulumi:"encryption"`
	Etag         *string `pulumi:"etag"`
	Key          *string `pulumi:"key"`
	KmsKeyId     *string `pulumi:"kmsKeyId"`
	Region       *string `pulumi:"region"`
	Size         *int    `pulumi:"size"`
	Source       *string `pulumi:"source"`
	StorageClass *string `pulumi:"storageClass"`
	VersionId    *string `pulumi:"versionId"`
}

type ObsBucketObjectState struct {
	Acl          pulumi.StringPtrInput
	Bucket       pulumi.StringPtrInput
	Content      pulumi.StringPtrInput
	ContentType  pulumi.StringPtrInput
	Encryption   pulumi.BoolPtrInput
	Etag         pulumi.StringPtrInput
	Key          pulumi.StringPtrInput
	KmsKeyId     pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Size         pulumi.IntPtrInput
	Source       pulumi.StringPtrInput
	StorageClass pulumi.StringPtrInput
	VersionId    pulumi.StringPtrInput
}

func (ObsBucketObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*obsBucketObjectState)(nil)).Elem()
}

type obsBucketObjectArgs struct {
	Acl          *string `pulumi:"acl"`
	Bucket       string  `pulumi:"bucket"`
	Content      *string `pulumi:"content"`
	ContentType  *string `pulumi:"contentType"`
	Encryption   *bool   `pulumi:"encryption"`
	Etag         *string `pulumi:"etag"`
	Key          string  `pulumi:"key"`
	KmsKeyId     *string `pulumi:"kmsKeyId"`
	Region       *string `pulumi:"region"`
	Source       *string `pulumi:"source"`
	StorageClass *string `pulumi:"storageClass"`
}

// The set of arguments for constructing a ObsBucketObject resource.
type ObsBucketObjectArgs struct {
	Acl          pulumi.StringPtrInput
	Bucket       pulumi.StringInput
	Content      pulumi.StringPtrInput
	ContentType  pulumi.StringPtrInput
	Encryption   pulumi.BoolPtrInput
	Etag         pulumi.StringPtrInput
	Key          pulumi.StringInput
	KmsKeyId     pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Source       pulumi.StringPtrInput
	StorageClass pulumi.StringPtrInput
}

func (ObsBucketObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*obsBucketObjectArgs)(nil)).Elem()
}

type ObsBucketObjectInput interface {
	pulumi.Input

	ToObsBucketObjectOutput() ObsBucketObjectOutput
	ToObsBucketObjectOutputWithContext(ctx context.Context) ObsBucketObjectOutput
}

func (*ObsBucketObject) ElementType() reflect.Type {
	return reflect.TypeOf((**ObsBucketObject)(nil)).Elem()
}

func (i *ObsBucketObject) ToObsBucketObjectOutput() ObsBucketObjectOutput {
	return i.ToObsBucketObjectOutputWithContext(context.Background())
}

func (i *ObsBucketObject) ToObsBucketObjectOutputWithContext(ctx context.Context) ObsBucketObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsBucketObjectOutput)
}

// ObsBucketObjectArrayInput is an input type that accepts ObsBucketObjectArray and ObsBucketObjectArrayOutput values.
// You can construct a concrete instance of `ObsBucketObjectArrayInput` via:
//
//	ObsBucketObjectArray{ ObsBucketObjectArgs{...} }
type ObsBucketObjectArrayInput interface {
	pulumi.Input

	ToObsBucketObjectArrayOutput() ObsBucketObjectArrayOutput
	ToObsBucketObjectArrayOutputWithContext(context.Context) ObsBucketObjectArrayOutput
}

type ObsBucketObjectArray []ObsBucketObjectInput

func (ObsBucketObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObsBucketObject)(nil)).Elem()
}

func (i ObsBucketObjectArray) ToObsBucketObjectArrayOutput() ObsBucketObjectArrayOutput {
	return i.ToObsBucketObjectArrayOutputWithContext(context.Background())
}

func (i ObsBucketObjectArray) ToObsBucketObjectArrayOutputWithContext(ctx context.Context) ObsBucketObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsBucketObjectArrayOutput)
}

// ObsBucketObjectMapInput is an input type that accepts ObsBucketObjectMap and ObsBucketObjectMapOutput values.
// You can construct a concrete instance of `ObsBucketObjectMapInput` via:
//
//	ObsBucketObjectMap{ "key": ObsBucketObjectArgs{...} }
type ObsBucketObjectMapInput interface {
	pulumi.Input

	ToObsBucketObjectMapOutput() ObsBucketObjectMapOutput
	ToObsBucketObjectMapOutputWithContext(context.Context) ObsBucketObjectMapOutput
}

type ObsBucketObjectMap map[string]ObsBucketObjectInput

func (ObsBucketObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObsBucketObject)(nil)).Elem()
}

func (i ObsBucketObjectMap) ToObsBucketObjectMapOutput() ObsBucketObjectMapOutput {
	return i.ToObsBucketObjectMapOutputWithContext(context.Background())
}

func (i ObsBucketObjectMap) ToObsBucketObjectMapOutputWithContext(ctx context.Context) ObsBucketObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsBucketObjectMapOutput)
}

type ObsBucketObjectOutput struct{ *pulumi.OutputState }

func (ObsBucketObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObsBucketObject)(nil)).Elem()
}

func (o ObsBucketObjectOutput) ToObsBucketObjectOutput() ObsBucketObjectOutput {
	return o
}

func (o ObsBucketObjectOutput) ToObsBucketObjectOutputWithContext(ctx context.Context) ObsBucketObjectOutput {
	return o
}

func (o ObsBucketObjectOutput) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringPtrOutput { return v.Acl }).(pulumi.StringPtrOutput)
}

func (o ObsBucketObjectOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

func (o ObsBucketObjectOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

func (o ObsBucketObjectOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o ObsBucketObjectOutput) Encryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.BoolPtrOutput { return v.Encryption }).(pulumi.BoolPtrOutput)
}

func (o ObsBucketObjectOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ObsBucketObjectOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o ObsBucketObjectOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ObsBucketObjectOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ObsBucketObjectOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o ObsBucketObjectOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

func (o ObsBucketObjectOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.StorageClass }).(pulumi.StringOutput)
}

func (o ObsBucketObjectOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketObject) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type ObsBucketObjectArrayOutput struct{ *pulumi.OutputState }

func (ObsBucketObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObsBucketObject)(nil)).Elem()
}

func (o ObsBucketObjectArrayOutput) ToObsBucketObjectArrayOutput() ObsBucketObjectArrayOutput {
	return o
}

func (o ObsBucketObjectArrayOutput) ToObsBucketObjectArrayOutputWithContext(ctx context.Context) ObsBucketObjectArrayOutput {
	return o
}

func (o ObsBucketObjectArrayOutput) Index(i pulumi.IntInput) ObsBucketObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObsBucketObject {
		return vs[0].([]*ObsBucketObject)[vs[1].(int)]
	}).(ObsBucketObjectOutput)
}

type ObsBucketObjectMapOutput struct{ *pulumi.OutputState }

func (ObsBucketObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObsBucketObject)(nil)).Elem()
}

func (o ObsBucketObjectMapOutput) ToObsBucketObjectMapOutput() ObsBucketObjectMapOutput {
	return o
}

func (o ObsBucketObjectMapOutput) ToObsBucketObjectMapOutputWithContext(ctx context.Context) ObsBucketObjectMapOutput {
	return o
}

func (o ObsBucketObjectMapOutput) MapIndex(k pulumi.StringInput) ObsBucketObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObsBucketObject {
		return vs[0].(map[string]*ObsBucketObject)[vs[1].(string)]
	}).(ObsBucketObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObsBucketObjectInput)(nil)).Elem(), &ObsBucketObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObsBucketObjectArrayInput)(nil)).Elem(), ObsBucketObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObsBucketObjectMapInput)(nil)).Elem(), ObsBucketObjectMap{})
	pulumi.RegisterOutputType(ObsBucketObjectOutput{})
	pulumi.RegisterOutputType(ObsBucketObjectArrayOutput{})
	pulumi.RegisterOutputType(ObsBucketObjectMapOutput{})
}
