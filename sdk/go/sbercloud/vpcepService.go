// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcepService struct {
	pulumi.CustomResourceState

	Approval                pulumi.BoolOutput                  `pulumi:"approval"`
	Connections             VpcepServiceConnectionArrayOutput  `pulumi:"connections"`
	Description             pulumi.StringOutput                `pulumi:"description"`
	EnablePolicy            pulumi.BoolOutput                  `pulumi:"enablePolicy"`
	Name                    pulumi.StringOutput                `pulumi:"name"`
	OrganizationPermissions pulumi.StringArrayOutput           `pulumi:"organizationPermissions"`
	Permissions             pulumi.StringArrayOutput           `pulumi:"permissions"`
	PortId                  pulumi.StringOutput                `pulumi:"portId"`
	PortMappings            VpcepServicePortMappingArrayOutput `pulumi:"portMappings"`
	Region                  pulumi.StringOutput                `pulumi:"region"`
	ServerType              pulumi.StringOutput                `pulumi:"serverType"`
	ServiceName             pulumi.StringOutput                `pulumi:"serviceName"`
	// schema: Computed
	ServiceType pulumi.StringPtrOutput `pulumi:"serviceType"`
	Status      pulumi.StringOutput    `pulumi:"status"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	VpcId       pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewVpcepService registers a new resource with the given unique name, arguments, and options.
func NewVpcepService(ctx *pulumi.Context,
	name string, args *VpcepServiceArgs, opts ...pulumi.ResourceOption) (*VpcepService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortId == nil {
		return nil, errors.New("invalid value for required argument 'PortId'")
	}
	if args.PortMappings == nil {
		return nil, errors.New("invalid value for required argument 'PortMappings'")
	}
	if args.ServerType == nil {
		return nil, errors.New("invalid value for required argument 'ServerType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcepService
	err := ctx.RegisterResource("sbercloud:index/vpcepService:VpcepService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcepService gets an existing VpcepService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcepService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcepServiceState, opts ...pulumi.ResourceOption) (*VpcepService, error) {
	var resource VpcepService
	err := ctx.ReadResource("sbercloud:index/vpcepService:VpcepService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcepService resources.
type vpcepServiceState struct {
	Approval                *bool                     `pulumi:"approval"`
	Connections             []VpcepServiceConnection  `pulumi:"connections"`
	Description             *string                   `pulumi:"description"`
	EnablePolicy            *bool                     `pulumi:"enablePolicy"`
	Name                    *string                   `pulumi:"name"`
	OrganizationPermissions []string                  `pulumi:"organizationPermissions"`
	Permissions             []string                  `pulumi:"permissions"`
	PortId                  *string                   `pulumi:"portId"`
	PortMappings            []VpcepServicePortMapping `pulumi:"portMappings"`
	Region                  *string                   `pulumi:"region"`
	ServerType              *string                   `pulumi:"serverType"`
	ServiceName             *string                   `pulumi:"serviceName"`
	// schema: Computed
	ServiceType *string           `pulumi:"serviceType"`
	Status      *string           `pulumi:"status"`
	Tags        map[string]string `pulumi:"tags"`
	VpcId       *string           `pulumi:"vpcId"`
}

type VpcepServiceState struct {
	Approval                pulumi.BoolPtrInput
	Connections             VpcepServiceConnectionArrayInput
	Description             pulumi.StringPtrInput
	EnablePolicy            pulumi.BoolPtrInput
	Name                    pulumi.StringPtrInput
	OrganizationPermissions pulumi.StringArrayInput
	Permissions             pulumi.StringArrayInput
	PortId                  pulumi.StringPtrInput
	PortMappings            VpcepServicePortMappingArrayInput
	Region                  pulumi.StringPtrInput
	ServerType              pulumi.StringPtrInput
	ServiceName             pulumi.StringPtrInput
	// schema: Computed
	ServiceType pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	VpcId       pulumi.StringPtrInput
}

func (VpcepServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcepServiceState)(nil)).Elem()
}

type vpcepServiceArgs struct {
	Approval                *bool                     `pulumi:"approval"`
	Description             *string                   `pulumi:"description"`
	EnablePolicy            *bool                     `pulumi:"enablePolicy"`
	Name                    *string                   `pulumi:"name"`
	OrganizationPermissions []string                  `pulumi:"organizationPermissions"`
	Permissions             []string                  `pulumi:"permissions"`
	PortId                  string                    `pulumi:"portId"`
	PortMappings            []VpcepServicePortMapping `pulumi:"portMappings"`
	Region                  *string                   `pulumi:"region"`
	ServerType              string                    `pulumi:"serverType"`
	// schema: Computed
	ServiceType *string           `pulumi:"serviceType"`
	Tags        map[string]string `pulumi:"tags"`
	VpcId       string            `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcepService resource.
type VpcepServiceArgs struct {
	Approval                pulumi.BoolPtrInput
	Description             pulumi.StringPtrInput
	EnablePolicy            pulumi.BoolPtrInput
	Name                    pulumi.StringPtrInput
	OrganizationPermissions pulumi.StringArrayInput
	Permissions             pulumi.StringArrayInput
	PortId                  pulumi.StringInput
	PortMappings            VpcepServicePortMappingArrayInput
	Region                  pulumi.StringPtrInput
	ServerType              pulumi.StringInput
	// schema: Computed
	ServiceType pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	VpcId       pulumi.StringInput
}

func (VpcepServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcepServiceArgs)(nil)).Elem()
}

type VpcepServiceInput interface {
	pulumi.Input

	ToVpcepServiceOutput() VpcepServiceOutput
	ToVpcepServiceOutputWithContext(ctx context.Context) VpcepServiceOutput
}

func (*VpcepService) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcepService)(nil)).Elem()
}

func (i *VpcepService) ToVpcepServiceOutput() VpcepServiceOutput {
	return i.ToVpcepServiceOutputWithContext(context.Background())
}

func (i *VpcepService) ToVpcepServiceOutputWithContext(ctx context.Context) VpcepServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcepServiceOutput)
}

// VpcepServiceArrayInput is an input type that accepts VpcepServiceArray and VpcepServiceArrayOutput values.
// You can construct a concrete instance of `VpcepServiceArrayInput` via:
//
//	VpcepServiceArray{ VpcepServiceArgs{...} }
type VpcepServiceArrayInput interface {
	pulumi.Input

	ToVpcepServiceArrayOutput() VpcepServiceArrayOutput
	ToVpcepServiceArrayOutputWithContext(context.Context) VpcepServiceArrayOutput
}

type VpcepServiceArray []VpcepServiceInput

func (VpcepServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcepService)(nil)).Elem()
}

func (i VpcepServiceArray) ToVpcepServiceArrayOutput() VpcepServiceArrayOutput {
	return i.ToVpcepServiceArrayOutputWithContext(context.Background())
}

func (i VpcepServiceArray) ToVpcepServiceArrayOutputWithContext(ctx context.Context) VpcepServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcepServiceArrayOutput)
}

// VpcepServiceMapInput is an input type that accepts VpcepServiceMap and VpcepServiceMapOutput values.
// You can construct a concrete instance of `VpcepServiceMapInput` via:
//
//	VpcepServiceMap{ "key": VpcepServiceArgs{...} }
type VpcepServiceMapInput interface {
	pulumi.Input

	ToVpcepServiceMapOutput() VpcepServiceMapOutput
	ToVpcepServiceMapOutputWithContext(context.Context) VpcepServiceMapOutput
}

type VpcepServiceMap map[string]VpcepServiceInput

func (VpcepServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcepService)(nil)).Elem()
}

func (i VpcepServiceMap) ToVpcepServiceMapOutput() VpcepServiceMapOutput {
	return i.ToVpcepServiceMapOutputWithContext(context.Background())
}

func (i VpcepServiceMap) ToVpcepServiceMapOutputWithContext(ctx context.Context) VpcepServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcepServiceMapOutput)
}

type VpcepServiceOutput struct{ *pulumi.OutputState }

func (VpcepServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcepService)(nil)).Elem()
}

func (o VpcepServiceOutput) ToVpcepServiceOutput() VpcepServiceOutput {
	return o
}

func (o VpcepServiceOutput) ToVpcepServiceOutputWithContext(ctx context.Context) VpcepServiceOutput {
	return o
}

func (o VpcepServiceOutput) Approval() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.BoolOutput { return v.Approval }).(pulumi.BoolOutput)
}

func (o VpcepServiceOutput) Connections() VpcepServiceConnectionArrayOutput {
	return o.ApplyT(func(v *VpcepService) VpcepServiceConnectionArrayOutput { return v.Connections }).(VpcepServiceConnectionArrayOutput)
}

func (o VpcepServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o VpcepServiceOutput) EnablePolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.BoolOutput { return v.EnablePolicy }).(pulumi.BoolOutput)
}

func (o VpcepServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcepServiceOutput) OrganizationPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringArrayOutput { return v.OrganizationPermissions }).(pulumi.StringArrayOutput)
}

func (o VpcepServiceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o VpcepServiceOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

func (o VpcepServiceOutput) PortMappings() VpcepServicePortMappingArrayOutput {
	return o.ApplyT(func(v *VpcepService) VpcepServicePortMappingArrayOutput { return v.PortMappings }).(VpcepServicePortMappingArrayOutput)
}

func (o VpcepServiceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VpcepServiceOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

func (o VpcepServiceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// schema: Computed
func (o VpcepServiceOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringPtrOutput { return v.ServiceType }).(pulumi.StringPtrOutput)
}

func (o VpcepServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpcepServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VpcepServiceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcepService) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcepServiceArrayOutput struct{ *pulumi.OutputState }

func (VpcepServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcepService)(nil)).Elem()
}

func (o VpcepServiceArrayOutput) ToVpcepServiceArrayOutput() VpcepServiceArrayOutput {
	return o
}

func (o VpcepServiceArrayOutput) ToVpcepServiceArrayOutputWithContext(ctx context.Context) VpcepServiceArrayOutput {
	return o
}

func (o VpcepServiceArrayOutput) Index(i pulumi.IntInput) VpcepServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcepService {
		return vs[0].([]*VpcepService)[vs[1].(int)]
	}).(VpcepServiceOutput)
}

type VpcepServiceMapOutput struct{ *pulumi.OutputState }

func (VpcepServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcepService)(nil)).Elem()
}

func (o VpcepServiceMapOutput) ToVpcepServiceMapOutput() VpcepServiceMapOutput {
	return o
}

func (o VpcepServiceMapOutput) ToVpcepServiceMapOutputWithContext(ctx context.Context) VpcepServiceMapOutput {
	return o
}

func (o VpcepServiceMapOutput) MapIndex(k pulumi.StringInput) VpcepServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcepService {
		return vs[0].(map[string]*VpcepService)[vs[1].(string)]
	}).(VpcepServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcepServiceInput)(nil)).Elem(), &VpcepService{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcepServiceArrayInput)(nil)).Elem(), VpcepServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcepServiceMapInput)(nil)).Elem(), VpcepServiceMap{})
	pulumi.RegisterOutputType(VpcepServiceOutput{})
	pulumi.RegisterOutputType(VpcepServiceArrayOutput{})
	pulumi.RegisterOutputType(VpcepServiceMapOutput{})
}
