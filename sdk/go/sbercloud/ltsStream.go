// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LtsStream struct {
	pulumi.CustomResourceState

	CreatedAt           pulumi.StringOutput    `pulumi:"createdAt"`
	EnterpriseProjectId pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	FilterCount         pulumi.IntOutput       `pulumi:"filterCount"`
	GroupId             pulumi.StringOutput    `pulumi:"groupId"`
	Region              pulumi.StringOutput    `pulumi:"region"`
	StreamName          pulumi.StringOutput    `pulumi:"streamName"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	TtlInDays           pulumi.IntOutput       `pulumi:"ttlInDays"`
}

// NewLtsStream registers a new resource with the given unique name, arguments, and options.
func NewLtsStream(ctx *pulumi.Context,
	name string, args *LtsStreamArgs, opts ...pulumi.ResourceOption) (*LtsStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LtsStream
	err := ctx.RegisterResource("sbercloud:index/ltsStream:LtsStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLtsStream gets an existing LtsStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLtsStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LtsStreamState, opts ...pulumi.ResourceOption) (*LtsStream, error) {
	var resource LtsStream
	err := ctx.ReadResource("sbercloud:index/ltsStream:LtsStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LtsStream resources.
type ltsStreamState struct {
	CreatedAt           *string           `pulumi:"createdAt"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	FilterCount         *int              `pulumi:"filterCount"`
	GroupId             *string           `pulumi:"groupId"`
	Region              *string           `pulumi:"region"`
	StreamName          *string           `pulumi:"streamName"`
	Tags                map[string]string `pulumi:"tags"`
	TtlInDays           *int              `pulumi:"ttlInDays"`
}

type LtsStreamState struct {
	CreatedAt           pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	FilterCount         pulumi.IntPtrInput
	GroupId             pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	StreamName          pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TtlInDays           pulumi.IntPtrInput
}

func (LtsStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*ltsStreamState)(nil)).Elem()
}

type ltsStreamArgs struct {
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	GroupId             string            `pulumi:"groupId"`
	Region              *string           `pulumi:"region"`
	StreamName          string            `pulumi:"streamName"`
	Tags                map[string]string `pulumi:"tags"`
	TtlInDays           *int              `pulumi:"ttlInDays"`
}

// The set of arguments for constructing a LtsStream resource.
type LtsStreamArgs struct {
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringInput
	Region              pulumi.StringPtrInput
	StreamName          pulumi.StringInput
	Tags                pulumi.StringMapInput
	TtlInDays           pulumi.IntPtrInput
}

func (LtsStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ltsStreamArgs)(nil)).Elem()
}

type LtsStreamInput interface {
	pulumi.Input

	ToLtsStreamOutput() LtsStreamOutput
	ToLtsStreamOutputWithContext(ctx context.Context) LtsStreamOutput
}

func (*LtsStream) ElementType() reflect.Type {
	return reflect.TypeOf((**LtsStream)(nil)).Elem()
}

func (i *LtsStream) ToLtsStreamOutput() LtsStreamOutput {
	return i.ToLtsStreamOutputWithContext(context.Background())
}

func (i *LtsStream) ToLtsStreamOutputWithContext(ctx context.Context) LtsStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsStreamOutput)
}

// LtsStreamArrayInput is an input type that accepts LtsStreamArray and LtsStreamArrayOutput values.
// You can construct a concrete instance of `LtsStreamArrayInput` via:
//
//	LtsStreamArray{ LtsStreamArgs{...} }
type LtsStreamArrayInput interface {
	pulumi.Input

	ToLtsStreamArrayOutput() LtsStreamArrayOutput
	ToLtsStreamArrayOutputWithContext(context.Context) LtsStreamArrayOutput
}

type LtsStreamArray []LtsStreamInput

func (LtsStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LtsStream)(nil)).Elem()
}

func (i LtsStreamArray) ToLtsStreamArrayOutput() LtsStreamArrayOutput {
	return i.ToLtsStreamArrayOutputWithContext(context.Background())
}

func (i LtsStreamArray) ToLtsStreamArrayOutputWithContext(ctx context.Context) LtsStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsStreamArrayOutput)
}

// LtsStreamMapInput is an input type that accepts LtsStreamMap and LtsStreamMapOutput values.
// You can construct a concrete instance of `LtsStreamMapInput` via:
//
//	LtsStreamMap{ "key": LtsStreamArgs{...} }
type LtsStreamMapInput interface {
	pulumi.Input

	ToLtsStreamMapOutput() LtsStreamMapOutput
	ToLtsStreamMapOutputWithContext(context.Context) LtsStreamMapOutput
}

type LtsStreamMap map[string]LtsStreamInput

func (LtsStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LtsStream)(nil)).Elem()
}

func (i LtsStreamMap) ToLtsStreamMapOutput() LtsStreamMapOutput {
	return i.ToLtsStreamMapOutputWithContext(context.Background())
}

func (i LtsStreamMap) ToLtsStreamMapOutputWithContext(ctx context.Context) LtsStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsStreamMapOutput)
}

type LtsStreamOutput struct{ *pulumi.OutputState }

func (LtsStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LtsStream)(nil)).Elem()
}

func (o LtsStreamOutput) ToLtsStreamOutput() LtsStreamOutput {
	return o
}

func (o LtsStreamOutput) ToLtsStreamOutputWithContext(ctx context.Context) LtsStreamOutput {
	return o
}

func (o LtsStreamOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LtsStreamOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o LtsStreamOutput) FilterCount() pulumi.IntOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.IntOutput { return v.FilterCount }).(pulumi.IntOutput)
}

func (o LtsStreamOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o LtsStreamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o LtsStreamOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

func (o LtsStreamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LtsStreamOutput) TtlInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *LtsStream) pulumi.IntOutput { return v.TtlInDays }).(pulumi.IntOutput)
}

type LtsStreamArrayOutput struct{ *pulumi.OutputState }

func (LtsStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LtsStream)(nil)).Elem()
}

func (o LtsStreamArrayOutput) ToLtsStreamArrayOutput() LtsStreamArrayOutput {
	return o
}

func (o LtsStreamArrayOutput) ToLtsStreamArrayOutputWithContext(ctx context.Context) LtsStreamArrayOutput {
	return o
}

func (o LtsStreamArrayOutput) Index(i pulumi.IntInput) LtsStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LtsStream {
		return vs[0].([]*LtsStream)[vs[1].(int)]
	}).(LtsStreamOutput)
}

type LtsStreamMapOutput struct{ *pulumi.OutputState }

func (LtsStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LtsStream)(nil)).Elem()
}

func (o LtsStreamMapOutput) ToLtsStreamMapOutput() LtsStreamMapOutput {
	return o
}

func (o LtsStreamMapOutput) ToLtsStreamMapOutputWithContext(ctx context.Context) LtsStreamMapOutput {
	return o
}

func (o LtsStreamMapOutput) MapIndex(k pulumi.StringInput) LtsStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LtsStream {
		return vs[0].(map[string]*LtsStream)[vs[1].(string)]
	}).(LtsStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LtsStreamInput)(nil)).Elem(), &LtsStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*LtsStreamArrayInput)(nil)).Elem(), LtsStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LtsStreamMapInput)(nil)).Elem(), LtsStreamMap{})
	pulumi.RegisterOutputType(LtsStreamOutput{})
	pulumi.RegisterOutputType(LtsStreamArrayOutput{})
	pulumi.RegisterOutputType(LtsStreamMapOutput{})
}
