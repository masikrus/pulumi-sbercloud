// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DliDatabase struct {
	pulumi.CustomResourceState

	Description         pulumi.StringPtrOutput `pulumi:"description"`
	EnterpriseProjectId pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	Owner               pulumi.StringOutput    `pulumi:"owner"`
	Region              pulumi.StringOutput    `pulumi:"region"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
}

// NewDliDatabase registers a new resource with the given unique name, arguments, and options.
func NewDliDatabase(ctx *pulumi.Context,
	name string, args *DliDatabaseArgs, opts ...pulumi.ResourceOption) (*DliDatabase, error) {
	if args == nil {
		args = &DliDatabaseArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DliDatabase
	err := ctx.RegisterResource("sbercloud:index/dliDatabase:DliDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDliDatabase gets an existing DliDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDliDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DliDatabaseState, opts ...pulumi.ResourceOption) (*DliDatabase, error) {
	var resource DliDatabase
	err := ctx.ReadResource("sbercloud:index/dliDatabase:DliDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DliDatabase resources.
type dliDatabaseState struct {
	Description         *string           `pulumi:"description"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	Name                *string           `pulumi:"name"`
	Owner               *string           `pulumi:"owner"`
	Region              *string           `pulumi:"region"`
	Tags                map[string]string `pulumi:"tags"`
}

type DliDatabaseState struct {
	Description         pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Owner               pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
}

func (DliDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*dliDatabaseState)(nil)).Elem()
}

type dliDatabaseArgs struct {
	Description         *string           `pulumi:"description"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	Name                *string           `pulumi:"name"`
	Owner               *string           `pulumi:"owner"`
	Region              *string           `pulumi:"region"`
	Tags                map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DliDatabase resource.
type DliDatabaseArgs struct {
	Description         pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Owner               pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
}

func (DliDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dliDatabaseArgs)(nil)).Elem()
}

type DliDatabaseInput interface {
	pulumi.Input

	ToDliDatabaseOutput() DliDatabaseOutput
	ToDliDatabaseOutputWithContext(ctx context.Context) DliDatabaseOutput
}

func (*DliDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**DliDatabase)(nil)).Elem()
}

func (i *DliDatabase) ToDliDatabaseOutput() DliDatabaseOutput {
	return i.ToDliDatabaseOutputWithContext(context.Background())
}

func (i *DliDatabase) ToDliDatabaseOutputWithContext(ctx context.Context) DliDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliDatabaseOutput)
}

// DliDatabaseArrayInput is an input type that accepts DliDatabaseArray and DliDatabaseArrayOutput values.
// You can construct a concrete instance of `DliDatabaseArrayInput` via:
//
//	DliDatabaseArray{ DliDatabaseArgs{...} }
type DliDatabaseArrayInput interface {
	pulumi.Input

	ToDliDatabaseArrayOutput() DliDatabaseArrayOutput
	ToDliDatabaseArrayOutputWithContext(context.Context) DliDatabaseArrayOutput
}

type DliDatabaseArray []DliDatabaseInput

func (DliDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DliDatabase)(nil)).Elem()
}

func (i DliDatabaseArray) ToDliDatabaseArrayOutput() DliDatabaseArrayOutput {
	return i.ToDliDatabaseArrayOutputWithContext(context.Background())
}

func (i DliDatabaseArray) ToDliDatabaseArrayOutputWithContext(ctx context.Context) DliDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliDatabaseArrayOutput)
}

// DliDatabaseMapInput is an input type that accepts DliDatabaseMap and DliDatabaseMapOutput values.
// You can construct a concrete instance of `DliDatabaseMapInput` via:
//
//	DliDatabaseMap{ "key": DliDatabaseArgs{...} }
type DliDatabaseMapInput interface {
	pulumi.Input

	ToDliDatabaseMapOutput() DliDatabaseMapOutput
	ToDliDatabaseMapOutputWithContext(context.Context) DliDatabaseMapOutput
}

type DliDatabaseMap map[string]DliDatabaseInput

func (DliDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DliDatabase)(nil)).Elem()
}

func (i DliDatabaseMap) ToDliDatabaseMapOutput() DliDatabaseMapOutput {
	return i.ToDliDatabaseMapOutputWithContext(context.Background())
}

func (i DliDatabaseMap) ToDliDatabaseMapOutputWithContext(ctx context.Context) DliDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliDatabaseMapOutput)
}

type DliDatabaseOutput struct{ *pulumi.OutputState }

func (DliDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DliDatabase)(nil)).Elem()
}

func (o DliDatabaseOutput) ToDliDatabaseOutput() DliDatabaseOutput {
	return o
}

func (o DliDatabaseOutput) ToDliDatabaseOutputWithContext(ctx context.Context) DliDatabaseOutput {
	return o
}

func (o DliDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DliDatabaseOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DliDatabase) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o DliDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DliDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DliDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DliDatabase) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o DliDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DliDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DliDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DliDatabase) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type DliDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DliDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DliDatabase)(nil)).Elem()
}

func (o DliDatabaseArrayOutput) ToDliDatabaseArrayOutput() DliDatabaseArrayOutput {
	return o
}

func (o DliDatabaseArrayOutput) ToDliDatabaseArrayOutputWithContext(ctx context.Context) DliDatabaseArrayOutput {
	return o
}

func (o DliDatabaseArrayOutput) Index(i pulumi.IntInput) DliDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DliDatabase {
		return vs[0].([]*DliDatabase)[vs[1].(int)]
	}).(DliDatabaseOutput)
}

type DliDatabaseMapOutput struct{ *pulumi.OutputState }

func (DliDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DliDatabase)(nil)).Elem()
}

func (o DliDatabaseMapOutput) ToDliDatabaseMapOutput() DliDatabaseMapOutput {
	return o
}

func (o DliDatabaseMapOutput) ToDliDatabaseMapOutputWithContext(ctx context.Context) DliDatabaseMapOutput {
	return o
}

func (o DliDatabaseMapOutput) MapIndex(k pulumi.StringInput) DliDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DliDatabase {
		return vs[0].(map[string]*DliDatabase)[vs[1].(string)]
	}).(DliDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DliDatabaseInput)(nil)).Elem(), &DliDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*DliDatabaseArrayInput)(nil)).Elem(), DliDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DliDatabaseMapInput)(nil)).Elem(), DliDatabaseMap{})
	pulumi.RegisterOutputType(DliDatabaseOutput{})
	pulumi.RegisterOutputType(DliDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DliDatabaseMapOutput{})
}
