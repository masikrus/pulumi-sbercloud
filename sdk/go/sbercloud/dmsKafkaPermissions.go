// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DmsKafkaPermissions struct {
	pulumi.CustomResourceState

	InstanceId pulumi.StringOutput                  `pulumi:"instanceId"`
	Policies   DmsKafkaPermissionsPolicyArrayOutput `pulumi:"policies"`
	Region     pulumi.StringOutput                  `pulumi:"region"`
	TopicName  pulumi.StringOutput                  `pulumi:"topicName"`
}

// NewDmsKafkaPermissions registers a new resource with the given unique name, arguments, and options.
func NewDmsKafkaPermissions(ctx *pulumi.Context,
	name string, args *DmsKafkaPermissionsArgs, opts ...pulumi.ResourceOption) (*DmsKafkaPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsKafkaPermissions
	err := ctx.RegisterResource("sbercloud:index/dmsKafkaPermissions:DmsKafkaPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsKafkaPermissions gets an existing DmsKafkaPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsKafkaPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsKafkaPermissionsState, opts ...pulumi.ResourceOption) (*DmsKafkaPermissions, error) {
	var resource DmsKafkaPermissions
	err := ctx.ReadResource("sbercloud:index/dmsKafkaPermissions:DmsKafkaPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsKafkaPermissions resources.
type dmsKafkaPermissionsState struct {
	InstanceId *string                     `pulumi:"instanceId"`
	Policies   []DmsKafkaPermissionsPolicy `pulumi:"policies"`
	Region     *string                     `pulumi:"region"`
	TopicName  *string                     `pulumi:"topicName"`
}

type DmsKafkaPermissionsState struct {
	InstanceId pulumi.StringPtrInput
	Policies   DmsKafkaPermissionsPolicyArrayInput
	Region     pulumi.StringPtrInput
	TopicName  pulumi.StringPtrInput
}

func (DmsKafkaPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaPermissionsState)(nil)).Elem()
}

type dmsKafkaPermissionsArgs struct {
	InstanceId string                      `pulumi:"instanceId"`
	Policies   []DmsKafkaPermissionsPolicy `pulumi:"policies"`
	Region     *string                     `pulumi:"region"`
	TopicName  string                      `pulumi:"topicName"`
}

// The set of arguments for constructing a DmsKafkaPermissions resource.
type DmsKafkaPermissionsArgs struct {
	InstanceId pulumi.StringInput
	Policies   DmsKafkaPermissionsPolicyArrayInput
	Region     pulumi.StringPtrInput
	TopicName  pulumi.StringInput
}

func (DmsKafkaPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaPermissionsArgs)(nil)).Elem()
}

type DmsKafkaPermissionsInput interface {
	pulumi.Input

	ToDmsKafkaPermissionsOutput() DmsKafkaPermissionsOutput
	ToDmsKafkaPermissionsOutputWithContext(ctx context.Context) DmsKafkaPermissionsOutput
}

func (*DmsKafkaPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaPermissions)(nil)).Elem()
}

func (i *DmsKafkaPermissions) ToDmsKafkaPermissionsOutput() DmsKafkaPermissionsOutput {
	return i.ToDmsKafkaPermissionsOutputWithContext(context.Background())
}

func (i *DmsKafkaPermissions) ToDmsKafkaPermissionsOutputWithContext(ctx context.Context) DmsKafkaPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaPermissionsOutput)
}

// DmsKafkaPermissionsArrayInput is an input type that accepts DmsKafkaPermissionsArray and DmsKafkaPermissionsArrayOutput values.
// You can construct a concrete instance of `DmsKafkaPermissionsArrayInput` via:
//
//	DmsKafkaPermissionsArray{ DmsKafkaPermissionsArgs{...} }
type DmsKafkaPermissionsArrayInput interface {
	pulumi.Input

	ToDmsKafkaPermissionsArrayOutput() DmsKafkaPermissionsArrayOutput
	ToDmsKafkaPermissionsArrayOutputWithContext(context.Context) DmsKafkaPermissionsArrayOutput
}

type DmsKafkaPermissionsArray []DmsKafkaPermissionsInput

func (DmsKafkaPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaPermissions)(nil)).Elem()
}

func (i DmsKafkaPermissionsArray) ToDmsKafkaPermissionsArrayOutput() DmsKafkaPermissionsArrayOutput {
	return i.ToDmsKafkaPermissionsArrayOutputWithContext(context.Background())
}

func (i DmsKafkaPermissionsArray) ToDmsKafkaPermissionsArrayOutputWithContext(ctx context.Context) DmsKafkaPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaPermissionsArrayOutput)
}

// DmsKafkaPermissionsMapInput is an input type that accepts DmsKafkaPermissionsMap and DmsKafkaPermissionsMapOutput values.
// You can construct a concrete instance of `DmsKafkaPermissionsMapInput` via:
//
//	DmsKafkaPermissionsMap{ "key": DmsKafkaPermissionsArgs{...} }
type DmsKafkaPermissionsMapInput interface {
	pulumi.Input

	ToDmsKafkaPermissionsMapOutput() DmsKafkaPermissionsMapOutput
	ToDmsKafkaPermissionsMapOutputWithContext(context.Context) DmsKafkaPermissionsMapOutput
}

type DmsKafkaPermissionsMap map[string]DmsKafkaPermissionsInput

func (DmsKafkaPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaPermissions)(nil)).Elem()
}

func (i DmsKafkaPermissionsMap) ToDmsKafkaPermissionsMapOutput() DmsKafkaPermissionsMapOutput {
	return i.ToDmsKafkaPermissionsMapOutputWithContext(context.Background())
}

func (i DmsKafkaPermissionsMap) ToDmsKafkaPermissionsMapOutputWithContext(ctx context.Context) DmsKafkaPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaPermissionsMapOutput)
}

type DmsKafkaPermissionsOutput struct{ *pulumi.OutputState }

func (DmsKafkaPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaPermissions)(nil)).Elem()
}

func (o DmsKafkaPermissionsOutput) ToDmsKafkaPermissionsOutput() DmsKafkaPermissionsOutput {
	return o
}

func (o DmsKafkaPermissionsOutput) ToDmsKafkaPermissionsOutputWithContext(ctx context.Context) DmsKafkaPermissionsOutput {
	return o
}

func (o DmsKafkaPermissionsOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaPermissions) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DmsKafkaPermissionsOutput) Policies() DmsKafkaPermissionsPolicyArrayOutput {
	return o.ApplyT(func(v *DmsKafkaPermissions) DmsKafkaPermissionsPolicyArrayOutput { return v.Policies }).(DmsKafkaPermissionsPolicyArrayOutput)
}

func (o DmsKafkaPermissionsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaPermissions) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DmsKafkaPermissionsOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaPermissions) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type DmsKafkaPermissionsArrayOutput struct{ *pulumi.OutputState }

func (DmsKafkaPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaPermissions)(nil)).Elem()
}

func (o DmsKafkaPermissionsArrayOutput) ToDmsKafkaPermissionsArrayOutput() DmsKafkaPermissionsArrayOutput {
	return o
}

func (o DmsKafkaPermissionsArrayOutput) ToDmsKafkaPermissionsArrayOutputWithContext(ctx context.Context) DmsKafkaPermissionsArrayOutput {
	return o
}

func (o DmsKafkaPermissionsArrayOutput) Index(i pulumi.IntInput) DmsKafkaPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsKafkaPermissions {
		return vs[0].([]*DmsKafkaPermissions)[vs[1].(int)]
	}).(DmsKafkaPermissionsOutput)
}

type DmsKafkaPermissionsMapOutput struct{ *pulumi.OutputState }

func (DmsKafkaPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaPermissions)(nil)).Elem()
}

func (o DmsKafkaPermissionsMapOutput) ToDmsKafkaPermissionsMapOutput() DmsKafkaPermissionsMapOutput {
	return o
}

func (o DmsKafkaPermissionsMapOutput) ToDmsKafkaPermissionsMapOutputWithContext(ctx context.Context) DmsKafkaPermissionsMapOutput {
	return o
}

func (o DmsKafkaPermissionsMapOutput) MapIndex(k pulumi.StringInput) DmsKafkaPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsKafkaPermissions {
		return vs[0].(map[string]*DmsKafkaPermissions)[vs[1].(string)]
	}).(DmsKafkaPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaPermissionsInput)(nil)).Elem(), &DmsKafkaPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaPermissionsArrayInput)(nil)).Elem(), DmsKafkaPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaPermissionsMapInput)(nil)).Elem(), DmsKafkaPermissionsMap{})
	pulumi.RegisterOutputType(DmsKafkaPermissionsOutput{})
	pulumi.RegisterOutputType(DmsKafkaPermissionsArrayOutput{})
	pulumi.RegisterOutputType(DmsKafkaPermissionsMapOutput{})
}
