// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeServergroup struct {
	pulumi.CustomResourceState

	// schema: Internal
	FaultDomains pulumi.StringArrayOutput `pulumi:"faultDomains"`
	Members      pulumi.StringArrayOutput `pulumi:"members"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	// schema: Required
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	Region   pulumi.StringOutput      `pulumi:"region"`
}

// NewComputeServergroup registers a new resource with the given unique name, arguments, and options.
func NewComputeServergroup(ctx *pulumi.Context,
	name string, args *ComputeServergroupArgs, opts ...pulumi.ResourceOption) (*ComputeServergroup, error) {
	if args == nil {
		args = &ComputeServergroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeServergroup
	err := ctx.RegisterResource("sbercloud:index/computeServergroup:ComputeServergroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeServergroup gets an existing ComputeServergroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeServergroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeServergroupState, opts ...pulumi.ResourceOption) (*ComputeServergroup, error) {
	var resource ComputeServergroup
	err := ctx.ReadResource("sbercloud:index/computeServergroup:ComputeServergroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeServergroup resources.
type computeServergroupState struct {
	// schema: Internal
	FaultDomains []string `pulumi:"faultDomains"`
	Members      []string `pulumi:"members"`
	Name         *string  `pulumi:"name"`
	// schema: Required
	Policies []string `pulumi:"policies"`
	Region   *string  `pulumi:"region"`
}

type ComputeServergroupState struct {
	// schema: Internal
	FaultDomains pulumi.StringArrayInput
	Members      pulumi.StringArrayInput
	Name         pulumi.StringPtrInput
	// schema: Required
	Policies pulumi.StringArrayInput
	Region   pulumi.StringPtrInput
}

func (ComputeServergroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeServergroupState)(nil)).Elem()
}

type computeServergroupArgs struct {
	Members []string `pulumi:"members"`
	Name    *string  `pulumi:"name"`
	// schema: Required
	Policies []string `pulumi:"policies"`
	Region   *string  `pulumi:"region"`
}

// The set of arguments for constructing a ComputeServergroup resource.
type ComputeServergroupArgs struct {
	Members pulumi.StringArrayInput
	Name    pulumi.StringPtrInput
	// schema: Required
	Policies pulumi.StringArrayInput
	Region   pulumi.StringPtrInput
}

func (ComputeServergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeServergroupArgs)(nil)).Elem()
}

type ComputeServergroupInput interface {
	pulumi.Input

	ToComputeServergroupOutput() ComputeServergroupOutput
	ToComputeServergroupOutputWithContext(ctx context.Context) ComputeServergroupOutput
}

func (*ComputeServergroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeServergroup)(nil)).Elem()
}

func (i *ComputeServergroup) ToComputeServergroupOutput() ComputeServergroupOutput {
	return i.ToComputeServergroupOutputWithContext(context.Background())
}

func (i *ComputeServergroup) ToComputeServergroupOutputWithContext(ctx context.Context) ComputeServergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeServergroupOutput)
}

// ComputeServergroupArrayInput is an input type that accepts ComputeServergroupArray and ComputeServergroupArrayOutput values.
// You can construct a concrete instance of `ComputeServergroupArrayInput` via:
//
//	ComputeServergroupArray{ ComputeServergroupArgs{...} }
type ComputeServergroupArrayInput interface {
	pulumi.Input

	ToComputeServergroupArrayOutput() ComputeServergroupArrayOutput
	ToComputeServergroupArrayOutputWithContext(context.Context) ComputeServergroupArrayOutput
}

type ComputeServergroupArray []ComputeServergroupInput

func (ComputeServergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeServergroup)(nil)).Elem()
}

func (i ComputeServergroupArray) ToComputeServergroupArrayOutput() ComputeServergroupArrayOutput {
	return i.ToComputeServergroupArrayOutputWithContext(context.Background())
}

func (i ComputeServergroupArray) ToComputeServergroupArrayOutputWithContext(ctx context.Context) ComputeServergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeServergroupArrayOutput)
}

// ComputeServergroupMapInput is an input type that accepts ComputeServergroupMap and ComputeServergroupMapOutput values.
// You can construct a concrete instance of `ComputeServergroupMapInput` via:
//
//	ComputeServergroupMap{ "key": ComputeServergroupArgs{...} }
type ComputeServergroupMapInput interface {
	pulumi.Input

	ToComputeServergroupMapOutput() ComputeServergroupMapOutput
	ToComputeServergroupMapOutputWithContext(context.Context) ComputeServergroupMapOutput
}

type ComputeServergroupMap map[string]ComputeServergroupInput

func (ComputeServergroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeServergroup)(nil)).Elem()
}

func (i ComputeServergroupMap) ToComputeServergroupMapOutput() ComputeServergroupMapOutput {
	return i.ToComputeServergroupMapOutputWithContext(context.Background())
}

func (i ComputeServergroupMap) ToComputeServergroupMapOutputWithContext(ctx context.Context) ComputeServergroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeServergroupMapOutput)
}

type ComputeServergroupOutput struct{ *pulumi.OutputState }

func (ComputeServergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeServergroup)(nil)).Elem()
}

func (o ComputeServergroupOutput) ToComputeServergroupOutput() ComputeServergroupOutput {
	return o
}

func (o ComputeServergroupOutput) ToComputeServergroupOutputWithContext(ctx context.Context) ComputeServergroupOutput {
	return o
}

// schema: Internal
func (o ComputeServergroupOutput) FaultDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeServergroup) pulumi.StringArrayOutput { return v.FaultDomains }).(pulumi.StringArrayOutput)
}

func (o ComputeServergroupOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeServergroup) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ComputeServergroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeServergroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// schema: Required
func (o ComputeServergroupOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeServergroup) pulumi.StringArrayOutput { return v.Policies }).(pulumi.StringArrayOutput)
}

func (o ComputeServergroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeServergroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ComputeServergroupArrayOutput struct{ *pulumi.OutputState }

func (ComputeServergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeServergroup)(nil)).Elem()
}

func (o ComputeServergroupArrayOutput) ToComputeServergroupArrayOutput() ComputeServergroupArrayOutput {
	return o
}

func (o ComputeServergroupArrayOutput) ToComputeServergroupArrayOutputWithContext(ctx context.Context) ComputeServergroupArrayOutput {
	return o
}

func (o ComputeServergroupArrayOutput) Index(i pulumi.IntInput) ComputeServergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeServergroup {
		return vs[0].([]*ComputeServergroup)[vs[1].(int)]
	}).(ComputeServergroupOutput)
}

type ComputeServergroupMapOutput struct{ *pulumi.OutputState }

func (ComputeServergroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeServergroup)(nil)).Elem()
}

func (o ComputeServergroupMapOutput) ToComputeServergroupMapOutput() ComputeServergroupMapOutput {
	return o
}

func (o ComputeServergroupMapOutput) ToComputeServergroupMapOutputWithContext(ctx context.Context) ComputeServergroupMapOutput {
	return o
}

func (o ComputeServergroupMapOutput) MapIndex(k pulumi.StringInput) ComputeServergroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeServergroup {
		return vs[0].(map[string]*ComputeServergroup)[vs[1].(string)]
	}).(ComputeServergroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeServergroupInput)(nil)).Elem(), &ComputeServergroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeServergroupArrayInput)(nil)).Elem(), ComputeServergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeServergroupMapInput)(nil)).Elem(), ComputeServergroupMap{})
	pulumi.RegisterOutputType(ComputeServergroupOutput{})
	pulumi.RegisterOutputType(ComputeServergroupArrayOutput{})
	pulumi.RegisterOutputType(ComputeServergroupMapOutput{})
}
