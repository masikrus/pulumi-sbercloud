// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsSqlserverAccount struct {
	pulumi.CustomResourceState

	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the password of the DB account.
	Password pulumi.StringOutput `pulumi:"password"`
	Region   pulumi.StringOutput `pulumi:"region"`
	// Indicates the DB user status.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewRdsSqlserverAccount registers a new resource with the given unique name, arguments, and options.
func NewRdsSqlserverAccount(ctx *pulumi.Context,
	name string, args *RdsSqlserverAccountArgs, opts ...pulumi.ResourceOption) (*RdsSqlserverAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsSqlserverAccount
	err := ctx.RegisterResource("sbercloud:index/rdsSqlserverAccount:RdsSqlserverAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsSqlserverAccount gets an existing RdsSqlserverAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsSqlserverAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsSqlserverAccountState, opts ...pulumi.ResourceOption) (*RdsSqlserverAccount, error) {
	var resource RdsSqlserverAccount
	err := ctx.ReadResource("sbercloud:index/rdsSqlserverAccount:RdsSqlserverAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsSqlserverAccount resources.
type rdsSqlserverAccountState struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password *string `pulumi:"password"`
	Region   *string `pulumi:"region"`
	// Indicates the DB user status.
	State *string `pulumi:"state"`
}

type RdsSqlserverAccountState struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringPtrInput
	Region   pulumi.StringPtrInput
	// Indicates the DB user status.
	State pulumi.StringPtrInput
}

func (RdsSqlserverAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlserverAccountState)(nil)).Elem()
}

type rdsSqlserverAccountArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password string  `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

// The set of arguments for constructing a RdsSqlserverAccount resource.
type RdsSqlserverAccountArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	InstanceId pulumi.StringInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringInput
	Region   pulumi.StringPtrInput
}

func (RdsSqlserverAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsSqlserverAccountArgs)(nil)).Elem()
}

type RdsSqlserverAccountInput interface {
	pulumi.Input

	ToRdsSqlserverAccountOutput() RdsSqlserverAccountOutput
	ToRdsSqlserverAccountOutputWithContext(ctx context.Context) RdsSqlserverAccountOutput
}

func (*RdsSqlserverAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlserverAccount)(nil)).Elem()
}

func (i *RdsSqlserverAccount) ToRdsSqlserverAccountOutput() RdsSqlserverAccountOutput {
	return i.ToRdsSqlserverAccountOutputWithContext(context.Background())
}

func (i *RdsSqlserverAccount) ToRdsSqlserverAccountOutputWithContext(ctx context.Context) RdsSqlserverAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverAccountOutput)
}

// RdsSqlserverAccountArrayInput is an input type that accepts RdsSqlserverAccountArray and RdsSqlserverAccountArrayOutput values.
// You can construct a concrete instance of `RdsSqlserverAccountArrayInput` via:
//
//	RdsSqlserverAccountArray{ RdsSqlserverAccountArgs{...} }
type RdsSqlserverAccountArrayInput interface {
	pulumi.Input

	ToRdsSqlserverAccountArrayOutput() RdsSqlserverAccountArrayOutput
	ToRdsSqlserverAccountArrayOutputWithContext(context.Context) RdsSqlserverAccountArrayOutput
}

type RdsSqlserverAccountArray []RdsSqlserverAccountInput

func (RdsSqlserverAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlserverAccount)(nil)).Elem()
}

func (i RdsSqlserverAccountArray) ToRdsSqlserverAccountArrayOutput() RdsSqlserverAccountArrayOutput {
	return i.ToRdsSqlserverAccountArrayOutputWithContext(context.Background())
}

func (i RdsSqlserverAccountArray) ToRdsSqlserverAccountArrayOutputWithContext(ctx context.Context) RdsSqlserverAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverAccountArrayOutput)
}

// RdsSqlserverAccountMapInput is an input type that accepts RdsSqlserverAccountMap and RdsSqlserverAccountMapOutput values.
// You can construct a concrete instance of `RdsSqlserverAccountMapInput` via:
//
//	RdsSqlserverAccountMap{ "key": RdsSqlserverAccountArgs{...} }
type RdsSqlserverAccountMapInput interface {
	pulumi.Input

	ToRdsSqlserverAccountMapOutput() RdsSqlserverAccountMapOutput
	ToRdsSqlserverAccountMapOutputWithContext(context.Context) RdsSqlserverAccountMapOutput
}

type RdsSqlserverAccountMap map[string]RdsSqlserverAccountInput

func (RdsSqlserverAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlserverAccount)(nil)).Elem()
}

func (i RdsSqlserverAccountMap) ToRdsSqlserverAccountMapOutput() RdsSqlserverAccountMapOutput {
	return i.ToRdsSqlserverAccountMapOutputWithContext(context.Background())
}

func (i RdsSqlserverAccountMap) ToRdsSqlserverAccountMapOutputWithContext(ctx context.Context) RdsSqlserverAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsSqlserverAccountMapOutput)
}

type RdsSqlserverAccountOutput struct{ *pulumi.OutputState }

func (RdsSqlserverAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsSqlserverAccount)(nil)).Elem()
}

func (o RdsSqlserverAccountOutput) ToRdsSqlserverAccountOutput() RdsSqlserverAccountOutput {
	return o
}

func (o RdsSqlserverAccountOutput) ToRdsSqlserverAccountOutputWithContext(ctx context.Context) RdsSqlserverAccountOutput {
	return o
}

// Specifies the ID of the RDS SQLServer instance.
func (o RdsSqlserverAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the username of the DB account.
func (o RdsSqlserverAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of the DB account.
func (o RdsSqlserverAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverAccount) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o RdsSqlserverAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the DB user status.
func (o RdsSqlserverAccountOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsSqlserverAccount) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RdsSqlserverAccountArrayOutput struct{ *pulumi.OutputState }

func (RdsSqlserverAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsSqlserverAccount)(nil)).Elem()
}

func (o RdsSqlserverAccountArrayOutput) ToRdsSqlserverAccountArrayOutput() RdsSqlserverAccountArrayOutput {
	return o
}

func (o RdsSqlserverAccountArrayOutput) ToRdsSqlserverAccountArrayOutputWithContext(ctx context.Context) RdsSqlserverAccountArrayOutput {
	return o
}

func (o RdsSqlserverAccountArrayOutput) Index(i pulumi.IntInput) RdsSqlserverAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsSqlserverAccount {
		return vs[0].([]*RdsSqlserverAccount)[vs[1].(int)]
	}).(RdsSqlserverAccountOutput)
}

type RdsSqlserverAccountMapOutput struct{ *pulumi.OutputState }

func (RdsSqlserverAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsSqlserverAccount)(nil)).Elem()
}

func (o RdsSqlserverAccountMapOutput) ToRdsSqlserverAccountMapOutput() RdsSqlserverAccountMapOutput {
	return o
}

func (o RdsSqlserverAccountMapOutput) ToRdsSqlserverAccountMapOutputWithContext(ctx context.Context) RdsSqlserverAccountMapOutput {
	return o
}

func (o RdsSqlserverAccountMapOutput) MapIndex(k pulumi.StringInput) RdsSqlserverAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsSqlserverAccount {
		return vs[0].(map[string]*RdsSqlserverAccount)[vs[1].(string)]
	}).(RdsSqlserverAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverAccountInput)(nil)).Elem(), &RdsSqlserverAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverAccountArrayInput)(nil)).Elem(), RdsSqlserverAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsSqlserverAccountMapInput)(nil)).Elem(), RdsSqlserverAccountMap{})
	pulumi.RegisterOutputType(RdsSqlserverAccountOutput{})
	pulumi.RegisterOutputType(RdsSqlserverAccountArrayOutput{})
	pulumi.RegisterOutputType(RdsSqlserverAccountMapOutput{})
}
