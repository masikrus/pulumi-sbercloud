// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DwsCluster struct {
	pulumi.CustomResourceState

	// The availability zone in which to create the cluster instance.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The creation time of the cluster.
	Created pulumi.StringOutput `pulumi:"created"`
	// The description of the cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Dedicated storage pool ID.
	DssPoolId pulumi.StringOutput `pulumi:"dssPoolId"`
	// The ID of the ELB load balancer.
	ElbId pulumi.StringPtrOutput `pulumi:"elbId"`
	// The ELB information bound to the cluster.
	Elbs DwsClusterElbArrayOutput `pulumi:"elbs"`
	// Private network connection information about the cluster.
	Endpoints DwsClusterEndpointArrayOutput `pulumi:"endpoints"`
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup pulumi.BoolPtrOutput `pulumi:"forceBackup"`
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot pulumi.IntPtrOutput `pulumi:"keepLastManualSnapshot"`
	// The KMS key ID.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// Whether to enable logical cluster.
	LogicalClusterEnable pulumi.BoolPtrOutput `pulumi:"logicalClusterEnable"`
	// Whether to enable LTS.
	LtsEnable pulumi.BoolPtrOutput `pulumi:"ltsEnable"`
	// Cluster maintenance window.
	MaintainWindows DwsClusterMaintainWindowArrayOutput `pulumi:"maintainWindows"`
	// The cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The subnet ID.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The flavor of the cluster.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// schema: Required
	NumberOfCn pulumi.IntPtrOutput `pulumi:"numberOfCn"`
	// Number of nodes in a cluster.
	NumberOfNode pulumi.IntOutput `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// List of private network IP addresses.
	PrivateIps pulumi.StringArrayOutput `pulumi:"privateIps"`
	// Public network connection information about the cluster.
	PublicEndpoints DwsClusterPublicEndpointArrayOutput `pulumi:"publicEndpoints"`
	PublicIp        DwsClusterPublicIpOutput            `pulumi:"publicIp"`
	RecentEvent     pulumi.IntOutput                    `pulumi:"recentEvent"`
	Region          pulumi.StringOutput                 `pulumi:"region"`
	// The security group ID.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The cluster status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Sub-status of clusters in the AVAILABLE state.
	SubStatus pulumi.StringOutput `pulumi:"subStatus"`
	// The key/value pairs to associate with the cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Cluster management task.
	TaskStatus pulumi.StringOutput `pulumi:"taskStatus"`
	// The updated time of the cluster.
	Updated pulumi.StringOutput `pulumi:"updated"`
	// Administrator username for logging in to a data warehouse cluster.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd pulumi.StringOutput `pulumi:"userPwd"`
	// schema: Required
	Version pulumi.StringOutput    `pulumi:"version"`
	Volume  DwsClusterVolumeOutput `pulumi:"volume"`
	// The VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDwsCluster registers a new resource with the given unique name, arguments, and options.
func NewDwsCluster(ctx *pulumi.Context,
	name string, args *DwsClusterArgs, opts ...pulumi.ResourceOption) (*DwsCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.NumberOfNode == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfNode'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPwd == nil {
		return nil, errors.New("invalid value for required argument 'UserPwd'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.UserPwd != nil {
		args.UserPwd = pulumi.ToSecret(args.UserPwd).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"userPwd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DwsCluster
	err := ctx.RegisterResource("sbercloud:index/dwsCluster:DwsCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDwsCluster gets an existing DwsCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDwsCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DwsClusterState, opts ...pulumi.ResourceOption) (*DwsCluster, error) {
	var resource DwsCluster
	err := ctx.ReadResource("sbercloud:index/dwsCluster:DwsCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DwsCluster resources.
type dwsClusterState struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The creation time of the cluster.
	Created *string `pulumi:"created"`
	// The description of the cluster.
	Description *string `pulumi:"description"`
	// Dedicated storage pool ID.
	DssPoolId *string `pulumi:"dssPoolId"`
	// The ID of the ELB load balancer.
	ElbId *string `pulumi:"elbId"`
	// The ELB information bound to the cluster.
	Elbs []DwsClusterElb `pulumi:"elbs"`
	// Private network connection information about the cluster.
	Endpoints []DwsClusterEndpoint `pulumi:"endpoints"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup *bool `pulumi:"forceBackup"`
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot *int `pulumi:"keepLastManualSnapshot"`
	// The KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Whether to enable logical cluster.
	LogicalClusterEnable *bool `pulumi:"logicalClusterEnable"`
	// Whether to enable LTS.
	LtsEnable *bool `pulumi:"ltsEnable"`
	// Cluster maintenance window.
	MaintainWindows []DwsClusterMaintainWindow `pulumi:"maintainWindows"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// The subnet ID.
	NetworkId *string `pulumi:"networkId"`
	// The flavor of the cluster.
	NodeType *string `pulumi:"nodeType"`
	// schema: Required
	NumberOfCn *int `pulumi:"numberOfCn"`
	// Number of nodes in a cluster.
	NumberOfNode *int `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port *int `pulumi:"port"`
	// List of private network IP addresses.
	PrivateIps []string `pulumi:"privateIps"`
	// Public network connection information about the cluster.
	PublicEndpoints []DwsClusterPublicEndpoint `pulumi:"publicEndpoints"`
	PublicIp        *DwsClusterPublicIp        `pulumi:"publicIp"`
	RecentEvent     *int                       `pulumi:"recentEvent"`
	Region          *string                    `pulumi:"region"`
	// The security group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The cluster status.
	Status *string `pulumi:"status"`
	// Sub-status of clusters in the AVAILABLE state.
	SubStatus *string `pulumi:"subStatus"`
	// The key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Cluster management task.
	TaskStatus *string `pulumi:"taskStatus"`
	// The updated time of the cluster.
	Updated *string `pulumi:"updated"`
	// Administrator username for logging in to a data warehouse cluster.
	UserName *string `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd *string `pulumi:"userPwd"`
	// schema: Required
	Version *string           `pulumi:"version"`
	Volume  *DwsClusterVolume `pulumi:"volume"`
	// The VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

type DwsClusterState struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone pulumi.StringPtrInput
	// The creation time of the cluster.
	Created pulumi.StringPtrInput
	// The description of the cluster.
	Description pulumi.StringPtrInput
	// Dedicated storage pool ID.
	DssPoolId pulumi.StringPtrInput
	// The ID of the ELB load balancer.
	ElbId pulumi.StringPtrInput
	// The ELB information bound to the cluster.
	Elbs DwsClusterElbArrayInput
	// Private network connection information about the cluster.
	Endpoints DwsClusterEndpointArrayInput
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup pulumi.BoolPtrInput
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot pulumi.IntPtrInput
	// The KMS key ID.
	KmsKeyId pulumi.StringPtrInput
	// Whether to enable logical cluster.
	LogicalClusterEnable pulumi.BoolPtrInput
	// Whether to enable LTS.
	LtsEnable pulumi.BoolPtrInput
	// Cluster maintenance window.
	MaintainWindows DwsClusterMaintainWindowArrayInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// The subnet ID.
	NetworkId pulumi.StringPtrInput
	// The flavor of the cluster.
	NodeType pulumi.StringPtrInput
	// schema: Required
	NumberOfCn pulumi.IntPtrInput
	// Number of nodes in a cluster.
	NumberOfNode pulumi.IntPtrInput
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntPtrInput
	// List of private network IP addresses.
	PrivateIps pulumi.StringArrayInput
	// Public network connection information about the cluster.
	PublicEndpoints DwsClusterPublicEndpointArrayInput
	PublicIp        DwsClusterPublicIpPtrInput
	RecentEvent     pulumi.IntPtrInput
	Region          pulumi.StringPtrInput
	// The security group ID.
	SecurityGroupId pulumi.StringPtrInput
	// The cluster status.
	Status pulumi.StringPtrInput
	// Sub-status of clusters in the AVAILABLE state.
	SubStatus pulumi.StringPtrInput
	// The key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Cluster management task.
	TaskStatus pulumi.StringPtrInput
	// The updated time of the cluster.
	Updated pulumi.StringPtrInput
	// Administrator username for logging in to a data warehouse cluster.
	UserName pulumi.StringPtrInput
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd pulumi.StringPtrInput
	// schema: Required
	Version pulumi.StringPtrInput
	Volume  DwsClusterVolumePtrInput
	// The VPC ID.
	VpcId pulumi.StringPtrInput
}

func (DwsClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dwsClusterState)(nil)).Elem()
}

type dwsClusterArgs struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The description of the cluster.
	Description *string `pulumi:"description"`
	// Dedicated storage pool ID.
	DssPoolId *string `pulumi:"dssPoolId"`
	// The ID of the ELB load balancer.
	ElbId *string `pulumi:"elbId"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup *bool `pulumi:"forceBackup"`
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot *int `pulumi:"keepLastManualSnapshot"`
	// The KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Whether to enable logical cluster.
	LogicalClusterEnable *bool `pulumi:"logicalClusterEnable"`
	// Whether to enable LTS.
	LtsEnable *bool `pulumi:"ltsEnable"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// The subnet ID.
	NetworkId string `pulumi:"networkId"`
	// The flavor of the cluster.
	NodeType string `pulumi:"nodeType"`
	// schema: Required
	NumberOfCn *int `pulumi:"numberOfCn"`
	// Number of nodes in a cluster.
	NumberOfNode int `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port     *int                `pulumi:"port"`
	PublicIp *DwsClusterPublicIp `pulumi:"publicIp"`
	Region   *string             `pulumi:"region"`
	// The security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Administrator username for logging in to a data warehouse cluster.
	UserName string `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd string `pulumi:"userPwd"`
	// schema: Required
	Version *string           `pulumi:"version"`
	Volume  *DwsClusterVolume `pulumi:"volume"`
	// The VPC ID.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a DwsCluster resource.
type DwsClusterArgs struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone pulumi.StringInput
	// The description of the cluster.
	Description pulumi.StringPtrInput
	// Dedicated storage pool ID.
	DssPoolId pulumi.StringPtrInput
	// The ID of the ELB load balancer.
	ElbId pulumi.StringPtrInput
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup pulumi.BoolPtrInput
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot pulumi.IntPtrInput
	// The KMS key ID.
	KmsKeyId pulumi.StringPtrInput
	// Whether to enable logical cluster.
	LogicalClusterEnable pulumi.BoolPtrInput
	// Whether to enable LTS.
	LtsEnable pulumi.BoolPtrInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// The subnet ID.
	NetworkId pulumi.StringInput
	// The flavor of the cluster.
	NodeType pulumi.StringInput
	// schema: Required
	NumberOfCn pulumi.IntPtrInput
	// Number of nodes in a cluster.
	NumberOfNode pulumi.IntInput
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port     pulumi.IntPtrInput
	PublicIp DwsClusterPublicIpPtrInput
	Region   pulumi.StringPtrInput
	// The security group ID.
	SecurityGroupId pulumi.StringInput
	// The key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Administrator username for logging in to a data warehouse cluster.
	UserName pulumi.StringInput
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd pulumi.StringInput
	// schema: Required
	Version pulumi.StringPtrInput
	Volume  DwsClusterVolumePtrInput
	// The VPC ID.
	VpcId pulumi.StringInput
}

func (DwsClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dwsClusterArgs)(nil)).Elem()
}

type DwsClusterInput interface {
	pulumi.Input

	ToDwsClusterOutput() DwsClusterOutput
	ToDwsClusterOutputWithContext(ctx context.Context) DwsClusterOutput
}

func (*DwsCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DwsCluster)(nil)).Elem()
}

func (i *DwsCluster) ToDwsClusterOutput() DwsClusterOutput {
	return i.ToDwsClusterOutputWithContext(context.Background())
}

func (i *DwsCluster) ToDwsClusterOutputWithContext(ctx context.Context) DwsClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DwsClusterOutput)
}

// DwsClusterArrayInput is an input type that accepts DwsClusterArray and DwsClusterArrayOutput values.
// You can construct a concrete instance of `DwsClusterArrayInput` via:
//
//	DwsClusterArray{ DwsClusterArgs{...} }
type DwsClusterArrayInput interface {
	pulumi.Input

	ToDwsClusterArrayOutput() DwsClusterArrayOutput
	ToDwsClusterArrayOutputWithContext(context.Context) DwsClusterArrayOutput
}

type DwsClusterArray []DwsClusterInput

func (DwsClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DwsCluster)(nil)).Elem()
}

func (i DwsClusterArray) ToDwsClusterArrayOutput() DwsClusterArrayOutput {
	return i.ToDwsClusterArrayOutputWithContext(context.Background())
}

func (i DwsClusterArray) ToDwsClusterArrayOutputWithContext(ctx context.Context) DwsClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DwsClusterArrayOutput)
}

// DwsClusterMapInput is an input type that accepts DwsClusterMap and DwsClusterMapOutput values.
// You can construct a concrete instance of `DwsClusterMapInput` via:
//
//	DwsClusterMap{ "key": DwsClusterArgs{...} }
type DwsClusterMapInput interface {
	pulumi.Input

	ToDwsClusterMapOutput() DwsClusterMapOutput
	ToDwsClusterMapOutputWithContext(context.Context) DwsClusterMapOutput
}

type DwsClusterMap map[string]DwsClusterInput

func (DwsClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DwsCluster)(nil)).Elem()
}

func (i DwsClusterMap) ToDwsClusterMapOutput() DwsClusterMapOutput {
	return i.ToDwsClusterMapOutputWithContext(context.Background())
}

func (i DwsClusterMap) ToDwsClusterMapOutputWithContext(ctx context.Context) DwsClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DwsClusterMapOutput)
}

type DwsClusterOutput struct{ *pulumi.OutputState }

func (DwsClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DwsCluster)(nil)).Elem()
}

func (o DwsClusterOutput) ToDwsClusterOutput() DwsClusterOutput {
	return o
}

func (o DwsClusterOutput) ToDwsClusterOutputWithContext(ctx context.Context) DwsClusterOutput {
	return o
}

// The availability zone in which to create the cluster instance.
func (o DwsClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The creation time of the cluster.
func (o DwsClusterOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The description of the cluster.
func (o DwsClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Dedicated storage pool ID.
func (o DwsClusterOutput) DssPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.DssPoolId }).(pulumi.StringOutput)
}

// The ID of the ELB load balancer.
func (o DwsClusterOutput) ElbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringPtrOutput { return v.ElbId }).(pulumi.StringPtrOutput)
}

// The ELB information bound to the cluster.
func (o DwsClusterOutput) Elbs() DwsClusterElbArrayOutput {
	return o.ApplyT(func(v *DwsCluster) DwsClusterElbArrayOutput { return v.Elbs }).(DwsClusterElbArrayOutput)
}

// Private network connection information about the cluster.
func (o DwsClusterOutput) Endpoints() DwsClusterEndpointArrayOutput {
	return o.ApplyT(func(v *DwsCluster) DwsClusterEndpointArrayOutput { return v.Endpoints }).(DwsClusterEndpointArrayOutput)
}

// The enterprise project ID.
func (o DwsClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Whether to automatically execute snapshot when shrinking the number of nodes.
func (o DwsClusterOutput) ForceBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.BoolPtrOutput { return v.ForceBackup }).(pulumi.BoolPtrOutput)
}

// The number of latest manual snapshots that need to be retained when deleting the cluster.
func (o DwsClusterOutput) KeepLastManualSnapshot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.IntPtrOutput { return v.KeepLastManualSnapshot }).(pulumi.IntPtrOutput)
}

// The KMS key ID.
func (o DwsClusterOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Whether to enable logical cluster.
func (o DwsClusterOutput) LogicalClusterEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.BoolPtrOutput { return v.LogicalClusterEnable }).(pulumi.BoolPtrOutput)
}

// Whether to enable LTS.
func (o DwsClusterOutput) LtsEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.BoolPtrOutput { return v.LtsEnable }).(pulumi.BoolPtrOutput)
}

// Cluster maintenance window.
func (o DwsClusterOutput) MaintainWindows() DwsClusterMaintainWindowArrayOutput {
	return o.ApplyT(func(v *DwsCluster) DwsClusterMaintainWindowArrayOutput { return v.MaintainWindows }).(DwsClusterMaintainWindowArrayOutput)
}

// The cluster name.
func (o DwsClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The subnet ID.
func (o DwsClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The flavor of the cluster.
func (o DwsClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// schema: Required
func (o DwsClusterOutput) NumberOfCn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.IntPtrOutput { return v.NumberOfCn }).(pulumi.IntPtrOutput)
}

// Number of nodes in a cluster.
func (o DwsClusterOutput) NumberOfNode() pulumi.IntOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.IntOutput { return v.NumberOfNode }).(pulumi.IntOutput)
}

// Service port of a cluster (8000 to 10000). The default value is 8000.
func (o DwsClusterOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// List of private network IP addresses.
func (o DwsClusterOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringArrayOutput { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// Public network connection information about the cluster.
func (o DwsClusterOutput) PublicEndpoints() DwsClusterPublicEndpointArrayOutput {
	return o.ApplyT(func(v *DwsCluster) DwsClusterPublicEndpointArrayOutput { return v.PublicEndpoints }).(DwsClusterPublicEndpointArrayOutput)
}

func (o DwsClusterOutput) PublicIp() DwsClusterPublicIpOutput {
	return o.ApplyT(func(v *DwsCluster) DwsClusterPublicIpOutput { return v.PublicIp }).(DwsClusterPublicIpOutput)
}

func (o DwsClusterOutput) RecentEvent() pulumi.IntOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.IntOutput { return v.RecentEvent }).(pulumi.IntOutput)
}

func (o DwsClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The security group ID.
func (o DwsClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The cluster status.
func (o DwsClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Sub-status of clusters in the AVAILABLE state.
func (o DwsClusterOutput) SubStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.SubStatus }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the cluster.
func (o DwsClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Cluster management task.
func (o DwsClusterOutput) TaskStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.TaskStatus }).(pulumi.StringOutput)
}

// The updated time of the cluster.
func (o DwsClusterOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// Administrator username for logging in to a data warehouse cluster.
func (o DwsClusterOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Administrator password for logging in to a data warehouse cluster.
func (o DwsClusterOutput) UserPwd() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.UserPwd }).(pulumi.StringOutput)
}

// schema: Required
func (o DwsClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o DwsClusterOutput) Volume() DwsClusterVolumeOutput {
	return o.ApplyT(func(v *DwsCluster) DwsClusterVolumeOutput { return v.Volume }).(DwsClusterVolumeOutput)
}

// The VPC ID.
func (o DwsClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DwsCluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type DwsClusterArrayOutput struct{ *pulumi.OutputState }

func (DwsClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DwsCluster)(nil)).Elem()
}

func (o DwsClusterArrayOutput) ToDwsClusterArrayOutput() DwsClusterArrayOutput {
	return o
}

func (o DwsClusterArrayOutput) ToDwsClusterArrayOutputWithContext(ctx context.Context) DwsClusterArrayOutput {
	return o
}

func (o DwsClusterArrayOutput) Index(i pulumi.IntInput) DwsClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DwsCluster {
		return vs[0].([]*DwsCluster)[vs[1].(int)]
	}).(DwsClusterOutput)
}

type DwsClusterMapOutput struct{ *pulumi.OutputState }

func (DwsClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DwsCluster)(nil)).Elem()
}

func (o DwsClusterMapOutput) ToDwsClusterMapOutput() DwsClusterMapOutput {
	return o
}

func (o DwsClusterMapOutput) ToDwsClusterMapOutputWithContext(ctx context.Context) DwsClusterMapOutput {
	return o
}

func (o DwsClusterMapOutput) MapIndex(k pulumi.StringInput) DwsClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DwsCluster {
		return vs[0].(map[string]*DwsCluster)[vs[1].(string)]
	}).(DwsClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DwsClusterInput)(nil)).Elem(), &DwsCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DwsClusterArrayInput)(nil)).Elem(), DwsClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DwsClusterMapInput)(nil)).Elem(), DwsClusterMap{})
	pulumi.RegisterOutputType(DwsClusterOutput{})
	pulumi.RegisterOutputType(DwsClusterArrayOutput{})
	pulumi.RegisterOutputType(DwsClusterMapOutput{})
}
