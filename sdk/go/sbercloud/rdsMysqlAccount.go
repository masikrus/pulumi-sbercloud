// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsMysqlAccount struct {
	pulumi.CustomResourceState

	// Specifies remarks of the DB account.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the password of the DB account.
	Password pulumi.StringOutput `pulumi:"password"`
	Region   pulumi.StringOutput `pulumi:"region"`
}

// NewRdsMysqlAccount registers a new resource with the given unique name, arguments, and options.
func NewRdsMysqlAccount(ctx *pulumi.Context,
	name string, args *RdsMysqlAccountArgs, opts ...pulumi.ResourceOption) (*RdsMysqlAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsMysqlAccount
	err := ctx.RegisterResource("sbercloud:index/rdsMysqlAccount:RdsMysqlAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsMysqlAccount gets an existing RdsMysqlAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsMysqlAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsMysqlAccountState, opts ...pulumi.ResourceOption) (*RdsMysqlAccount, error) {
	var resource RdsMysqlAccount
	err := ctx.ReadResource("sbercloud:index/rdsMysqlAccount:RdsMysqlAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsMysqlAccount resources.
type rdsMysqlAccountState struct {
	// Specifies remarks of the DB account.
	Description *string `pulumi:"description"`
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts []string `pulumi:"hosts"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password *string `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

type RdsMysqlAccountState struct {
	// Specifies remarks of the DB account.
	Description pulumi.StringPtrInput
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts pulumi.StringArrayInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringPtrInput
	Region   pulumi.StringPtrInput
}

func (RdsMysqlAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsMysqlAccountState)(nil)).Elem()
}

type rdsMysqlAccountArgs struct {
	// Specifies remarks of the DB account.
	Description *string `pulumi:"description"`
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts []string `pulumi:"hosts"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password string  `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

// The set of arguments for constructing a RdsMysqlAccount resource.
type RdsMysqlAccountArgs struct {
	// Specifies remarks of the DB account.
	Description pulumi.StringPtrInput
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts pulumi.StringArrayInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringInput
	Region   pulumi.StringPtrInput
}

func (RdsMysqlAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsMysqlAccountArgs)(nil)).Elem()
}

type RdsMysqlAccountInput interface {
	pulumi.Input

	ToRdsMysqlAccountOutput() RdsMysqlAccountOutput
	ToRdsMysqlAccountOutputWithContext(ctx context.Context) RdsMysqlAccountOutput
}

func (*RdsMysqlAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsMysqlAccount)(nil)).Elem()
}

func (i *RdsMysqlAccount) ToRdsMysqlAccountOutput() RdsMysqlAccountOutput {
	return i.ToRdsMysqlAccountOutputWithContext(context.Background())
}

func (i *RdsMysqlAccount) ToRdsMysqlAccountOutputWithContext(ctx context.Context) RdsMysqlAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlAccountOutput)
}

// RdsMysqlAccountArrayInput is an input type that accepts RdsMysqlAccountArray and RdsMysqlAccountArrayOutput values.
// You can construct a concrete instance of `RdsMysqlAccountArrayInput` via:
//
//	RdsMysqlAccountArray{ RdsMysqlAccountArgs{...} }
type RdsMysqlAccountArrayInput interface {
	pulumi.Input

	ToRdsMysqlAccountArrayOutput() RdsMysqlAccountArrayOutput
	ToRdsMysqlAccountArrayOutputWithContext(context.Context) RdsMysqlAccountArrayOutput
}

type RdsMysqlAccountArray []RdsMysqlAccountInput

func (RdsMysqlAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsMysqlAccount)(nil)).Elem()
}

func (i RdsMysqlAccountArray) ToRdsMysqlAccountArrayOutput() RdsMysqlAccountArrayOutput {
	return i.ToRdsMysqlAccountArrayOutputWithContext(context.Background())
}

func (i RdsMysqlAccountArray) ToRdsMysqlAccountArrayOutputWithContext(ctx context.Context) RdsMysqlAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlAccountArrayOutput)
}

// RdsMysqlAccountMapInput is an input type that accepts RdsMysqlAccountMap and RdsMysqlAccountMapOutput values.
// You can construct a concrete instance of `RdsMysqlAccountMapInput` via:
//
//	RdsMysqlAccountMap{ "key": RdsMysqlAccountArgs{...} }
type RdsMysqlAccountMapInput interface {
	pulumi.Input

	ToRdsMysqlAccountMapOutput() RdsMysqlAccountMapOutput
	ToRdsMysqlAccountMapOutputWithContext(context.Context) RdsMysqlAccountMapOutput
}

type RdsMysqlAccountMap map[string]RdsMysqlAccountInput

func (RdsMysqlAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsMysqlAccount)(nil)).Elem()
}

func (i RdsMysqlAccountMap) ToRdsMysqlAccountMapOutput() RdsMysqlAccountMapOutput {
	return i.ToRdsMysqlAccountMapOutputWithContext(context.Background())
}

func (i RdsMysqlAccountMap) ToRdsMysqlAccountMapOutputWithContext(ctx context.Context) RdsMysqlAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlAccountMapOutput)
}

type RdsMysqlAccountOutput struct{ *pulumi.OutputState }

func (RdsMysqlAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsMysqlAccount)(nil)).Elem()
}

func (o RdsMysqlAccountOutput) ToRdsMysqlAccountOutput() RdsMysqlAccountOutput {
	return o
}

func (o RdsMysqlAccountOutput) ToRdsMysqlAccountOutputWithContext(ctx context.Context) RdsMysqlAccountOutput {
	return o
}

// Specifies remarks of the DB account.
func (o RdsMysqlAccountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsMysqlAccount) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the IP addresses that are allowed to access your DB instance.
func (o RdsMysqlAccountOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RdsMysqlAccount) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Specifies the ID of the RDS Mysql instance.
func (o RdsMysqlAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the username of the DB account.
func (o RdsMysqlAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of the DB account.
func (o RdsMysqlAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlAccount) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o RdsMysqlAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RdsMysqlAccountArrayOutput struct{ *pulumi.OutputState }

func (RdsMysqlAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsMysqlAccount)(nil)).Elem()
}

func (o RdsMysqlAccountArrayOutput) ToRdsMysqlAccountArrayOutput() RdsMysqlAccountArrayOutput {
	return o
}

func (o RdsMysqlAccountArrayOutput) ToRdsMysqlAccountArrayOutputWithContext(ctx context.Context) RdsMysqlAccountArrayOutput {
	return o
}

func (o RdsMysqlAccountArrayOutput) Index(i pulumi.IntInput) RdsMysqlAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsMysqlAccount {
		return vs[0].([]*RdsMysqlAccount)[vs[1].(int)]
	}).(RdsMysqlAccountOutput)
}

type RdsMysqlAccountMapOutput struct{ *pulumi.OutputState }

func (RdsMysqlAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsMysqlAccount)(nil)).Elem()
}

func (o RdsMysqlAccountMapOutput) ToRdsMysqlAccountMapOutput() RdsMysqlAccountMapOutput {
	return o
}

func (o RdsMysqlAccountMapOutput) ToRdsMysqlAccountMapOutputWithContext(ctx context.Context) RdsMysqlAccountMapOutput {
	return o
}

func (o RdsMysqlAccountMapOutput) MapIndex(k pulumi.StringInput) RdsMysqlAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsMysqlAccount {
		return vs[0].(map[string]*RdsMysqlAccount)[vs[1].(string)]
	}).(RdsMysqlAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlAccountInput)(nil)).Elem(), &RdsMysqlAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlAccountArrayInput)(nil)).Elem(), RdsMysqlAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlAccountMapInput)(nil)).Elem(), RdsMysqlAccountMap{})
	pulumi.RegisterOutputType(RdsMysqlAccountOutput{})
	pulumi.RegisterOutputType(RdsMysqlAccountArrayOutput{})
	pulumi.RegisterOutputType(RdsMysqlAccountMapOutput{})
}
