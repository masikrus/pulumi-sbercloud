// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CceAddon struct {
	pulumi.CustomResourceState

	ClusterId    pulumi.StringOutput     `pulumi:"clusterId"`
	Description  pulumi.StringOutput     `pulumi:"description"`
	Region       pulumi.StringOutput     `pulumi:"region"`
	Status       pulumi.StringOutput     `pulumi:"status"`
	TemplateName pulumi.StringOutput     `pulumi:"templateName"`
	Values       CceAddonValuesPtrOutput `pulumi:"values"`
	Version      pulumi.StringOutput     `pulumi:"version"`
}

// NewCceAddon registers a new resource with the given unique name, arguments, and options.
func NewCceAddon(ctx *pulumi.Context,
	name string, args *CceAddonArgs, opts ...pulumi.ResourceOption) (*CceAddon, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CceAddon
	err := ctx.RegisterResource("sbercloud:index/cceAddon:CceAddon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCceAddon gets an existing CceAddon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCceAddon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CceAddonState, opts ...pulumi.ResourceOption) (*CceAddon, error) {
	var resource CceAddon
	err := ctx.ReadResource("sbercloud:index/cceAddon:CceAddon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CceAddon resources.
type cceAddonState struct {
	ClusterId    *string         `pulumi:"clusterId"`
	Description  *string         `pulumi:"description"`
	Region       *string         `pulumi:"region"`
	Status       *string         `pulumi:"status"`
	TemplateName *string         `pulumi:"templateName"`
	Values       *CceAddonValues `pulumi:"values"`
	Version      *string         `pulumi:"version"`
}

type CceAddonState struct {
	ClusterId    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Status       pulumi.StringPtrInput
	TemplateName pulumi.StringPtrInput
	Values       CceAddonValuesPtrInput
	Version      pulumi.StringPtrInput
}

func (CceAddonState) ElementType() reflect.Type {
	return reflect.TypeOf((*cceAddonState)(nil)).Elem()
}

type cceAddonArgs struct {
	ClusterId    string          `pulumi:"clusterId"`
	Region       *string         `pulumi:"region"`
	TemplateName string          `pulumi:"templateName"`
	Values       *CceAddonValues `pulumi:"values"`
	Version      *string         `pulumi:"version"`
}

// The set of arguments for constructing a CceAddon resource.
type CceAddonArgs struct {
	ClusterId    pulumi.StringInput
	Region       pulumi.StringPtrInput
	TemplateName pulumi.StringInput
	Values       CceAddonValuesPtrInput
	Version      pulumi.StringPtrInput
}

func (CceAddonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cceAddonArgs)(nil)).Elem()
}

type CceAddonInput interface {
	pulumi.Input

	ToCceAddonOutput() CceAddonOutput
	ToCceAddonOutputWithContext(ctx context.Context) CceAddonOutput
}

func (*CceAddon) ElementType() reflect.Type {
	return reflect.TypeOf((**CceAddon)(nil)).Elem()
}

func (i *CceAddon) ToCceAddonOutput() CceAddonOutput {
	return i.ToCceAddonOutputWithContext(context.Background())
}

func (i *CceAddon) ToCceAddonOutputWithContext(ctx context.Context) CceAddonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceAddonOutput)
}

// CceAddonArrayInput is an input type that accepts CceAddonArray and CceAddonArrayOutput values.
// You can construct a concrete instance of `CceAddonArrayInput` via:
//
//	CceAddonArray{ CceAddonArgs{...} }
type CceAddonArrayInput interface {
	pulumi.Input

	ToCceAddonArrayOutput() CceAddonArrayOutput
	ToCceAddonArrayOutputWithContext(context.Context) CceAddonArrayOutput
}

type CceAddonArray []CceAddonInput

func (CceAddonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceAddon)(nil)).Elem()
}

func (i CceAddonArray) ToCceAddonArrayOutput() CceAddonArrayOutput {
	return i.ToCceAddonArrayOutputWithContext(context.Background())
}

func (i CceAddonArray) ToCceAddonArrayOutputWithContext(ctx context.Context) CceAddonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceAddonArrayOutput)
}

// CceAddonMapInput is an input type that accepts CceAddonMap and CceAddonMapOutput values.
// You can construct a concrete instance of `CceAddonMapInput` via:
//
//	CceAddonMap{ "key": CceAddonArgs{...} }
type CceAddonMapInput interface {
	pulumi.Input

	ToCceAddonMapOutput() CceAddonMapOutput
	ToCceAddonMapOutputWithContext(context.Context) CceAddonMapOutput
}

type CceAddonMap map[string]CceAddonInput

func (CceAddonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceAddon)(nil)).Elem()
}

func (i CceAddonMap) ToCceAddonMapOutput() CceAddonMapOutput {
	return i.ToCceAddonMapOutputWithContext(context.Background())
}

func (i CceAddonMap) ToCceAddonMapOutputWithContext(ctx context.Context) CceAddonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceAddonMapOutput)
}

type CceAddonOutput struct{ *pulumi.OutputState }

func (CceAddonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CceAddon)(nil)).Elem()
}

func (o CceAddonOutput) ToCceAddonOutput() CceAddonOutput {
	return o
}

func (o CceAddonOutput) ToCceAddonOutputWithContext(ctx context.Context) CceAddonOutput {
	return o
}

func (o CceAddonOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceAddon) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o CceAddonOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CceAddon) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o CceAddonOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CceAddon) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o CceAddonOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CceAddon) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o CceAddonOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *CceAddon) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

func (o CceAddonOutput) Values() CceAddonValuesPtrOutput {
	return o.ApplyT(func(v *CceAddon) CceAddonValuesPtrOutput { return v.Values }).(CceAddonValuesPtrOutput)
}

func (o CceAddonOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *CceAddon) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type CceAddonArrayOutput struct{ *pulumi.OutputState }

func (CceAddonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceAddon)(nil)).Elem()
}

func (o CceAddonArrayOutput) ToCceAddonArrayOutput() CceAddonArrayOutput {
	return o
}

func (o CceAddonArrayOutput) ToCceAddonArrayOutputWithContext(ctx context.Context) CceAddonArrayOutput {
	return o
}

func (o CceAddonArrayOutput) Index(i pulumi.IntInput) CceAddonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CceAddon {
		return vs[0].([]*CceAddon)[vs[1].(int)]
	}).(CceAddonOutput)
}

type CceAddonMapOutput struct{ *pulumi.OutputState }

func (CceAddonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceAddon)(nil)).Elem()
}

func (o CceAddonMapOutput) ToCceAddonMapOutput() CceAddonMapOutput {
	return o
}

func (o CceAddonMapOutput) ToCceAddonMapOutputWithContext(ctx context.Context) CceAddonMapOutput {
	return o
}

func (o CceAddonMapOutput) MapIndex(k pulumi.StringInput) CceAddonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CceAddon {
		return vs[0].(map[string]*CceAddon)[vs[1].(string)]
	}).(CceAddonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CceAddonInput)(nil)).Elem(), &CceAddon{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceAddonArrayInput)(nil)).Elem(), CceAddonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceAddonMapInput)(nil)).Elem(), CceAddonMap{})
	pulumi.RegisterOutputType(CceAddonOutput{})
	pulumi.RegisterOutputType(CceAddonArrayOutput{})
	pulumi.RegisterOutputType(CceAddonMapOutput{})
}
