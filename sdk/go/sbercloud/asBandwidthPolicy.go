// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AsBandwidthPolicy struct {
	pulumi.CustomResourceState

	// Specifies the alarm rule ID.
	AlarmId pulumi.StringOutput `pulumi:"alarmId"`
	// Specifies the scaling bandwidth ID.
	BandwidthId pulumi.StringOutput `pulumi:"bandwidthId"`
	// Specifies the cooldown period (in seconds).
	CoolDownTime pulumi.IntOutput `pulumi:"coolDownTime"`
	// Specifies the description of the AS policy.
	Description         pulumi.StringOutput                        `pulumi:"description"`
	Region              pulumi.StringOutput                        `pulumi:"region"`
	ScalingPolicyAction AsBandwidthPolicyScalingPolicyActionOutput `pulumi:"scalingPolicyAction"`
	// Specifies the AS policy name.
	ScalingPolicyName pulumi.StringOutput `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type.
	ScalingPolicyType pulumi.StringOutput `pulumi:"scalingPolicyType"`
	// the scaling resource type.
	ScalingResourceType pulumi.StringOutput                    `pulumi:"scalingResourceType"`
	ScheduledPolicy     AsBandwidthPolicyScheduledPolicyOutput `pulumi:"scheduledPolicy"`
	// the AS policy status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewAsBandwidthPolicy registers a new resource with the given unique name, arguments, and options.
func NewAsBandwidthPolicy(ctx *pulumi.Context,
	name string, args *AsBandwidthPolicyArgs, opts ...pulumi.ResourceOption) (*AsBandwidthPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BandwidthId == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthId'")
	}
	if args.ScalingPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyName'")
	}
	if args.ScalingPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AsBandwidthPolicy
	err := ctx.RegisterResource("sbercloud:index/asBandwidthPolicy:AsBandwidthPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsBandwidthPolicy gets an existing AsBandwidthPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsBandwidthPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AsBandwidthPolicyState, opts ...pulumi.ResourceOption) (*AsBandwidthPolicy, error) {
	var resource AsBandwidthPolicy
	err := ctx.ReadResource("sbercloud:index/asBandwidthPolicy:AsBandwidthPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AsBandwidthPolicy resources.
type asBandwidthPolicyState struct {
	// Specifies the alarm rule ID.
	AlarmId *string `pulumi:"alarmId"`
	// Specifies the scaling bandwidth ID.
	BandwidthId *string `pulumi:"bandwidthId"`
	// Specifies the cooldown period (in seconds).
	CoolDownTime *int `pulumi:"coolDownTime"`
	// Specifies the description of the AS policy.
	Description         *string                               `pulumi:"description"`
	Region              *string                               `pulumi:"region"`
	ScalingPolicyAction *AsBandwidthPolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	// Specifies the AS policy name.
	ScalingPolicyName *string `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type.
	ScalingPolicyType *string `pulumi:"scalingPolicyType"`
	// the scaling resource type.
	ScalingResourceType *string                           `pulumi:"scalingResourceType"`
	ScheduledPolicy     *AsBandwidthPolicyScheduledPolicy `pulumi:"scheduledPolicy"`
	// the AS policy status.
	Status *string `pulumi:"status"`
}

type AsBandwidthPolicyState struct {
	// Specifies the alarm rule ID.
	AlarmId pulumi.StringPtrInput
	// Specifies the scaling bandwidth ID.
	BandwidthId pulumi.StringPtrInput
	// Specifies the cooldown period (in seconds).
	CoolDownTime pulumi.IntPtrInput
	// Specifies the description of the AS policy.
	Description         pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ScalingPolicyAction AsBandwidthPolicyScalingPolicyActionPtrInput
	// Specifies the AS policy name.
	ScalingPolicyName pulumi.StringPtrInput
	// Specifies the AS policy type.
	ScalingPolicyType pulumi.StringPtrInput
	// the scaling resource type.
	ScalingResourceType pulumi.StringPtrInput
	ScheduledPolicy     AsBandwidthPolicyScheduledPolicyPtrInput
	// the AS policy status.
	Status pulumi.StringPtrInput
}

func (AsBandwidthPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*asBandwidthPolicyState)(nil)).Elem()
}

type asBandwidthPolicyArgs struct {
	// Specifies the alarm rule ID.
	AlarmId *string `pulumi:"alarmId"`
	// Specifies the scaling bandwidth ID.
	BandwidthId string `pulumi:"bandwidthId"`
	// Specifies the cooldown period (in seconds).
	CoolDownTime *int `pulumi:"coolDownTime"`
	// Specifies the description of the AS policy.
	Description         *string                               `pulumi:"description"`
	Region              *string                               `pulumi:"region"`
	ScalingPolicyAction *AsBandwidthPolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	// Specifies the AS policy name.
	ScalingPolicyName string `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type.
	ScalingPolicyType string                            `pulumi:"scalingPolicyType"`
	ScheduledPolicy   *AsBandwidthPolicyScheduledPolicy `pulumi:"scheduledPolicy"`
}

// The set of arguments for constructing a AsBandwidthPolicy resource.
type AsBandwidthPolicyArgs struct {
	// Specifies the alarm rule ID.
	AlarmId pulumi.StringPtrInput
	// Specifies the scaling bandwidth ID.
	BandwidthId pulumi.StringInput
	// Specifies the cooldown period (in seconds).
	CoolDownTime pulumi.IntPtrInput
	// Specifies the description of the AS policy.
	Description         pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ScalingPolicyAction AsBandwidthPolicyScalingPolicyActionPtrInput
	// Specifies the AS policy name.
	ScalingPolicyName pulumi.StringInput
	// Specifies the AS policy type.
	ScalingPolicyType pulumi.StringInput
	ScheduledPolicy   AsBandwidthPolicyScheduledPolicyPtrInput
}

func (AsBandwidthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*asBandwidthPolicyArgs)(nil)).Elem()
}

type AsBandwidthPolicyInput interface {
	pulumi.Input

	ToAsBandwidthPolicyOutput() AsBandwidthPolicyOutput
	ToAsBandwidthPolicyOutputWithContext(ctx context.Context) AsBandwidthPolicyOutput
}

func (*AsBandwidthPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AsBandwidthPolicy)(nil)).Elem()
}

func (i *AsBandwidthPolicy) ToAsBandwidthPolicyOutput() AsBandwidthPolicyOutput {
	return i.ToAsBandwidthPolicyOutputWithContext(context.Background())
}

func (i *AsBandwidthPolicy) ToAsBandwidthPolicyOutputWithContext(ctx context.Context) AsBandwidthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsBandwidthPolicyOutput)
}

// AsBandwidthPolicyArrayInput is an input type that accepts AsBandwidthPolicyArray and AsBandwidthPolicyArrayOutput values.
// You can construct a concrete instance of `AsBandwidthPolicyArrayInput` via:
//
//	AsBandwidthPolicyArray{ AsBandwidthPolicyArgs{...} }
type AsBandwidthPolicyArrayInput interface {
	pulumi.Input

	ToAsBandwidthPolicyArrayOutput() AsBandwidthPolicyArrayOutput
	ToAsBandwidthPolicyArrayOutputWithContext(context.Context) AsBandwidthPolicyArrayOutput
}

type AsBandwidthPolicyArray []AsBandwidthPolicyInput

func (AsBandwidthPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AsBandwidthPolicy)(nil)).Elem()
}

func (i AsBandwidthPolicyArray) ToAsBandwidthPolicyArrayOutput() AsBandwidthPolicyArrayOutput {
	return i.ToAsBandwidthPolicyArrayOutputWithContext(context.Background())
}

func (i AsBandwidthPolicyArray) ToAsBandwidthPolicyArrayOutputWithContext(ctx context.Context) AsBandwidthPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsBandwidthPolicyArrayOutput)
}

// AsBandwidthPolicyMapInput is an input type that accepts AsBandwidthPolicyMap and AsBandwidthPolicyMapOutput values.
// You can construct a concrete instance of `AsBandwidthPolicyMapInput` via:
//
//	AsBandwidthPolicyMap{ "key": AsBandwidthPolicyArgs{...} }
type AsBandwidthPolicyMapInput interface {
	pulumi.Input

	ToAsBandwidthPolicyMapOutput() AsBandwidthPolicyMapOutput
	ToAsBandwidthPolicyMapOutputWithContext(context.Context) AsBandwidthPolicyMapOutput
}

type AsBandwidthPolicyMap map[string]AsBandwidthPolicyInput

func (AsBandwidthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AsBandwidthPolicy)(nil)).Elem()
}

func (i AsBandwidthPolicyMap) ToAsBandwidthPolicyMapOutput() AsBandwidthPolicyMapOutput {
	return i.ToAsBandwidthPolicyMapOutputWithContext(context.Background())
}

func (i AsBandwidthPolicyMap) ToAsBandwidthPolicyMapOutputWithContext(ctx context.Context) AsBandwidthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsBandwidthPolicyMapOutput)
}

type AsBandwidthPolicyOutput struct{ *pulumi.OutputState }

func (AsBandwidthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsBandwidthPolicy)(nil)).Elem()
}

func (o AsBandwidthPolicyOutput) ToAsBandwidthPolicyOutput() AsBandwidthPolicyOutput {
	return o
}

func (o AsBandwidthPolicyOutput) ToAsBandwidthPolicyOutputWithContext(ctx context.Context) AsBandwidthPolicyOutput {
	return o
}

// Specifies the alarm rule ID.
func (o AsBandwidthPolicyOutput) AlarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.AlarmId }).(pulumi.StringOutput)
}

// Specifies the scaling bandwidth ID.
func (o AsBandwidthPolicyOutput) BandwidthId() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.BandwidthId }).(pulumi.StringOutput)
}

// Specifies the cooldown period (in seconds).
func (o AsBandwidthPolicyOutput) CoolDownTime() pulumi.IntOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.IntOutput { return v.CoolDownTime }).(pulumi.IntOutput)
}

// Specifies the description of the AS policy.
func (o AsBandwidthPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o AsBandwidthPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AsBandwidthPolicyOutput) ScalingPolicyAction() AsBandwidthPolicyScalingPolicyActionOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) AsBandwidthPolicyScalingPolicyActionOutput { return v.ScalingPolicyAction }).(AsBandwidthPolicyScalingPolicyActionOutput)
}

// Specifies the AS policy name.
func (o AsBandwidthPolicyOutput) ScalingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.ScalingPolicyName }).(pulumi.StringOutput)
}

// Specifies the AS policy type.
func (o AsBandwidthPolicyOutput) ScalingPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.ScalingPolicyType }).(pulumi.StringOutput)
}

// the scaling resource type.
func (o AsBandwidthPolicyOutput) ScalingResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.ScalingResourceType }).(pulumi.StringOutput)
}

func (o AsBandwidthPolicyOutput) ScheduledPolicy() AsBandwidthPolicyScheduledPolicyOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) AsBandwidthPolicyScheduledPolicyOutput { return v.ScheduledPolicy }).(AsBandwidthPolicyScheduledPolicyOutput)
}

// the AS policy status.
func (o AsBandwidthPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AsBandwidthPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AsBandwidthPolicyArrayOutput struct{ *pulumi.OutputState }

func (AsBandwidthPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AsBandwidthPolicy)(nil)).Elem()
}

func (o AsBandwidthPolicyArrayOutput) ToAsBandwidthPolicyArrayOutput() AsBandwidthPolicyArrayOutput {
	return o
}

func (o AsBandwidthPolicyArrayOutput) ToAsBandwidthPolicyArrayOutputWithContext(ctx context.Context) AsBandwidthPolicyArrayOutput {
	return o
}

func (o AsBandwidthPolicyArrayOutput) Index(i pulumi.IntInput) AsBandwidthPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AsBandwidthPolicy {
		return vs[0].([]*AsBandwidthPolicy)[vs[1].(int)]
	}).(AsBandwidthPolicyOutput)
}

type AsBandwidthPolicyMapOutput struct{ *pulumi.OutputState }

func (AsBandwidthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AsBandwidthPolicy)(nil)).Elem()
}

func (o AsBandwidthPolicyMapOutput) ToAsBandwidthPolicyMapOutput() AsBandwidthPolicyMapOutput {
	return o
}

func (o AsBandwidthPolicyMapOutput) ToAsBandwidthPolicyMapOutputWithContext(ctx context.Context) AsBandwidthPolicyMapOutput {
	return o
}

func (o AsBandwidthPolicyMapOutput) MapIndex(k pulumi.StringInput) AsBandwidthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AsBandwidthPolicy {
		return vs[0].(map[string]*AsBandwidthPolicy)[vs[1].(string)]
	}).(AsBandwidthPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AsBandwidthPolicyInput)(nil)).Elem(), &AsBandwidthPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsBandwidthPolicyArrayInput)(nil)).Elem(), AsBandwidthPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsBandwidthPolicyMapInput)(nil)).Elem(), AsBandwidthPolicyMap{})
	pulumi.RegisterOutputType(AsBandwidthPolicyOutput{})
	pulumi.RegisterOutputType(AsBandwidthPolicyArrayOutput{})
	pulumi.RegisterOutputType(AsBandwidthPolicyMapOutput{})
}
