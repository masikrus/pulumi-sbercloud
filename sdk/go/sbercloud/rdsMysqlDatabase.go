// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsMysqlDatabase struct {
	pulumi.CustomResourceState

	// Specifies the character set used by the database.
	CharacterSet pulumi.StringOutput `pulumi:"characterSet"`
	// Specifies the database description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the database name.
	Name   pulumi.StringOutput `pulumi:"name"`
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewRdsMysqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewRdsMysqlDatabase(ctx *pulumi.Context,
	name string, args *RdsMysqlDatabaseArgs, opts ...pulumi.ResourceOption) (*RdsMysqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CharacterSet == nil {
		return nil, errors.New("invalid value for required argument 'CharacterSet'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsMysqlDatabase
	err := ctx.RegisterResource("sbercloud:index/rdsMysqlDatabase:RdsMysqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsMysqlDatabase gets an existing RdsMysqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsMysqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsMysqlDatabaseState, opts ...pulumi.ResourceOption) (*RdsMysqlDatabase, error) {
	var resource RdsMysqlDatabase
	err := ctx.ReadResource("sbercloud:index/rdsMysqlDatabase:RdsMysqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsMysqlDatabase resources.
type rdsMysqlDatabaseState struct {
	// Specifies the character set used by the database.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the database name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
}

type RdsMysqlDatabaseState struct {
	// Specifies the character set used by the database.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the database name.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
}

func (RdsMysqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsMysqlDatabaseState)(nil)).Elem()
}

type rdsMysqlDatabaseArgs struct {
	// Specifies the character set used by the database.
	CharacterSet string `pulumi:"characterSet"`
	// Specifies the database description.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the database name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a RdsMysqlDatabase resource.
type RdsMysqlDatabaseArgs struct {
	// Specifies the character set used by the database.
	CharacterSet pulumi.StringInput
	// Specifies the database description.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringInput
	// Specifies the database name.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
}

func (RdsMysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsMysqlDatabaseArgs)(nil)).Elem()
}

type RdsMysqlDatabaseInput interface {
	pulumi.Input

	ToRdsMysqlDatabaseOutput() RdsMysqlDatabaseOutput
	ToRdsMysqlDatabaseOutputWithContext(ctx context.Context) RdsMysqlDatabaseOutput
}

func (*RdsMysqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsMysqlDatabase)(nil)).Elem()
}

func (i *RdsMysqlDatabase) ToRdsMysqlDatabaseOutput() RdsMysqlDatabaseOutput {
	return i.ToRdsMysqlDatabaseOutputWithContext(context.Background())
}

func (i *RdsMysqlDatabase) ToRdsMysqlDatabaseOutputWithContext(ctx context.Context) RdsMysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlDatabaseOutput)
}

// RdsMysqlDatabaseArrayInput is an input type that accepts RdsMysqlDatabaseArray and RdsMysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `RdsMysqlDatabaseArrayInput` via:
//
//	RdsMysqlDatabaseArray{ RdsMysqlDatabaseArgs{...} }
type RdsMysqlDatabaseArrayInput interface {
	pulumi.Input

	ToRdsMysqlDatabaseArrayOutput() RdsMysqlDatabaseArrayOutput
	ToRdsMysqlDatabaseArrayOutputWithContext(context.Context) RdsMysqlDatabaseArrayOutput
}

type RdsMysqlDatabaseArray []RdsMysqlDatabaseInput

func (RdsMysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsMysqlDatabase)(nil)).Elem()
}

func (i RdsMysqlDatabaseArray) ToRdsMysqlDatabaseArrayOutput() RdsMysqlDatabaseArrayOutput {
	return i.ToRdsMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i RdsMysqlDatabaseArray) ToRdsMysqlDatabaseArrayOutputWithContext(ctx context.Context) RdsMysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlDatabaseArrayOutput)
}

// RdsMysqlDatabaseMapInput is an input type that accepts RdsMysqlDatabaseMap and RdsMysqlDatabaseMapOutput values.
// You can construct a concrete instance of `RdsMysqlDatabaseMapInput` via:
//
//	RdsMysqlDatabaseMap{ "key": RdsMysqlDatabaseArgs{...} }
type RdsMysqlDatabaseMapInput interface {
	pulumi.Input

	ToRdsMysqlDatabaseMapOutput() RdsMysqlDatabaseMapOutput
	ToRdsMysqlDatabaseMapOutputWithContext(context.Context) RdsMysqlDatabaseMapOutput
}

type RdsMysqlDatabaseMap map[string]RdsMysqlDatabaseInput

func (RdsMysqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsMysqlDatabase)(nil)).Elem()
}

func (i RdsMysqlDatabaseMap) ToRdsMysqlDatabaseMapOutput() RdsMysqlDatabaseMapOutput {
	return i.ToRdsMysqlDatabaseMapOutputWithContext(context.Background())
}

func (i RdsMysqlDatabaseMap) ToRdsMysqlDatabaseMapOutputWithContext(ctx context.Context) RdsMysqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsMysqlDatabaseMapOutput)
}

type RdsMysqlDatabaseOutput struct{ *pulumi.OutputState }

func (RdsMysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsMysqlDatabase)(nil)).Elem()
}

func (o RdsMysqlDatabaseOutput) ToRdsMysqlDatabaseOutput() RdsMysqlDatabaseOutput {
	return o
}

func (o RdsMysqlDatabaseOutput) ToRdsMysqlDatabaseOutputWithContext(ctx context.Context) RdsMysqlDatabaseOutput {
	return o
}

// Specifies the character set used by the database.
func (o RdsMysqlDatabaseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabase) pulumi.StringOutput { return v.CharacterSet }).(pulumi.StringOutput)
}

// Specifies the database description.
func (o RdsMysqlDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsMysqlDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the RDS Mysql instance.
func (o RdsMysqlDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the database name.
func (o RdsMysqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RdsMysqlDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsMysqlDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type RdsMysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (RdsMysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsMysqlDatabase)(nil)).Elem()
}

func (o RdsMysqlDatabaseArrayOutput) ToRdsMysqlDatabaseArrayOutput() RdsMysqlDatabaseArrayOutput {
	return o
}

func (o RdsMysqlDatabaseArrayOutput) ToRdsMysqlDatabaseArrayOutputWithContext(ctx context.Context) RdsMysqlDatabaseArrayOutput {
	return o
}

func (o RdsMysqlDatabaseArrayOutput) Index(i pulumi.IntInput) RdsMysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsMysqlDatabase {
		return vs[0].([]*RdsMysqlDatabase)[vs[1].(int)]
	}).(RdsMysqlDatabaseOutput)
}

type RdsMysqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (RdsMysqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsMysqlDatabase)(nil)).Elem()
}

func (o RdsMysqlDatabaseMapOutput) ToRdsMysqlDatabaseMapOutput() RdsMysqlDatabaseMapOutput {
	return o
}

func (o RdsMysqlDatabaseMapOutput) ToRdsMysqlDatabaseMapOutputWithContext(ctx context.Context) RdsMysqlDatabaseMapOutput {
	return o
}

func (o RdsMysqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) RdsMysqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsMysqlDatabase {
		return vs[0].(map[string]*RdsMysqlDatabase)[vs[1].(string)]
	}).(RdsMysqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlDatabaseInput)(nil)).Elem(), &RdsMysqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlDatabaseArrayInput)(nil)).Elem(), RdsMysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsMysqlDatabaseMapInput)(nil)).Elem(), RdsMysqlDatabaseMap{})
	pulumi.RegisterOutputType(RdsMysqlDatabaseOutput{})
	pulumi.RegisterOutputType(RdsMysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(RdsMysqlDatabaseMapOutput{})
}
