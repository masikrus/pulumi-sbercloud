// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CesAlarmrule struct {
	pulumi.CustomResourceState

	AlarmActionEnabled  pulumi.BoolPtrOutput               `pulumi:"alarmActionEnabled"`
	AlarmActions        CesAlarmruleAlarmActionArrayOutput `pulumi:"alarmActions"`
	AlarmDescription    pulumi.StringPtrOutput             `pulumi:"alarmDescription"`
	AlarmEnabled        pulumi.BoolPtrOutput               `pulumi:"alarmEnabled"`
	AlarmLevel          pulumi.IntPtrOutput                `pulumi:"alarmLevel"`
	AlarmName           pulumi.StringOutput                `pulumi:"alarmName"`
	AlarmState          pulumi.StringOutput                `pulumi:"alarmState"`
	AlarmType           pulumi.StringOutput                `pulumi:"alarmType"`
	Condition           CesAlarmruleConditionOutput        `pulumi:"condition"`
	EnterpriseProjectId pulumi.StringOutput                `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions CesAlarmruleInsufficientdataActionArrayOutput `pulumi:"insufficientdataActions"`
	Metric                  CesAlarmruleMetricOutput                      `pulumi:"metric"`
	OkActions               CesAlarmruleOkActionArrayOutput               `pulumi:"okActions"`
	Region                  pulumi.StringOutput                           `pulumi:"region"`
	UpdateTime              pulumi.IntOutput                              `pulumi:"updateTime"`
}

// NewCesAlarmrule registers a new resource with the given unique name, arguments, and options.
func NewCesAlarmrule(ctx *pulumi.Context,
	name string, args *CesAlarmruleArgs, opts ...pulumi.ResourceOption) (*CesAlarmrule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmName'")
	}
	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CesAlarmrule
	err := ctx.RegisterResource("sbercloud:index/cesAlarmrule:CesAlarmrule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCesAlarmrule gets an existing CesAlarmrule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCesAlarmrule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CesAlarmruleState, opts ...pulumi.ResourceOption) (*CesAlarmrule, error) {
	var resource CesAlarmrule
	err := ctx.ReadResource("sbercloud:index/cesAlarmrule:CesAlarmrule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CesAlarmrule resources.
type cesAlarmruleState struct {
	AlarmActionEnabled  *bool                     `pulumi:"alarmActionEnabled"`
	AlarmActions        []CesAlarmruleAlarmAction `pulumi:"alarmActions"`
	AlarmDescription    *string                   `pulumi:"alarmDescription"`
	AlarmEnabled        *bool                     `pulumi:"alarmEnabled"`
	AlarmLevel          *int                      `pulumi:"alarmLevel"`
	AlarmName           *string                   `pulumi:"alarmName"`
	AlarmState          *string                   `pulumi:"alarmState"`
	AlarmType           *string                   `pulumi:"alarmType"`
	Condition           *CesAlarmruleCondition    `pulumi:"condition"`
	EnterpriseProjectId *string                   `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions []CesAlarmruleInsufficientdataAction `pulumi:"insufficientdataActions"`
	Metric                  *CesAlarmruleMetric                  `pulumi:"metric"`
	OkActions               []CesAlarmruleOkAction               `pulumi:"okActions"`
	Region                  *string                              `pulumi:"region"`
	UpdateTime              *int                                 `pulumi:"updateTime"`
}

type CesAlarmruleState struct {
	AlarmActionEnabled  pulumi.BoolPtrInput
	AlarmActions        CesAlarmruleAlarmActionArrayInput
	AlarmDescription    pulumi.StringPtrInput
	AlarmEnabled        pulumi.BoolPtrInput
	AlarmLevel          pulumi.IntPtrInput
	AlarmName           pulumi.StringPtrInput
	AlarmState          pulumi.StringPtrInput
	AlarmType           pulumi.StringPtrInput
	Condition           CesAlarmruleConditionPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions CesAlarmruleInsufficientdataActionArrayInput
	Metric                  CesAlarmruleMetricPtrInput
	OkActions               CesAlarmruleOkActionArrayInput
	Region                  pulumi.StringPtrInput
	UpdateTime              pulumi.IntPtrInput
}

func (CesAlarmruleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cesAlarmruleState)(nil)).Elem()
}

type cesAlarmruleArgs struct {
	AlarmActionEnabled  *bool                     `pulumi:"alarmActionEnabled"`
	AlarmActions        []CesAlarmruleAlarmAction `pulumi:"alarmActions"`
	AlarmDescription    *string                   `pulumi:"alarmDescription"`
	AlarmEnabled        *bool                     `pulumi:"alarmEnabled"`
	AlarmLevel          *int                      `pulumi:"alarmLevel"`
	AlarmName           string                    `pulumi:"alarmName"`
	AlarmType           *string                   `pulumi:"alarmType"`
	Condition           CesAlarmruleCondition     `pulumi:"condition"`
	EnterpriseProjectId *string                   `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions []CesAlarmruleInsufficientdataAction `pulumi:"insufficientdataActions"`
	Metric                  CesAlarmruleMetric                   `pulumi:"metric"`
	OkActions               []CesAlarmruleOkAction               `pulumi:"okActions"`
	Region                  *string                              `pulumi:"region"`
}

// The set of arguments for constructing a CesAlarmrule resource.
type CesAlarmruleArgs struct {
	AlarmActionEnabled  pulumi.BoolPtrInput
	AlarmActions        CesAlarmruleAlarmActionArrayInput
	AlarmDescription    pulumi.StringPtrInput
	AlarmEnabled        pulumi.BoolPtrInput
	AlarmLevel          pulumi.IntPtrInput
	AlarmName           pulumi.StringInput
	AlarmType           pulumi.StringPtrInput
	Condition           CesAlarmruleConditionInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions CesAlarmruleInsufficientdataActionArrayInput
	Metric                  CesAlarmruleMetricInput
	OkActions               CesAlarmruleOkActionArrayInput
	Region                  pulumi.StringPtrInput
}

func (CesAlarmruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cesAlarmruleArgs)(nil)).Elem()
}

type CesAlarmruleInput interface {
	pulumi.Input

	ToCesAlarmruleOutput() CesAlarmruleOutput
	ToCesAlarmruleOutputWithContext(ctx context.Context) CesAlarmruleOutput
}

func (*CesAlarmrule) ElementType() reflect.Type {
	return reflect.TypeOf((**CesAlarmrule)(nil)).Elem()
}

func (i *CesAlarmrule) ToCesAlarmruleOutput() CesAlarmruleOutput {
	return i.ToCesAlarmruleOutputWithContext(context.Background())
}

func (i *CesAlarmrule) ToCesAlarmruleOutputWithContext(ctx context.Context) CesAlarmruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CesAlarmruleOutput)
}

// CesAlarmruleArrayInput is an input type that accepts CesAlarmruleArray and CesAlarmruleArrayOutput values.
// You can construct a concrete instance of `CesAlarmruleArrayInput` via:
//
//	CesAlarmruleArray{ CesAlarmruleArgs{...} }
type CesAlarmruleArrayInput interface {
	pulumi.Input

	ToCesAlarmruleArrayOutput() CesAlarmruleArrayOutput
	ToCesAlarmruleArrayOutputWithContext(context.Context) CesAlarmruleArrayOutput
}

type CesAlarmruleArray []CesAlarmruleInput

func (CesAlarmruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CesAlarmrule)(nil)).Elem()
}

func (i CesAlarmruleArray) ToCesAlarmruleArrayOutput() CesAlarmruleArrayOutput {
	return i.ToCesAlarmruleArrayOutputWithContext(context.Background())
}

func (i CesAlarmruleArray) ToCesAlarmruleArrayOutputWithContext(ctx context.Context) CesAlarmruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CesAlarmruleArrayOutput)
}

// CesAlarmruleMapInput is an input type that accepts CesAlarmruleMap and CesAlarmruleMapOutput values.
// You can construct a concrete instance of `CesAlarmruleMapInput` via:
//
//	CesAlarmruleMap{ "key": CesAlarmruleArgs{...} }
type CesAlarmruleMapInput interface {
	pulumi.Input

	ToCesAlarmruleMapOutput() CesAlarmruleMapOutput
	ToCesAlarmruleMapOutputWithContext(context.Context) CesAlarmruleMapOutput
}

type CesAlarmruleMap map[string]CesAlarmruleInput

func (CesAlarmruleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CesAlarmrule)(nil)).Elem()
}

func (i CesAlarmruleMap) ToCesAlarmruleMapOutput() CesAlarmruleMapOutput {
	return i.ToCesAlarmruleMapOutputWithContext(context.Background())
}

func (i CesAlarmruleMap) ToCesAlarmruleMapOutputWithContext(ctx context.Context) CesAlarmruleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CesAlarmruleMapOutput)
}

type CesAlarmruleOutput struct{ *pulumi.OutputState }

func (CesAlarmruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CesAlarmrule)(nil)).Elem()
}

func (o CesAlarmruleOutput) ToCesAlarmruleOutput() CesAlarmruleOutput {
	return o
}

func (o CesAlarmruleOutput) ToCesAlarmruleOutputWithContext(ctx context.Context) CesAlarmruleOutput {
	return o
}

func (o CesAlarmruleOutput) AlarmActionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.BoolPtrOutput { return v.AlarmActionEnabled }).(pulumi.BoolPtrOutput)
}

func (o CesAlarmruleOutput) AlarmActions() CesAlarmruleAlarmActionArrayOutput {
	return o.ApplyT(func(v *CesAlarmrule) CesAlarmruleAlarmActionArrayOutput { return v.AlarmActions }).(CesAlarmruleAlarmActionArrayOutput)
}

func (o CesAlarmruleOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.StringPtrOutput { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

func (o CesAlarmruleOutput) AlarmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.BoolPtrOutput { return v.AlarmEnabled }).(pulumi.BoolPtrOutput)
}

func (o CesAlarmruleOutput) AlarmLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.IntPtrOutput { return v.AlarmLevel }).(pulumi.IntPtrOutput)
}

func (o CesAlarmruleOutput) AlarmName() pulumi.StringOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.StringOutput { return v.AlarmName }).(pulumi.StringOutput)
}

func (o CesAlarmruleOutput) AlarmState() pulumi.StringOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.StringOutput { return v.AlarmState }).(pulumi.StringOutput)
}

func (o CesAlarmruleOutput) AlarmType() pulumi.StringOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.StringOutput { return v.AlarmType }).(pulumi.StringOutput)
}

func (o CesAlarmruleOutput) Condition() CesAlarmruleConditionOutput {
	return o.ApplyT(func(v *CesAlarmrule) CesAlarmruleConditionOutput { return v.Condition }).(CesAlarmruleConditionOutput)
}

func (o CesAlarmruleOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Deprecated: insufficientdata_actions is deprecated
func (o CesAlarmruleOutput) InsufficientdataActions() CesAlarmruleInsufficientdataActionArrayOutput {
	return o.ApplyT(func(v *CesAlarmrule) CesAlarmruleInsufficientdataActionArrayOutput { return v.InsufficientdataActions }).(CesAlarmruleInsufficientdataActionArrayOutput)
}

func (o CesAlarmruleOutput) Metric() CesAlarmruleMetricOutput {
	return o.ApplyT(func(v *CesAlarmrule) CesAlarmruleMetricOutput { return v.Metric }).(CesAlarmruleMetricOutput)
}

func (o CesAlarmruleOutput) OkActions() CesAlarmruleOkActionArrayOutput {
	return o.ApplyT(func(v *CesAlarmrule) CesAlarmruleOkActionArrayOutput { return v.OkActions }).(CesAlarmruleOkActionArrayOutput)
}

func (o CesAlarmruleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o CesAlarmruleOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CesAlarmrule) pulumi.IntOutput { return v.UpdateTime }).(pulumi.IntOutput)
}

type CesAlarmruleArrayOutput struct{ *pulumi.OutputState }

func (CesAlarmruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CesAlarmrule)(nil)).Elem()
}

func (o CesAlarmruleArrayOutput) ToCesAlarmruleArrayOutput() CesAlarmruleArrayOutput {
	return o
}

func (o CesAlarmruleArrayOutput) ToCesAlarmruleArrayOutputWithContext(ctx context.Context) CesAlarmruleArrayOutput {
	return o
}

func (o CesAlarmruleArrayOutput) Index(i pulumi.IntInput) CesAlarmruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CesAlarmrule {
		return vs[0].([]*CesAlarmrule)[vs[1].(int)]
	}).(CesAlarmruleOutput)
}

type CesAlarmruleMapOutput struct{ *pulumi.OutputState }

func (CesAlarmruleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CesAlarmrule)(nil)).Elem()
}

func (o CesAlarmruleMapOutput) ToCesAlarmruleMapOutput() CesAlarmruleMapOutput {
	return o
}

func (o CesAlarmruleMapOutput) ToCesAlarmruleMapOutputWithContext(ctx context.Context) CesAlarmruleMapOutput {
	return o
}

func (o CesAlarmruleMapOutput) MapIndex(k pulumi.StringInput) CesAlarmruleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CesAlarmrule {
		return vs[0].(map[string]*CesAlarmrule)[vs[1].(string)]
	}).(CesAlarmruleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CesAlarmruleInput)(nil)).Elem(), &CesAlarmrule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CesAlarmruleArrayInput)(nil)).Elem(), CesAlarmruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CesAlarmruleMapInput)(nil)).Elem(), CesAlarmruleMap{})
	pulumi.RegisterOutputType(CesAlarmruleOutput{})
	pulumi.RegisterOutputType(CesAlarmruleArrayOutput{})
	pulumi.RegisterOutputType(CesAlarmruleMapOutput{})
}
