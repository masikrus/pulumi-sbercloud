// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the sbercloud package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The access key of the SberCloud to use.
	AccessKey pulumi.StringPtrOutput `pulumi:"accessKey"`
	// The name of the Account to login with.
	AccountName pulumi.StringPtrOutput `pulumi:"accountName"`
	// The Identity authentication URL.
	AuthUrl             pulumi.StringPtrOutput `pulumi:"authUrl"`
	DomainId            pulumi.StringPtrOutput `pulumi:"domainId"`
	DomainName          pulumi.StringPtrOutput `pulumi:"domainName"`
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Password to login with.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The name of the Project to login with.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The SberCloud region to connect to.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret key of the SberCloud to use.
	SecretKey pulumi.StringPtrOutput `pulumi:"secretKey"`
	// The security token to authenticate with a temporary security credential.
	SecurityToken pulumi.StringPtrOutput `pulumi:"securityToken"`
	// Username to login with.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:sbercloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The access key of the SberCloud to use.
	AccessKey *string `pulumi:"accessKey"`
	// The name of the Account to login with.
	AccountName *string             `pulumi:"accountName"`
	AssumeRole  *ProviderAssumeRole `pulumi:"assumeRole"`
	// The Identity authentication URL.
	AuthUrl             *string `pulumi:"authUrl"`
	DomainId            *string `pulumi:"domainId"`
	DomainName          *string `pulumi:"domainName"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Trust self-signed certificates.
	Insecure   *bool `pulumi:"insecure"`
	MaxRetries *int  `pulumi:"maxRetries"`
	// Password to login with.
	Password *string `pulumi:"password"`
	// The name of the Project to login with.
	ProjectName *string `pulumi:"projectName"`
	// The SberCloud region to connect to.
	Region string `pulumi:"region"`
	// The secret key of the SberCloud to use.
	SecretKey *string `pulumi:"secretKey"`
	// The security token to authenticate with a temporary security credential.
	SecurityToken *string `pulumi:"securityToken"`
	// Username to login with.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The access key of the SberCloud to use.
	AccessKey pulumi.StringPtrInput
	// The name of the Account to login with.
	AccountName pulumi.StringPtrInput
	AssumeRole  ProviderAssumeRolePtrInput
	// The Identity authentication URL.
	AuthUrl             pulumi.StringPtrInput
	DomainId            pulumi.StringPtrInput
	DomainName          pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Trust self-signed certificates.
	Insecure   pulumi.BoolPtrInput
	MaxRetries pulumi.IntPtrInput
	// Password to login with.
	Password pulumi.StringPtrInput
	// The name of the Project to login with.
	ProjectName pulumi.StringPtrInput
	// The SberCloud region to connect to.
	Region pulumi.StringInput
	// The secret key of the SberCloud to use.
	SecretKey pulumi.StringPtrInput
	// The security token to authenticate with a temporary security credential.
	SecurityToken pulumi.StringPtrInput
	// Username to login with.
	UserName pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The access key of the SberCloud to use.
func (o ProviderOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The name of the Account to login with.
func (o ProviderOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The Identity authentication URL.
func (o ProviderOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AuthUrl }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.DomainId }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Password to login with.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The name of the Project to login with.
func (o ProviderOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The SberCloud region to connect to.
func (o ProviderOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret key of the SberCloud to use.
func (o ProviderOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The security token to authenticate with a temporary security credential.
func (o ProviderOutput) SecurityToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SecurityToken }).(pulumi.StringPtrOutput)
}

// Username to login with.
func (o ProviderOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
