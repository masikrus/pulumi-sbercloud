// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IdentityAcl struct {
	pulumi.CustomResourceState

	IpCidrs  IdentityAclIpCidrArrayOutput  `pulumi:"ipCidrs"`
	IpRanges IdentityAclIpRangeArrayOutput `pulumi:"ipRanges"`
	Type     pulumi.StringOutput           `pulumi:"type"`
}

// NewIdentityAcl registers a new resource with the given unique name, arguments, and options.
func NewIdentityAcl(ctx *pulumi.Context,
	name string, args *IdentityAclArgs, opts ...pulumi.ResourceOption) (*IdentityAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityAcl
	err := ctx.RegisterResource("sbercloud:index/identityAcl:IdentityAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityAcl gets an existing IdentityAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityAclState, opts ...pulumi.ResourceOption) (*IdentityAcl, error) {
	var resource IdentityAcl
	err := ctx.ReadResource("sbercloud:index/identityAcl:IdentityAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityAcl resources.
type identityAclState struct {
	IpCidrs  []IdentityAclIpCidr  `pulumi:"ipCidrs"`
	IpRanges []IdentityAclIpRange `pulumi:"ipRanges"`
	Type     *string              `pulumi:"type"`
}

type IdentityAclState struct {
	IpCidrs  IdentityAclIpCidrArrayInput
	IpRanges IdentityAclIpRangeArrayInput
	Type     pulumi.StringPtrInput
}

func (IdentityAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAclState)(nil)).Elem()
}

type identityAclArgs struct {
	IpCidrs  []IdentityAclIpCidr  `pulumi:"ipCidrs"`
	IpRanges []IdentityAclIpRange `pulumi:"ipRanges"`
	Type     string               `pulumi:"type"`
}

// The set of arguments for constructing a IdentityAcl resource.
type IdentityAclArgs struct {
	IpCidrs  IdentityAclIpCidrArrayInput
	IpRanges IdentityAclIpRangeArrayInput
	Type     pulumi.StringInput
}

func (IdentityAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAclArgs)(nil)).Elem()
}

type IdentityAclInput interface {
	pulumi.Input

	ToIdentityAclOutput() IdentityAclOutput
	ToIdentityAclOutputWithContext(ctx context.Context) IdentityAclOutput
}

func (*IdentityAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAcl)(nil)).Elem()
}

func (i *IdentityAcl) ToIdentityAclOutput() IdentityAclOutput {
	return i.ToIdentityAclOutputWithContext(context.Background())
}

func (i *IdentityAcl) ToIdentityAclOutputWithContext(ctx context.Context) IdentityAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAclOutput)
}

// IdentityAclArrayInput is an input type that accepts IdentityAclArray and IdentityAclArrayOutput values.
// You can construct a concrete instance of `IdentityAclArrayInput` via:
//
//	IdentityAclArray{ IdentityAclArgs{...} }
type IdentityAclArrayInput interface {
	pulumi.Input

	ToIdentityAclArrayOutput() IdentityAclArrayOutput
	ToIdentityAclArrayOutputWithContext(context.Context) IdentityAclArrayOutput
}

type IdentityAclArray []IdentityAclInput

func (IdentityAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAcl)(nil)).Elem()
}

func (i IdentityAclArray) ToIdentityAclArrayOutput() IdentityAclArrayOutput {
	return i.ToIdentityAclArrayOutputWithContext(context.Background())
}

func (i IdentityAclArray) ToIdentityAclArrayOutputWithContext(ctx context.Context) IdentityAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAclArrayOutput)
}

// IdentityAclMapInput is an input type that accepts IdentityAclMap and IdentityAclMapOutput values.
// You can construct a concrete instance of `IdentityAclMapInput` via:
//
//	IdentityAclMap{ "key": IdentityAclArgs{...} }
type IdentityAclMapInput interface {
	pulumi.Input

	ToIdentityAclMapOutput() IdentityAclMapOutput
	ToIdentityAclMapOutputWithContext(context.Context) IdentityAclMapOutput
}

type IdentityAclMap map[string]IdentityAclInput

func (IdentityAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAcl)(nil)).Elem()
}

func (i IdentityAclMap) ToIdentityAclMapOutput() IdentityAclMapOutput {
	return i.ToIdentityAclMapOutputWithContext(context.Background())
}

func (i IdentityAclMap) ToIdentityAclMapOutputWithContext(ctx context.Context) IdentityAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAclMapOutput)
}

type IdentityAclOutput struct{ *pulumi.OutputState }

func (IdentityAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAcl)(nil)).Elem()
}

func (o IdentityAclOutput) ToIdentityAclOutput() IdentityAclOutput {
	return o
}

func (o IdentityAclOutput) ToIdentityAclOutputWithContext(ctx context.Context) IdentityAclOutput {
	return o
}

func (o IdentityAclOutput) IpCidrs() IdentityAclIpCidrArrayOutput {
	return o.ApplyT(func(v *IdentityAcl) IdentityAclIpCidrArrayOutput { return v.IpCidrs }).(IdentityAclIpCidrArrayOutput)
}

func (o IdentityAclOutput) IpRanges() IdentityAclIpRangeArrayOutput {
	return o.ApplyT(func(v *IdentityAcl) IdentityAclIpRangeArrayOutput { return v.IpRanges }).(IdentityAclIpRangeArrayOutput)
}

func (o IdentityAclOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAcl) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IdentityAclArrayOutput struct{ *pulumi.OutputState }

func (IdentityAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAcl)(nil)).Elem()
}

func (o IdentityAclArrayOutput) ToIdentityAclArrayOutput() IdentityAclArrayOutput {
	return o
}

func (o IdentityAclArrayOutput) ToIdentityAclArrayOutputWithContext(ctx context.Context) IdentityAclArrayOutput {
	return o
}

func (o IdentityAclArrayOutput) Index(i pulumi.IntInput) IdentityAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityAcl {
		return vs[0].([]*IdentityAcl)[vs[1].(int)]
	}).(IdentityAclOutput)
}

type IdentityAclMapOutput struct{ *pulumi.OutputState }

func (IdentityAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAcl)(nil)).Elem()
}

func (o IdentityAclMapOutput) ToIdentityAclMapOutput() IdentityAclMapOutput {
	return o
}

func (o IdentityAclMapOutput) ToIdentityAclMapOutputWithContext(ctx context.Context) IdentityAclMapOutput {
	return o
}

func (o IdentityAclMapOutput) MapIndex(k pulumi.StringInput) IdentityAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityAcl {
		return vs[0].(map[string]*IdentityAcl)[vs[1].(string)]
	}).(IdentityAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAclInput)(nil)).Elem(), &IdentityAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAclArrayInput)(nil)).Elem(), IdentityAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAclMapInput)(nil)).Elem(), IdentityAclMap{})
	pulumi.RegisterOutputType(IdentityAclOutput{})
	pulumi.RegisterOutputType(IdentityAclArrayOutput{})
	pulumi.RegisterOutputType(IdentityAclMapOutput{})
}
