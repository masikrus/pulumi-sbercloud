// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcRoute struct {
	pulumi.CustomResourceState

	Description    pulumi.StringPtrOutput `pulumi:"description"`
	Destination    pulumi.StringOutput    `pulumi:"destination"`
	Nexthop        pulumi.StringOutput    `pulumi:"nexthop"`
	Region         pulumi.StringOutput    `pulumi:"region"`
	RouteTableId   pulumi.StringOutput    `pulumi:"routeTableId"`
	RouteTableName pulumi.StringOutput    `pulumi:"routeTableName"`
	Type           pulumi.StringOutput    `pulumi:"type"`
	VpcId          pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewVpcRoute registers a new resource with the given unique name, arguments, and options.
func NewVpcRoute(ctx *pulumi.Context,
	name string, args *VpcRouteArgs, opts ...pulumi.ResourceOption) (*VpcRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Nexthop == nil {
		return nil, errors.New("invalid value for required argument 'Nexthop'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcRoute
	err := ctx.RegisterResource("sbercloud:index/vpcRoute:VpcRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcRoute gets an existing VpcRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcRouteState, opts ...pulumi.ResourceOption) (*VpcRoute, error) {
	var resource VpcRoute
	err := ctx.ReadResource("sbercloud:index/vpcRoute:VpcRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcRoute resources.
type vpcRouteState struct {
	Description    *string `pulumi:"description"`
	Destination    *string `pulumi:"destination"`
	Nexthop        *string `pulumi:"nexthop"`
	Region         *string `pulumi:"region"`
	RouteTableId   *string `pulumi:"routeTableId"`
	RouteTableName *string `pulumi:"routeTableName"`
	Type           *string `pulumi:"type"`
	VpcId          *string `pulumi:"vpcId"`
}

type VpcRouteState struct {
	Description    pulumi.StringPtrInput
	Destination    pulumi.StringPtrInput
	Nexthop        pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
	RouteTableId   pulumi.StringPtrInput
	RouteTableName pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	VpcId          pulumi.StringPtrInput
}

func (VpcRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcRouteState)(nil)).Elem()
}

type vpcRouteArgs struct {
	Description  *string `pulumi:"description"`
	Destination  string  `pulumi:"destination"`
	Nexthop      string  `pulumi:"nexthop"`
	Region       *string `pulumi:"region"`
	RouteTableId *string `pulumi:"routeTableId"`
	Type         string  `pulumi:"type"`
	VpcId        string  `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcRoute resource.
type VpcRouteArgs struct {
	Description  pulumi.StringPtrInput
	Destination  pulumi.StringInput
	Nexthop      pulumi.StringInput
	Region       pulumi.StringPtrInput
	RouteTableId pulumi.StringPtrInput
	Type         pulumi.StringInput
	VpcId        pulumi.StringInput
}

func (VpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcRouteArgs)(nil)).Elem()
}

type VpcRouteInput interface {
	pulumi.Input

	ToVpcRouteOutput() VpcRouteOutput
	ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput
}

func (*VpcRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcRoute)(nil)).Elem()
}

func (i *VpcRoute) ToVpcRouteOutput() VpcRouteOutput {
	return i.ToVpcRouteOutputWithContext(context.Background())
}

func (i *VpcRoute) ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteOutput)
}

// VpcRouteArrayInput is an input type that accepts VpcRouteArray and VpcRouteArrayOutput values.
// You can construct a concrete instance of `VpcRouteArrayInput` via:
//
//	VpcRouteArray{ VpcRouteArgs{...} }
type VpcRouteArrayInput interface {
	pulumi.Input

	ToVpcRouteArrayOutput() VpcRouteArrayOutput
	ToVpcRouteArrayOutputWithContext(context.Context) VpcRouteArrayOutput
}

type VpcRouteArray []VpcRouteInput

func (VpcRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcRoute)(nil)).Elem()
}

func (i VpcRouteArray) ToVpcRouteArrayOutput() VpcRouteArrayOutput {
	return i.ToVpcRouteArrayOutputWithContext(context.Background())
}

func (i VpcRouteArray) ToVpcRouteArrayOutputWithContext(ctx context.Context) VpcRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteArrayOutput)
}

// VpcRouteMapInput is an input type that accepts VpcRouteMap and VpcRouteMapOutput values.
// You can construct a concrete instance of `VpcRouteMapInput` via:
//
//	VpcRouteMap{ "key": VpcRouteArgs{...} }
type VpcRouteMapInput interface {
	pulumi.Input

	ToVpcRouteMapOutput() VpcRouteMapOutput
	ToVpcRouteMapOutputWithContext(context.Context) VpcRouteMapOutput
}

type VpcRouteMap map[string]VpcRouteInput

func (VpcRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcRoute)(nil)).Elem()
}

func (i VpcRouteMap) ToVpcRouteMapOutput() VpcRouteMapOutput {
	return i.ToVpcRouteMapOutputWithContext(context.Background())
}

func (i VpcRouteMap) ToVpcRouteMapOutputWithContext(ctx context.Context) VpcRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteMapOutput)
}

type VpcRouteOutput struct{ *pulumi.OutputState }

func (VpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcRoute)(nil)).Elem()
}

func (o VpcRouteOutput) ToVpcRouteOutput() VpcRouteOutput {
	return o
}

func (o VpcRouteOutput) ToVpcRouteOutputWithContext(ctx context.Context) VpcRouteOutput {
	return o
}

func (o VpcRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VpcRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

func (o VpcRouteOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.Nexthop }).(pulumi.StringOutput)
}

func (o VpcRouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VpcRouteOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

func (o VpcRouteOutput) RouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.RouteTableName }).(pulumi.StringOutput)
}

func (o VpcRouteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o VpcRouteOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRoute) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcRouteArrayOutput struct{ *pulumi.OutputState }

func (VpcRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcRoute)(nil)).Elem()
}

func (o VpcRouteArrayOutput) ToVpcRouteArrayOutput() VpcRouteArrayOutput {
	return o
}

func (o VpcRouteArrayOutput) ToVpcRouteArrayOutputWithContext(ctx context.Context) VpcRouteArrayOutput {
	return o
}

func (o VpcRouteArrayOutput) Index(i pulumi.IntInput) VpcRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcRoute {
		return vs[0].([]*VpcRoute)[vs[1].(int)]
	}).(VpcRouteOutput)
}

type VpcRouteMapOutput struct{ *pulumi.OutputState }

func (VpcRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcRoute)(nil)).Elem()
}

func (o VpcRouteMapOutput) ToVpcRouteMapOutput() VpcRouteMapOutput {
	return o
}

func (o VpcRouteMapOutput) ToVpcRouteMapOutputWithContext(ctx context.Context) VpcRouteMapOutput {
	return o
}

func (o VpcRouteMapOutput) MapIndex(k pulumi.StringInput) VpcRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcRoute {
		return vs[0].(map[string]*VpcRoute)[vs[1].(string)]
	}).(VpcRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteInput)(nil)).Elem(), &VpcRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteArrayInput)(nil)).Elem(), VpcRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteMapInput)(nil)).Elem(), VpcRouteMap{})
	pulumi.RegisterOutputType(VpcRouteOutput{})
	pulumi.RegisterOutputType(VpcRouteArrayOutput{})
	pulumi.RegisterOutputType(VpcRouteMapOutput{})
}
