// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DisStream struct {
	pulumi.CustomResourceState

	AutoScaleMaxPartitionCount pulumi.IntOutput              `pulumi:"autoScaleMaxPartitionCount"`
	AutoScaleMinPartitionCount pulumi.IntOutput              `pulumi:"autoScaleMinPartitionCount"`
	CompressionFormat          pulumi.StringOutput           `pulumi:"compressionFormat"`
	Created                    pulumi.IntOutput              `pulumi:"created"`
	CsvDelimiter               pulumi.StringOutput           `pulumi:"csvDelimiter"`
	DataSchema                 pulumi.StringOutput           `pulumi:"dataSchema"`
	DataType                   pulumi.StringOutput           `pulumi:"dataType"`
	EnterpriseProjectId        pulumi.StringOutput           `pulumi:"enterpriseProjectId"`
	PartitionCount             pulumi.IntOutput              `pulumi:"partitionCount"`
	Partitions                 DisStreamPartitionArrayOutput `pulumi:"partitions"`
	ReadablePartitionCount     pulumi.IntOutput              `pulumi:"readablePartitionCount"`
	Region                     pulumi.StringOutput           `pulumi:"region"`
	RetentionPeriod            pulumi.IntPtrOutput           `pulumi:"retentionPeriod"`
	Status                     pulumi.StringOutput           `pulumi:"status"`
	StreamId                   pulumi.StringOutput           `pulumi:"streamId"`
	StreamName                 pulumi.StringOutput           `pulumi:"streamName"`
	StreamType                 pulumi.StringOutput           `pulumi:"streamType"`
	Tags                       pulumi.StringMapOutput        `pulumi:"tags"`
	WritablePartitionCount     pulumi.IntOutput              `pulumi:"writablePartitionCount"`
}

// NewDisStream registers a new resource with the given unique name, arguments, and options.
func NewDisStream(ctx *pulumi.Context,
	name string, args *DisStreamArgs, opts ...pulumi.ResourceOption) (*DisStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PartitionCount == nil {
		return nil, errors.New("invalid value for required argument 'PartitionCount'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DisStream
	err := ctx.RegisterResource("sbercloud:index/disStream:DisStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDisStream gets an existing DisStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DisStreamState, opts ...pulumi.ResourceOption) (*DisStream, error) {
	var resource DisStream
	err := ctx.ReadResource("sbercloud:index/disStream:DisStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DisStream resources.
type disStreamState struct {
	AutoScaleMaxPartitionCount *int                 `pulumi:"autoScaleMaxPartitionCount"`
	AutoScaleMinPartitionCount *int                 `pulumi:"autoScaleMinPartitionCount"`
	CompressionFormat          *string              `pulumi:"compressionFormat"`
	Created                    *int                 `pulumi:"created"`
	CsvDelimiter               *string              `pulumi:"csvDelimiter"`
	DataSchema                 *string              `pulumi:"dataSchema"`
	DataType                   *string              `pulumi:"dataType"`
	EnterpriseProjectId        *string              `pulumi:"enterpriseProjectId"`
	PartitionCount             *int                 `pulumi:"partitionCount"`
	Partitions                 []DisStreamPartition `pulumi:"partitions"`
	ReadablePartitionCount     *int                 `pulumi:"readablePartitionCount"`
	Region                     *string              `pulumi:"region"`
	RetentionPeriod            *int                 `pulumi:"retentionPeriod"`
	Status                     *string              `pulumi:"status"`
	StreamId                   *string              `pulumi:"streamId"`
	StreamName                 *string              `pulumi:"streamName"`
	StreamType                 *string              `pulumi:"streamType"`
	Tags                       map[string]string    `pulumi:"tags"`
	WritablePartitionCount     *int                 `pulumi:"writablePartitionCount"`
}

type DisStreamState struct {
	AutoScaleMaxPartitionCount pulumi.IntPtrInput
	AutoScaleMinPartitionCount pulumi.IntPtrInput
	CompressionFormat          pulumi.StringPtrInput
	Created                    pulumi.IntPtrInput
	CsvDelimiter               pulumi.StringPtrInput
	DataSchema                 pulumi.StringPtrInput
	DataType                   pulumi.StringPtrInput
	EnterpriseProjectId        pulumi.StringPtrInput
	PartitionCount             pulumi.IntPtrInput
	Partitions                 DisStreamPartitionArrayInput
	ReadablePartitionCount     pulumi.IntPtrInput
	Region                     pulumi.StringPtrInput
	RetentionPeriod            pulumi.IntPtrInput
	Status                     pulumi.StringPtrInput
	StreamId                   pulumi.StringPtrInput
	StreamName                 pulumi.StringPtrInput
	StreamType                 pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
	WritablePartitionCount     pulumi.IntPtrInput
}

func (DisStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*disStreamState)(nil)).Elem()
}

type disStreamArgs struct {
	AutoScaleMaxPartitionCount *int              `pulumi:"autoScaleMaxPartitionCount"`
	AutoScaleMinPartitionCount *int              `pulumi:"autoScaleMinPartitionCount"`
	CompressionFormat          *string           `pulumi:"compressionFormat"`
	CsvDelimiter               *string           `pulumi:"csvDelimiter"`
	DataSchema                 *string           `pulumi:"dataSchema"`
	DataType                   *string           `pulumi:"dataType"`
	EnterpriseProjectId        *string           `pulumi:"enterpriseProjectId"`
	PartitionCount             int               `pulumi:"partitionCount"`
	Region                     *string           `pulumi:"region"`
	RetentionPeriod            *int              `pulumi:"retentionPeriod"`
	StreamName                 string            `pulumi:"streamName"`
	StreamType                 *string           `pulumi:"streamType"`
	Tags                       map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DisStream resource.
type DisStreamArgs struct {
	AutoScaleMaxPartitionCount pulumi.IntPtrInput
	AutoScaleMinPartitionCount pulumi.IntPtrInput
	CompressionFormat          pulumi.StringPtrInput
	CsvDelimiter               pulumi.StringPtrInput
	DataSchema                 pulumi.StringPtrInput
	DataType                   pulumi.StringPtrInput
	EnterpriseProjectId        pulumi.StringPtrInput
	PartitionCount             pulumi.IntInput
	Region                     pulumi.StringPtrInput
	RetentionPeriod            pulumi.IntPtrInput
	StreamName                 pulumi.StringInput
	StreamType                 pulumi.StringPtrInput
	Tags                       pulumi.StringMapInput
}

func (DisStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*disStreamArgs)(nil)).Elem()
}

type DisStreamInput interface {
	pulumi.Input

	ToDisStreamOutput() DisStreamOutput
	ToDisStreamOutputWithContext(ctx context.Context) DisStreamOutput
}

func (*DisStream) ElementType() reflect.Type {
	return reflect.TypeOf((**DisStream)(nil)).Elem()
}

func (i *DisStream) ToDisStreamOutput() DisStreamOutput {
	return i.ToDisStreamOutputWithContext(context.Background())
}

func (i *DisStream) ToDisStreamOutputWithContext(ctx context.Context) DisStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisStreamOutput)
}

// DisStreamArrayInput is an input type that accepts DisStreamArray and DisStreamArrayOutput values.
// You can construct a concrete instance of `DisStreamArrayInput` via:
//
//	DisStreamArray{ DisStreamArgs{...} }
type DisStreamArrayInput interface {
	pulumi.Input

	ToDisStreamArrayOutput() DisStreamArrayOutput
	ToDisStreamArrayOutputWithContext(context.Context) DisStreamArrayOutput
}

type DisStreamArray []DisStreamInput

func (DisStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DisStream)(nil)).Elem()
}

func (i DisStreamArray) ToDisStreamArrayOutput() DisStreamArrayOutput {
	return i.ToDisStreamArrayOutputWithContext(context.Background())
}

func (i DisStreamArray) ToDisStreamArrayOutputWithContext(ctx context.Context) DisStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisStreamArrayOutput)
}

// DisStreamMapInput is an input type that accepts DisStreamMap and DisStreamMapOutput values.
// You can construct a concrete instance of `DisStreamMapInput` via:
//
//	DisStreamMap{ "key": DisStreamArgs{...} }
type DisStreamMapInput interface {
	pulumi.Input

	ToDisStreamMapOutput() DisStreamMapOutput
	ToDisStreamMapOutputWithContext(context.Context) DisStreamMapOutput
}

type DisStreamMap map[string]DisStreamInput

func (DisStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DisStream)(nil)).Elem()
}

func (i DisStreamMap) ToDisStreamMapOutput() DisStreamMapOutput {
	return i.ToDisStreamMapOutputWithContext(context.Background())
}

func (i DisStreamMap) ToDisStreamMapOutputWithContext(ctx context.Context) DisStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisStreamMapOutput)
}

type DisStreamOutput struct{ *pulumi.OutputState }

func (DisStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisStream)(nil)).Elem()
}

func (o DisStreamOutput) ToDisStreamOutput() DisStreamOutput {
	return o
}

func (o DisStreamOutput) ToDisStreamOutputWithContext(ctx context.Context) DisStreamOutput {
	return o
}

func (o DisStreamOutput) AutoScaleMaxPartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntOutput { return v.AutoScaleMaxPartitionCount }).(pulumi.IntOutput)
}

func (o DisStreamOutput) AutoScaleMinPartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntOutput { return v.AutoScaleMinPartitionCount }).(pulumi.IntOutput)
}

func (o DisStreamOutput) CompressionFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.CompressionFormat }).(pulumi.StringOutput)
}

func (o DisStreamOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

func (o DisStreamOutput) CsvDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.CsvDelimiter }).(pulumi.StringOutput)
}

func (o DisStreamOutput) DataSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.DataSchema }).(pulumi.StringOutput)
}

func (o DisStreamOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.DataType }).(pulumi.StringOutput)
}

func (o DisStreamOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o DisStreamOutput) PartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntOutput { return v.PartitionCount }).(pulumi.IntOutput)
}

func (o DisStreamOutput) Partitions() DisStreamPartitionArrayOutput {
	return o.ApplyT(func(v *DisStream) DisStreamPartitionArrayOutput { return v.Partitions }).(DisStreamPartitionArrayOutput)
}

func (o DisStreamOutput) ReadablePartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntOutput { return v.ReadablePartitionCount }).(pulumi.IntOutput)
}

func (o DisStreamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DisStreamOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntPtrOutput { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

func (o DisStreamOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o DisStreamOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o DisStreamOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

func (o DisStreamOutput) StreamType() pulumi.StringOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringOutput { return v.StreamType }).(pulumi.StringOutput)
}

func (o DisStreamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DisStream) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DisStreamOutput) WritablePartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DisStream) pulumi.IntOutput { return v.WritablePartitionCount }).(pulumi.IntOutput)
}

type DisStreamArrayOutput struct{ *pulumi.OutputState }

func (DisStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DisStream)(nil)).Elem()
}

func (o DisStreamArrayOutput) ToDisStreamArrayOutput() DisStreamArrayOutput {
	return o
}

func (o DisStreamArrayOutput) ToDisStreamArrayOutputWithContext(ctx context.Context) DisStreamArrayOutput {
	return o
}

func (o DisStreamArrayOutput) Index(i pulumi.IntInput) DisStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DisStream {
		return vs[0].([]*DisStream)[vs[1].(int)]
	}).(DisStreamOutput)
}

type DisStreamMapOutput struct{ *pulumi.OutputState }

func (DisStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DisStream)(nil)).Elem()
}

func (o DisStreamMapOutput) ToDisStreamMapOutput() DisStreamMapOutput {
	return o
}

func (o DisStreamMapOutput) ToDisStreamMapOutputWithContext(ctx context.Context) DisStreamMapOutput {
	return o
}

func (o DisStreamMapOutput) MapIndex(k pulumi.StringInput) DisStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DisStream {
		return vs[0].(map[string]*DisStream)[vs[1].(string)]
	}).(DisStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DisStreamInput)(nil)).Elem(), &DisStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisStreamArrayInput)(nil)).Elem(), DisStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisStreamMapInput)(nil)).Elem(), DisStreamMap{})
	pulumi.RegisterOutputType(DisStreamOutput{})
	pulumi.RegisterOutputType(DisStreamArrayOutput{})
	pulumi.RegisterOutputType(DisStreamMapOutput{})
}
