// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LbMonitor struct {
	pulumi.CustomResourceState

	AdminStateUp  pulumi.BoolPtrOutput `pulumi:"adminStateUp"`
	Delay         pulumi.IntOutput     `pulumi:"delay"`
	ExpectedCodes pulumi.StringOutput  `pulumi:"expectedCodes"`
	HttpMethod    pulumi.StringOutput  `pulumi:"httpMethod"`
	MaxRetries    pulumi.IntOutput     `pulumi:"maxRetries"`
	Name          pulumi.StringOutput  `pulumi:"name"`
	PoolId        pulumi.StringOutput  `pulumi:"poolId"`
	Port          pulumi.IntPtrOutput  `pulumi:"port"`
	Region        pulumi.StringOutput  `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	Timeout  pulumi.IntOutput    `pulumi:"timeout"`
	Type     pulumi.StringOutput `pulumi:"type"`
	UrlPath  pulumi.StringOutput `pulumi:"urlPath"`
}

// NewLbMonitor registers a new resource with the given unique name, arguments, and options.
func NewLbMonitor(ctx *pulumi.Context,
	name string, args *LbMonitorArgs, opts ...pulumi.ResourceOption) (*LbMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Delay == nil {
		return nil, errors.New("invalid value for required argument 'Delay'")
	}
	if args.MaxRetries == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetries'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LbMonitor
	err := ctx.RegisterResource("sbercloud:index/lbMonitor:LbMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLbMonitor gets an existing LbMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLbMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LbMonitorState, opts ...pulumi.ResourceOption) (*LbMonitor, error) {
	var resource LbMonitor
	err := ctx.ReadResource("sbercloud:index/lbMonitor:LbMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LbMonitor resources.
type lbMonitorState struct {
	AdminStateUp  *bool   `pulumi:"adminStateUp"`
	Delay         *int    `pulumi:"delay"`
	ExpectedCodes *string `pulumi:"expectedCodes"`
	HttpMethod    *string `pulumi:"httpMethod"`
	MaxRetries    *int    `pulumi:"maxRetries"`
	Name          *string `pulumi:"name"`
	PoolId        *string `pulumi:"poolId"`
	Port          *int    `pulumi:"port"`
	Region        *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Timeout  *int    `pulumi:"timeout"`
	Type     *string `pulumi:"type"`
	UrlPath  *string `pulumi:"urlPath"`
}

type LbMonitorState struct {
	AdminStateUp  pulumi.BoolPtrInput
	Delay         pulumi.IntPtrInput
	ExpectedCodes pulumi.StringPtrInput
	HttpMethod    pulumi.StringPtrInput
	MaxRetries    pulumi.IntPtrInput
	Name          pulumi.StringPtrInput
	PoolId        pulumi.StringPtrInput
	Port          pulumi.IntPtrInput
	Region        pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Timeout  pulumi.IntPtrInput
	Type     pulumi.StringPtrInput
	UrlPath  pulumi.StringPtrInput
}

func (LbMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbMonitorState)(nil)).Elem()
}

type lbMonitorArgs struct {
	AdminStateUp  *bool   `pulumi:"adminStateUp"`
	Delay         int     `pulumi:"delay"`
	ExpectedCodes *string `pulumi:"expectedCodes"`
	HttpMethod    *string `pulumi:"httpMethod"`
	MaxRetries    int     `pulumi:"maxRetries"`
	Name          *string `pulumi:"name"`
	PoolId        string  `pulumi:"poolId"`
	Port          *int    `pulumi:"port"`
	Region        *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Timeout  int     `pulumi:"timeout"`
	Type     string  `pulumi:"type"`
	UrlPath  *string `pulumi:"urlPath"`
}

// The set of arguments for constructing a LbMonitor resource.
type LbMonitorArgs struct {
	AdminStateUp  pulumi.BoolPtrInput
	Delay         pulumi.IntInput
	ExpectedCodes pulumi.StringPtrInput
	HttpMethod    pulumi.StringPtrInput
	MaxRetries    pulumi.IntInput
	Name          pulumi.StringPtrInput
	PoolId        pulumi.StringInput
	Port          pulumi.IntPtrInput
	Region        pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Timeout  pulumi.IntInput
	Type     pulumi.StringInput
	UrlPath  pulumi.StringPtrInput
}

func (LbMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbMonitorArgs)(nil)).Elem()
}

type LbMonitorInput interface {
	pulumi.Input

	ToLbMonitorOutput() LbMonitorOutput
	ToLbMonitorOutputWithContext(ctx context.Context) LbMonitorOutput
}

func (*LbMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**LbMonitor)(nil)).Elem()
}

func (i *LbMonitor) ToLbMonitorOutput() LbMonitorOutput {
	return i.ToLbMonitorOutputWithContext(context.Background())
}

func (i *LbMonitor) ToLbMonitorOutputWithContext(ctx context.Context) LbMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMonitorOutput)
}

// LbMonitorArrayInput is an input type that accepts LbMonitorArray and LbMonitorArrayOutput values.
// You can construct a concrete instance of `LbMonitorArrayInput` via:
//
//	LbMonitorArray{ LbMonitorArgs{...} }
type LbMonitorArrayInput interface {
	pulumi.Input

	ToLbMonitorArrayOutput() LbMonitorArrayOutput
	ToLbMonitorArrayOutputWithContext(context.Context) LbMonitorArrayOutput
}

type LbMonitorArray []LbMonitorInput

func (LbMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbMonitor)(nil)).Elem()
}

func (i LbMonitorArray) ToLbMonitorArrayOutput() LbMonitorArrayOutput {
	return i.ToLbMonitorArrayOutputWithContext(context.Background())
}

func (i LbMonitorArray) ToLbMonitorArrayOutputWithContext(ctx context.Context) LbMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMonitorArrayOutput)
}

// LbMonitorMapInput is an input type that accepts LbMonitorMap and LbMonitorMapOutput values.
// You can construct a concrete instance of `LbMonitorMapInput` via:
//
//	LbMonitorMap{ "key": LbMonitorArgs{...} }
type LbMonitorMapInput interface {
	pulumi.Input

	ToLbMonitorMapOutput() LbMonitorMapOutput
	ToLbMonitorMapOutputWithContext(context.Context) LbMonitorMapOutput
}

type LbMonitorMap map[string]LbMonitorInput

func (LbMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbMonitor)(nil)).Elem()
}

func (i LbMonitorMap) ToLbMonitorMapOutput() LbMonitorMapOutput {
	return i.ToLbMonitorMapOutputWithContext(context.Background())
}

func (i LbMonitorMap) ToLbMonitorMapOutputWithContext(ctx context.Context) LbMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LbMonitorMapOutput)
}

type LbMonitorOutput struct{ *pulumi.OutputState }

func (LbMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LbMonitor)(nil)).Elem()
}

func (o LbMonitorOutput) ToLbMonitorOutput() LbMonitorOutput {
	return o
}

func (o LbMonitorOutput) ToLbMonitorOutputWithContext(ctx context.Context) LbMonitorOutput {
	return o
}

func (o LbMonitorOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o LbMonitorOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.IntOutput { return v.Delay }).(pulumi.IntOutput)
}

func (o LbMonitorOutput) ExpectedCodes() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.ExpectedCodes }).(pulumi.StringOutput)
}

func (o LbMonitorOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o LbMonitorOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.IntOutput { return v.MaxRetries }).(pulumi.IntOutput)
}

func (o LbMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LbMonitorOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

func (o LbMonitorOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o LbMonitorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o LbMonitorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o LbMonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

func (o LbMonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o LbMonitorOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *LbMonitor) pulumi.StringOutput { return v.UrlPath }).(pulumi.StringOutput)
}

type LbMonitorArrayOutput struct{ *pulumi.OutputState }

func (LbMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LbMonitor)(nil)).Elem()
}

func (o LbMonitorArrayOutput) ToLbMonitorArrayOutput() LbMonitorArrayOutput {
	return o
}

func (o LbMonitorArrayOutput) ToLbMonitorArrayOutputWithContext(ctx context.Context) LbMonitorArrayOutput {
	return o
}

func (o LbMonitorArrayOutput) Index(i pulumi.IntInput) LbMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LbMonitor {
		return vs[0].([]*LbMonitor)[vs[1].(int)]
	}).(LbMonitorOutput)
}

type LbMonitorMapOutput struct{ *pulumi.OutputState }

func (LbMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LbMonitor)(nil)).Elem()
}

func (o LbMonitorMapOutput) ToLbMonitorMapOutput() LbMonitorMapOutput {
	return o
}

func (o LbMonitorMapOutput) ToLbMonitorMapOutputWithContext(ctx context.Context) LbMonitorMapOutput {
	return o
}

func (o LbMonitorMapOutput) MapIndex(k pulumi.StringInput) LbMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LbMonitor {
		return vs[0].(map[string]*LbMonitor)[vs[1].(string)]
	}).(LbMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LbMonitorInput)(nil)).Elem(), &LbMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMonitorArrayInput)(nil)).Elem(), LbMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LbMonitorMapInput)(nil)).Elem(), LbMonitorMap{})
	pulumi.RegisterOutputType(LbMonitorOutput{})
	pulumi.RegisterOutputType(LbMonitorArrayOutput{})
	pulumi.RegisterOutputType(LbMonitorMapOutput{})
}
