// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CtsTracker struct {
	pulumi.CustomResourceState

	AgencyName          pulumi.StringOutput      `pulumi:"agencyName"`
	BucketName          pulumi.StringPtrOutput   `pulumi:"bucketName"`
	CompressType        pulumi.StringPtrOutput   `pulumi:"compressType"`
	CreateTime          pulumi.IntOutput         `pulumi:"createTime"`
	DeleteTracker       pulumi.BoolPtrOutput     `pulumi:"deleteTracker"`
	Detail              pulumi.StringOutput      `pulumi:"detail"`
	DomainId            pulumi.StringOutput      `pulumi:"domainId"`
	Enabled             pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ExcludeServices     pulumi.StringArrayOutput `pulumi:"excludeServices"`
	FilePrefix          pulumi.StringPtrOutput   `pulumi:"filePrefix"`
	GroupId             pulumi.StringOutput      `pulumi:"groupId"`
	IsAuthorizedBucket  pulumi.BoolOutput        `pulumi:"isAuthorizedBucket"`
	IsSortByService     pulumi.BoolPtrOutput     `pulumi:"isSortByService"`
	KmsId               pulumi.StringPtrOutput   `pulumi:"kmsId"`
	LogGroupName        pulumi.StringOutput      `pulumi:"logGroupName"`
	LogTopicName        pulumi.StringOutput      `pulumi:"logTopicName"`
	LtsEnabled          pulumi.BoolPtrOutput     `pulumi:"ltsEnabled"`
	Name                pulumi.StringOutput      `pulumi:"name"`
	OrganizationEnabled pulumi.BoolOutput        `pulumi:"organizationEnabled"`
	Region              pulumi.StringOutput      `pulumi:"region"`
	Status              pulumi.StringOutput      `pulumi:"status"`
	StreamId            pulumi.StringOutput      `pulumi:"streamId"`
	Tags                pulumi.StringMapOutput   `pulumi:"tags"`
	TransferEnabled     pulumi.BoolOutput        `pulumi:"transferEnabled"`
	Type                pulumi.StringOutput      `pulumi:"type"`
	ValidateFile        pulumi.BoolPtrOutput     `pulumi:"validateFile"`
}

// NewCtsTracker registers a new resource with the given unique name, arguments, and options.
func NewCtsTracker(ctx *pulumi.Context,
	name string, args *CtsTrackerArgs, opts ...pulumi.ResourceOption) (*CtsTracker, error) {
	if args == nil {
		args = &CtsTrackerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CtsTracker
	err := ctx.RegisterResource("sbercloud:index/ctsTracker:CtsTracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCtsTracker gets an existing CtsTracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCtsTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CtsTrackerState, opts ...pulumi.ResourceOption) (*CtsTracker, error) {
	var resource CtsTracker
	err := ctx.ReadResource("sbercloud:index/ctsTracker:CtsTracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CtsTracker resources.
type ctsTrackerState struct {
	AgencyName          *string           `pulumi:"agencyName"`
	BucketName          *string           `pulumi:"bucketName"`
	CompressType        *string           `pulumi:"compressType"`
	CreateTime          *int              `pulumi:"createTime"`
	DeleteTracker       *bool             `pulumi:"deleteTracker"`
	Detail              *string           `pulumi:"detail"`
	DomainId            *string           `pulumi:"domainId"`
	Enabled             *bool             `pulumi:"enabled"`
	ExcludeServices     []string          `pulumi:"excludeServices"`
	FilePrefix          *string           `pulumi:"filePrefix"`
	GroupId             *string           `pulumi:"groupId"`
	IsAuthorizedBucket  *bool             `pulumi:"isAuthorizedBucket"`
	IsSortByService     *bool             `pulumi:"isSortByService"`
	KmsId               *string           `pulumi:"kmsId"`
	LogGroupName        *string           `pulumi:"logGroupName"`
	LogTopicName        *string           `pulumi:"logTopicName"`
	LtsEnabled          *bool             `pulumi:"ltsEnabled"`
	Name                *string           `pulumi:"name"`
	OrganizationEnabled *bool             `pulumi:"organizationEnabled"`
	Region              *string           `pulumi:"region"`
	Status              *string           `pulumi:"status"`
	StreamId            *string           `pulumi:"streamId"`
	Tags                map[string]string `pulumi:"tags"`
	TransferEnabled     *bool             `pulumi:"transferEnabled"`
	Type                *string           `pulumi:"type"`
	ValidateFile        *bool             `pulumi:"validateFile"`
}

type CtsTrackerState struct {
	AgencyName          pulumi.StringPtrInput
	BucketName          pulumi.StringPtrInput
	CompressType        pulumi.StringPtrInput
	CreateTime          pulumi.IntPtrInput
	DeleteTracker       pulumi.BoolPtrInput
	Detail              pulumi.StringPtrInput
	DomainId            pulumi.StringPtrInput
	Enabled             pulumi.BoolPtrInput
	ExcludeServices     pulumi.StringArrayInput
	FilePrefix          pulumi.StringPtrInput
	GroupId             pulumi.StringPtrInput
	IsAuthorizedBucket  pulumi.BoolPtrInput
	IsSortByService     pulumi.BoolPtrInput
	KmsId               pulumi.StringPtrInput
	LogGroupName        pulumi.StringPtrInput
	LogTopicName        pulumi.StringPtrInput
	LtsEnabled          pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	OrganizationEnabled pulumi.BoolPtrInput
	Region              pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	StreamId            pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TransferEnabled     pulumi.BoolPtrInput
	Type                pulumi.StringPtrInput
	ValidateFile        pulumi.BoolPtrInput
}

func (CtsTrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ctsTrackerState)(nil)).Elem()
}

type ctsTrackerArgs struct {
	BucketName          *string           `pulumi:"bucketName"`
	CompressType        *string           `pulumi:"compressType"`
	DeleteTracker       *bool             `pulumi:"deleteTracker"`
	Enabled             *bool             `pulumi:"enabled"`
	ExcludeServices     []string          `pulumi:"excludeServices"`
	FilePrefix          *string           `pulumi:"filePrefix"`
	IsSortByService     *bool             `pulumi:"isSortByService"`
	KmsId               *string           `pulumi:"kmsId"`
	LtsEnabled          *bool             `pulumi:"ltsEnabled"`
	OrganizationEnabled *bool             `pulumi:"organizationEnabled"`
	Region              *string           `pulumi:"region"`
	Tags                map[string]string `pulumi:"tags"`
	ValidateFile        *bool             `pulumi:"validateFile"`
}

// The set of arguments for constructing a CtsTracker resource.
type CtsTrackerArgs struct {
	BucketName          pulumi.StringPtrInput
	CompressType        pulumi.StringPtrInput
	DeleteTracker       pulumi.BoolPtrInput
	Enabled             pulumi.BoolPtrInput
	ExcludeServices     pulumi.StringArrayInput
	FilePrefix          pulumi.StringPtrInput
	IsSortByService     pulumi.BoolPtrInput
	KmsId               pulumi.StringPtrInput
	LtsEnabled          pulumi.BoolPtrInput
	OrganizationEnabled pulumi.BoolPtrInput
	Region              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	ValidateFile        pulumi.BoolPtrInput
}

func (CtsTrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ctsTrackerArgs)(nil)).Elem()
}

type CtsTrackerInput interface {
	pulumi.Input

	ToCtsTrackerOutput() CtsTrackerOutput
	ToCtsTrackerOutputWithContext(ctx context.Context) CtsTrackerOutput
}

func (*CtsTracker) ElementType() reflect.Type {
	return reflect.TypeOf((**CtsTracker)(nil)).Elem()
}

func (i *CtsTracker) ToCtsTrackerOutput() CtsTrackerOutput {
	return i.ToCtsTrackerOutputWithContext(context.Background())
}

func (i *CtsTracker) ToCtsTrackerOutputWithContext(ctx context.Context) CtsTrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsTrackerOutput)
}

// CtsTrackerArrayInput is an input type that accepts CtsTrackerArray and CtsTrackerArrayOutput values.
// You can construct a concrete instance of `CtsTrackerArrayInput` via:
//
//	CtsTrackerArray{ CtsTrackerArgs{...} }
type CtsTrackerArrayInput interface {
	pulumi.Input

	ToCtsTrackerArrayOutput() CtsTrackerArrayOutput
	ToCtsTrackerArrayOutputWithContext(context.Context) CtsTrackerArrayOutput
}

type CtsTrackerArray []CtsTrackerInput

func (CtsTrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CtsTracker)(nil)).Elem()
}

func (i CtsTrackerArray) ToCtsTrackerArrayOutput() CtsTrackerArrayOutput {
	return i.ToCtsTrackerArrayOutputWithContext(context.Background())
}

func (i CtsTrackerArray) ToCtsTrackerArrayOutputWithContext(ctx context.Context) CtsTrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsTrackerArrayOutput)
}

// CtsTrackerMapInput is an input type that accepts CtsTrackerMap and CtsTrackerMapOutput values.
// You can construct a concrete instance of `CtsTrackerMapInput` via:
//
//	CtsTrackerMap{ "key": CtsTrackerArgs{...} }
type CtsTrackerMapInput interface {
	pulumi.Input

	ToCtsTrackerMapOutput() CtsTrackerMapOutput
	ToCtsTrackerMapOutputWithContext(context.Context) CtsTrackerMapOutput
}

type CtsTrackerMap map[string]CtsTrackerInput

func (CtsTrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CtsTracker)(nil)).Elem()
}

func (i CtsTrackerMap) ToCtsTrackerMapOutput() CtsTrackerMapOutput {
	return i.ToCtsTrackerMapOutputWithContext(context.Background())
}

func (i CtsTrackerMap) ToCtsTrackerMapOutputWithContext(ctx context.Context) CtsTrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsTrackerMapOutput)
}

type CtsTrackerOutput struct{ *pulumi.OutputState }

func (CtsTrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CtsTracker)(nil)).Elem()
}

func (o CtsTrackerOutput) ToCtsTrackerOutput() CtsTrackerOutput {
	return o
}

func (o CtsTrackerOutput) ToCtsTrackerOutputWithContext(ctx context.Context) CtsTrackerOutput {
	return o
}

func (o CtsTrackerOutput) AgencyName() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.AgencyName }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o CtsTrackerOutput) CompressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringPtrOutput { return v.CompressType }).(pulumi.StringPtrOutput)
}

func (o CtsTrackerOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

func (o CtsTrackerOutput) DeleteTracker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolPtrOutput { return v.DeleteTracker }).(pulumi.BoolPtrOutput)
}

func (o CtsTrackerOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.Detail }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CtsTrackerOutput) ExcludeServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringArrayOutput { return v.ExcludeServices }).(pulumi.StringArrayOutput)
}

func (o CtsTrackerOutput) FilePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringPtrOutput { return v.FilePrefix }).(pulumi.StringPtrOutput)
}

func (o CtsTrackerOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) IsAuthorizedBucket() pulumi.BoolOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolOutput { return v.IsAuthorizedBucket }).(pulumi.BoolOutput)
}

func (o CtsTrackerOutput) IsSortByService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolPtrOutput { return v.IsSortByService }).(pulumi.BoolPtrOutput)
}

func (o CtsTrackerOutput) KmsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringPtrOutput { return v.KmsId }).(pulumi.StringPtrOutput)
}

func (o CtsTrackerOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) LogTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.LogTopicName }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) LtsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolPtrOutput { return v.LtsEnabled }).(pulumi.BoolPtrOutput)
}

func (o CtsTrackerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) OrganizationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolOutput { return v.OrganizationEnabled }).(pulumi.BoolOutput)
}

func (o CtsTrackerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o CtsTrackerOutput) TransferEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolOutput { return v.TransferEnabled }).(pulumi.BoolOutput)
}

func (o CtsTrackerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o CtsTrackerOutput) ValidateFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CtsTracker) pulumi.BoolPtrOutput { return v.ValidateFile }).(pulumi.BoolPtrOutput)
}

type CtsTrackerArrayOutput struct{ *pulumi.OutputState }

func (CtsTrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CtsTracker)(nil)).Elem()
}

func (o CtsTrackerArrayOutput) ToCtsTrackerArrayOutput() CtsTrackerArrayOutput {
	return o
}

func (o CtsTrackerArrayOutput) ToCtsTrackerArrayOutputWithContext(ctx context.Context) CtsTrackerArrayOutput {
	return o
}

func (o CtsTrackerArrayOutput) Index(i pulumi.IntInput) CtsTrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CtsTracker {
		return vs[0].([]*CtsTracker)[vs[1].(int)]
	}).(CtsTrackerOutput)
}

type CtsTrackerMapOutput struct{ *pulumi.OutputState }

func (CtsTrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CtsTracker)(nil)).Elem()
}

func (o CtsTrackerMapOutput) ToCtsTrackerMapOutput() CtsTrackerMapOutput {
	return o
}

func (o CtsTrackerMapOutput) ToCtsTrackerMapOutputWithContext(ctx context.Context) CtsTrackerMapOutput {
	return o
}

func (o CtsTrackerMapOutput) MapIndex(k pulumi.StringInput) CtsTrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CtsTracker {
		return vs[0].(map[string]*CtsTracker)[vs[1].(string)]
	}).(CtsTrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CtsTrackerInput)(nil)).Elem(), &CtsTracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*CtsTrackerArrayInput)(nil)).Elem(), CtsTrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CtsTrackerMapInput)(nil)).Elem(), CtsTrackerMap{})
	pulumi.RegisterOutputType(CtsTrackerOutput{})
	pulumi.RegisterOutputType(CtsTrackerArrayOutput{})
	pulumi.RegisterOutputType(CtsTrackerMapOutput{})
}
