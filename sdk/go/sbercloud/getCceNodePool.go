// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupCceNodePool(ctx *pulumi.Context, args *LookupCceNodePoolArgs, opts ...pulumi.InvokeOption) (*LookupCceNodePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCceNodePoolResult
	err := ctx.Invoke("sbercloud:index/getCceNodePool:getCceNodePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCceNodePool.
type LookupCceNodePoolArgs struct {
	ClusterId  string  `pulumi:"clusterId"`
	Name       *string `pulumi:"name"`
	NodePoolId *string `pulumi:"nodePoolId"`
	Region     *string `pulumi:"region"`
	Status     *string `pulumi:"status"`
}

// A collection of values returned by getCceNodePool.
type LookupCceNodePoolResult struct {
	AvailabilityZone    string                         `pulumi:"availabilityZone"`
	ClusterId           string                         `pulumi:"clusterId"`
	CurrentNodeCount    int                            `pulumi:"currentNodeCount"`
	DataVolumes         []GetCceNodePoolDataVolume     `pulumi:"dataVolumes"`
	EnterpriseProjectId string                         `pulumi:"enterpriseProjectId"`
	ExtendParam         map[string]string              `pulumi:"extendParam"`
	FlavorId            string                         `pulumi:"flavorId"`
	HostnameConfigs     []GetCceNodePoolHostnameConfig `pulumi:"hostnameConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                     `pulumi:"id"`
	InitialNodeCount      int                        `pulumi:"initialNodeCount"`
	KeyPair               string                     `pulumi:"keyPair"`
	Labels                map[string]string          `pulumi:"labels"`
	MaxNodeCount          int                        `pulumi:"maxNodeCount"`
	MaxPods               int                        `pulumi:"maxPods"`
	MinNodeCount          int                        `pulumi:"minNodeCount"`
	Name                  string                     `pulumi:"name"`
	NodePoolId            string                     `pulumi:"nodePoolId"`
	Os                    string                     `pulumi:"os"`
	Priority              int                        `pulumi:"priority"`
	Region                string                     `pulumi:"region"`
	RootVolumes           []GetCceNodePoolRootVolume `pulumi:"rootVolumes"`
	ScaleDownCooldownTime int                        `pulumi:"scaleDownCooldownTime"`
	ScallEnable           bool                       `pulumi:"scallEnable"`
	Status                string                     `pulumi:"status"`
	SubnetId              string                     `pulumi:"subnetId"`
	Tags                  map[string]string          `pulumi:"tags"`
	Type                  string                     `pulumi:"type"`
}

func LookupCceNodePoolOutput(ctx *pulumi.Context, args LookupCceNodePoolOutputArgs, opts ...pulumi.InvokeOption) LookupCceNodePoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCceNodePoolResultOutput, error) {
			args := v.(LookupCceNodePoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getCceNodePool:getCceNodePool", args, LookupCceNodePoolResultOutput{}, options).(LookupCceNodePoolResultOutput), nil
		}).(LookupCceNodePoolResultOutput)
}

// A collection of arguments for invoking getCceNodePool.
type LookupCceNodePoolOutputArgs struct {
	ClusterId  pulumi.StringInput    `pulumi:"clusterId"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	NodePoolId pulumi.StringPtrInput `pulumi:"nodePoolId"`
	Region     pulumi.StringPtrInput `pulumi:"region"`
	Status     pulumi.StringPtrInput `pulumi:"status"`
}

func (LookupCceNodePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCceNodePoolArgs)(nil)).Elem()
}

// A collection of values returned by getCceNodePool.
type LookupCceNodePoolResultOutput struct{ *pulumi.OutputState }

func (LookupCceNodePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCceNodePoolResult)(nil)).Elem()
}

func (o LookupCceNodePoolResultOutput) ToLookupCceNodePoolResultOutput() LookupCceNodePoolResultOutput {
	return o
}

func (o LookupCceNodePoolResultOutput) ToLookupCceNodePoolResultOutputWithContext(ctx context.Context) LookupCceNodePoolResultOutput {
	return o
}

func (o LookupCceNodePoolResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) CurrentNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.CurrentNodeCount }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) DataVolumes() GetCceNodePoolDataVolumeArrayOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) []GetCceNodePoolDataVolume { return v.DataVolumes }).(GetCceNodePoolDataVolumeArrayOutput)
}

func (o LookupCceNodePoolResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) map[string]string { return v.ExtendParam }).(pulumi.StringMapOutput)
}

func (o LookupCceNodePoolResultOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.FlavorId }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) HostnameConfigs() GetCceNodePoolHostnameConfigArrayOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) []GetCceNodePoolHostnameConfig { return v.HostnameConfigs }).(GetCceNodePoolHostnameConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCceNodePoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.InitialNodeCount }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupCceNodePoolResultOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) MaxPods() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.MaxPods }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) NodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.NodePoolId }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.Os }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.Priority }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) RootVolumes() GetCceNodePoolRootVolumeArrayOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) []GetCceNodePoolRootVolume { return v.RootVolumes }).(GetCceNodePoolRootVolumeArrayOutput)
}

func (o LookupCceNodePoolResultOutput) ScaleDownCooldownTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) int { return v.ScaleDownCooldownTime }).(pulumi.IntOutput)
}

func (o LookupCceNodePoolResultOutput) ScallEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) bool { return v.ScallEnable }).(pulumi.BoolOutput)
}

func (o LookupCceNodePoolResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupCceNodePoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupCceNodePoolResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCceNodePoolResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCceNodePoolResultOutput{})
}
