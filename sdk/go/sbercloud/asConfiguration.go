// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AsConfiguration struct {
	pulumi.CustomResourceState

	InstanceConfig           AsConfigurationInstanceConfigOutput `pulumi:"instanceConfig"`
	Region                   pulumi.StringOutput                 `pulumi:"region"`
	ScalingConfigurationName pulumi.StringOutput                 `pulumi:"scalingConfigurationName"`
	Status                   pulumi.StringOutput                 `pulumi:"status"`
}

// NewAsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewAsConfiguration(ctx *pulumi.Context,
	name string, args *AsConfigurationArgs, opts ...pulumi.ResourceOption) (*AsConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceConfig == nil {
		return nil, errors.New("invalid value for required argument 'InstanceConfig'")
	}
	if args.ScalingConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingConfigurationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AsConfiguration
	err := ctx.RegisterResource("sbercloud:index/asConfiguration:AsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsConfiguration gets an existing AsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AsConfigurationState, opts ...pulumi.ResourceOption) (*AsConfiguration, error) {
	var resource AsConfiguration
	err := ctx.ReadResource("sbercloud:index/asConfiguration:AsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AsConfiguration resources.
type asConfigurationState struct {
	InstanceConfig           *AsConfigurationInstanceConfig `pulumi:"instanceConfig"`
	Region                   *string                        `pulumi:"region"`
	ScalingConfigurationName *string                        `pulumi:"scalingConfigurationName"`
	Status                   *string                        `pulumi:"status"`
}

type AsConfigurationState struct {
	InstanceConfig           AsConfigurationInstanceConfigPtrInput
	Region                   pulumi.StringPtrInput
	ScalingConfigurationName pulumi.StringPtrInput
	Status                   pulumi.StringPtrInput
}

func (AsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*asConfigurationState)(nil)).Elem()
}

type asConfigurationArgs struct {
	InstanceConfig           AsConfigurationInstanceConfig `pulumi:"instanceConfig"`
	Region                   *string                       `pulumi:"region"`
	ScalingConfigurationName string                        `pulumi:"scalingConfigurationName"`
}

// The set of arguments for constructing a AsConfiguration resource.
type AsConfigurationArgs struct {
	InstanceConfig           AsConfigurationInstanceConfigInput
	Region                   pulumi.StringPtrInput
	ScalingConfigurationName pulumi.StringInput
}

func (AsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*asConfigurationArgs)(nil)).Elem()
}

type AsConfigurationInput interface {
	pulumi.Input

	ToAsConfigurationOutput() AsConfigurationOutput
	ToAsConfigurationOutputWithContext(ctx context.Context) AsConfigurationOutput
}

func (*AsConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**AsConfiguration)(nil)).Elem()
}

func (i *AsConfiguration) ToAsConfigurationOutput() AsConfigurationOutput {
	return i.ToAsConfigurationOutputWithContext(context.Background())
}

func (i *AsConfiguration) ToAsConfigurationOutputWithContext(ctx context.Context) AsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsConfigurationOutput)
}

// AsConfigurationArrayInput is an input type that accepts AsConfigurationArray and AsConfigurationArrayOutput values.
// You can construct a concrete instance of `AsConfigurationArrayInput` via:
//
//	AsConfigurationArray{ AsConfigurationArgs{...} }
type AsConfigurationArrayInput interface {
	pulumi.Input

	ToAsConfigurationArrayOutput() AsConfigurationArrayOutput
	ToAsConfigurationArrayOutputWithContext(context.Context) AsConfigurationArrayOutput
}

type AsConfigurationArray []AsConfigurationInput

func (AsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AsConfiguration)(nil)).Elem()
}

func (i AsConfigurationArray) ToAsConfigurationArrayOutput() AsConfigurationArrayOutput {
	return i.ToAsConfigurationArrayOutputWithContext(context.Background())
}

func (i AsConfigurationArray) ToAsConfigurationArrayOutputWithContext(ctx context.Context) AsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsConfigurationArrayOutput)
}

// AsConfigurationMapInput is an input type that accepts AsConfigurationMap and AsConfigurationMapOutput values.
// You can construct a concrete instance of `AsConfigurationMapInput` via:
//
//	AsConfigurationMap{ "key": AsConfigurationArgs{...} }
type AsConfigurationMapInput interface {
	pulumi.Input

	ToAsConfigurationMapOutput() AsConfigurationMapOutput
	ToAsConfigurationMapOutputWithContext(context.Context) AsConfigurationMapOutput
}

type AsConfigurationMap map[string]AsConfigurationInput

func (AsConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AsConfiguration)(nil)).Elem()
}

func (i AsConfigurationMap) ToAsConfigurationMapOutput() AsConfigurationMapOutput {
	return i.ToAsConfigurationMapOutputWithContext(context.Background())
}

func (i AsConfigurationMap) ToAsConfigurationMapOutputWithContext(ctx context.Context) AsConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsConfigurationMapOutput)
}

type AsConfigurationOutput struct{ *pulumi.OutputState }

func (AsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsConfiguration)(nil)).Elem()
}

func (o AsConfigurationOutput) ToAsConfigurationOutput() AsConfigurationOutput {
	return o
}

func (o AsConfigurationOutput) ToAsConfigurationOutputWithContext(ctx context.Context) AsConfigurationOutput {
	return o
}

func (o AsConfigurationOutput) InstanceConfig() AsConfigurationInstanceConfigOutput {
	return o.ApplyT(func(v *AsConfiguration) AsConfigurationInstanceConfigOutput { return v.InstanceConfig }).(AsConfigurationInstanceConfigOutput)
}

func (o AsConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AsConfiguration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AsConfigurationOutput) ScalingConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *AsConfiguration) pulumi.StringOutput { return v.ScalingConfigurationName }).(pulumi.StringOutput)
}

func (o AsConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AsConfiguration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (AsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AsConfiguration)(nil)).Elem()
}

func (o AsConfigurationArrayOutput) ToAsConfigurationArrayOutput() AsConfigurationArrayOutput {
	return o
}

func (o AsConfigurationArrayOutput) ToAsConfigurationArrayOutputWithContext(ctx context.Context) AsConfigurationArrayOutput {
	return o
}

func (o AsConfigurationArrayOutput) Index(i pulumi.IntInput) AsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AsConfiguration {
		return vs[0].([]*AsConfiguration)[vs[1].(int)]
	}).(AsConfigurationOutput)
}

type AsConfigurationMapOutput struct{ *pulumi.OutputState }

func (AsConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AsConfiguration)(nil)).Elem()
}

func (o AsConfigurationMapOutput) ToAsConfigurationMapOutput() AsConfigurationMapOutput {
	return o
}

func (o AsConfigurationMapOutput) ToAsConfigurationMapOutputWithContext(ctx context.Context) AsConfigurationMapOutput {
	return o
}

func (o AsConfigurationMapOutput) MapIndex(k pulumi.StringInput) AsConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AsConfiguration {
		return vs[0].(map[string]*AsConfiguration)[vs[1].(string)]
	}).(AsConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AsConfigurationInput)(nil)).Elem(), &AsConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsConfigurationArrayInput)(nil)).Elem(), AsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsConfigurationMapInput)(nil)).Elem(), AsConfigurationMap{})
	pulumi.RegisterOutputType(AsConfigurationOutput{})
	pulumi.RegisterOutputType(AsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(AsConfigurationMapOutput{})
}
