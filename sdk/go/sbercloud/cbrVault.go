// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CbrVault struct {
	pulumi.CustomResourceState

	// The allocated capacity, in GB.
	Allocated pulumi.Float64Output `pulumi:"allocated"`
	// Whether automatic association is supported.
	AutoBind pulumi.BoolOutput `pulumi:"autoBind"`
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand pulumi.BoolOutput `pulumi:"autoExpand"`
	// Deprecated: Deprecated
	AutoPay   pulumi.StringPtrOutput `pulumi:"autoPay"`
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// The backup name prefix.
	BackupNamePrefix pulumi.StringOutput `pulumi:"backupNamePrefix"`
	// The rules for automatic association.
	BindRules    pulumi.StringMapOutput `pulumi:"bindRules"`
	ChargingMode pulumi.StringOutput    `pulumi:"chargingMode"`
	// The cloud type of the vault.
	CloudType pulumi.StringOutput `pulumi:"cloudType"`
	// The consistent level (specification) of the vault.
	ConsistentLevel pulumi.StringPtrOutput `pulumi:"consistentLevel"`
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Whether multiple availability zones are used for backing up.
	IsMultiAz pulumi.BoolOutput `pulumi:"isMultiAz"`
	// The name of the vault.
	Name       pulumi.StringOutput    `pulumi:"name"`
	Period     pulumi.IntPtrOutput    `pulumi:"period"`
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The policy details to associate with the CBR vault.
	Policies CbrVaultPolicyArrayOutput `pulumi:"policies"`
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// The protection type of the vault.
	ProtectionType pulumi.StringOutput `pulumi:"protectionType"`
	// The region where the vault is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The array of one or more resources to attach to the CBR vault.
	Resources CbrVaultResourceArrayOutput `pulumi:"resources"`
	// The capacity of the vault, in GB.
	Size pulumi.IntOutput `pulumi:"size"`
	// The specification code.
	SpecCode pulumi.StringOutput `pulumi:"specCode"`
	// The vault status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of the bucket for the vault.
	Storage pulumi.StringOutput    `pulumi:"storage"`
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the vault.
	Type pulumi.StringOutput `pulumi:"type"`
	// The used capacity, in GB.
	Used pulumi.Float64Output `pulumi:"used"`
}

// NewCbrVault registers a new resource with the given unique name, arguments, and options.
func NewCbrVault(ctx *pulumi.Context,
	name string, args *CbrVaultArgs, opts ...pulumi.ResourceOption) (*CbrVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtectionType == nil {
		return nil, errors.New("invalid value for required argument 'ProtectionType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CbrVault
	err := ctx.RegisterResource("sbercloud:index/cbrVault:CbrVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCbrVault gets an existing CbrVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCbrVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CbrVaultState, opts ...pulumi.ResourceOption) (*CbrVault, error) {
	var resource CbrVault
	err := ctx.ReadResource("sbercloud:index/cbrVault:CbrVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CbrVault resources.
type cbrVaultState struct {
	// The allocated capacity, in GB.
	Allocated *float64 `pulumi:"allocated"`
	// Whether automatic association is supported.
	AutoBind *bool `pulumi:"autoBind"`
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand *bool `pulumi:"autoExpand"`
	// Deprecated: Deprecated
	AutoPay   *string `pulumi:"autoPay"`
	AutoRenew *string `pulumi:"autoRenew"`
	// The backup name prefix.
	BackupNamePrefix *string `pulumi:"backupNamePrefix"`
	// The rules for automatic association.
	BindRules    map[string]string `pulumi:"bindRules"`
	ChargingMode *string           `pulumi:"chargingMode"`
	// The cloud type of the vault.
	CloudType *string `pulumi:"cloudType"`
	// The consistent level (specification) of the vault.
	ConsistentLevel *string `pulumi:"consistentLevel"`
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether multiple availability zones are used for backing up.
	IsMultiAz *bool `pulumi:"isMultiAz"`
	// The name of the vault.
	Name       *string `pulumi:"name"`
	Period     *int    `pulumi:"period"`
	PeriodUnit *string `pulumi:"periodUnit"`
	// The policy details to associate with the CBR vault.
	Policies []CbrVaultPolicy `pulumi:"policies"`
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId *string `pulumi:"policyId"`
	// The protection type of the vault.
	ProtectionType *string `pulumi:"protectionType"`
	// The region where the vault is located.
	Region *string `pulumi:"region"`
	// The array of one or more resources to attach to the CBR vault.
	Resources []CbrVaultResource `pulumi:"resources"`
	// The capacity of the vault, in GB.
	Size *int `pulumi:"size"`
	// The specification code.
	SpecCode *string `pulumi:"specCode"`
	// The vault status.
	Status *string `pulumi:"status"`
	// The name of the bucket for the vault.
	Storage *string           `pulumi:"storage"`
	Tags    map[string]string `pulumi:"tags"`
	// The type of the vault.
	Type *string `pulumi:"type"`
	// The used capacity, in GB.
	Used *float64 `pulumi:"used"`
}

type CbrVaultState struct {
	// The allocated capacity, in GB.
	Allocated pulumi.Float64PtrInput
	// Whether automatic association is supported.
	AutoBind pulumi.BoolPtrInput
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand pulumi.BoolPtrInput
	// Deprecated: Deprecated
	AutoPay   pulumi.StringPtrInput
	AutoRenew pulumi.StringPtrInput
	// The backup name prefix.
	BackupNamePrefix pulumi.StringPtrInput
	// The rules for automatic association.
	BindRules    pulumi.StringMapInput
	ChargingMode pulumi.StringPtrInput
	// The cloud type of the vault.
	CloudType pulumi.StringPtrInput
	// The consistent level (specification) of the vault.
	ConsistentLevel pulumi.StringPtrInput
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether multiple availability zones are used for backing up.
	IsMultiAz pulumi.BoolPtrInput
	// The name of the vault.
	Name       pulumi.StringPtrInput
	Period     pulumi.IntPtrInput
	PeriodUnit pulumi.StringPtrInput
	// The policy details to associate with the CBR vault.
	Policies CbrVaultPolicyArrayInput
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId pulumi.StringPtrInput
	// The protection type of the vault.
	ProtectionType pulumi.StringPtrInput
	// The region where the vault is located.
	Region pulumi.StringPtrInput
	// The array of one or more resources to attach to the CBR vault.
	Resources CbrVaultResourceArrayInput
	// The capacity of the vault, in GB.
	Size pulumi.IntPtrInput
	// The specification code.
	SpecCode pulumi.StringPtrInput
	// The vault status.
	Status pulumi.StringPtrInput
	// The name of the bucket for the vault.
	Storage pulumi.StringPtrInput
	Tags    pulumi.StringMapInput
	// The type of the vault.
	Type pulumi.StringPtrInput
	// The used capacity, in GB.
	Used pulumi.Float64PtrInput
}

func (CbrVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrVaultState)(nil)).Elem()
}

type cbrVaultArgs struct {
	// Whether automatic association is supported.
	AutoBind *bool `pulumi:"autoBind"`
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand *bool `pulumi:"autoExpand"`
	// Deprecated: Deprecated
	AutoPay   *string `pulumi:"autoPay"`
	AutoRenew *string `pulumi:"autoRenew"`
	// The backup name prefix.
	BackupNamePrefix *string `pulumi:"backupNamePrefix"`
	// The rules for automatic association.
	BindRules    map[string]string `pulumi:"bindRules"`
	ChargingMode *string           `pulumi:"chargingMode"`
	// The cloud type of the vault.
	CloudType *string `pulumi:"cloudType"`
	// The consistent level (specification) of the vault.
	ConsistentLevel *string `pulumi:"consistentLevel"`
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether multiple availability zones are used for backing up.
	IsMultiAz *bool `pulumi:"isMultiAz"`
	// The name of the vault.
	Name       *string `pulumi:"name"`
	Period     *int    `pulumi:"period"`
	PeriodUnit *string `pulumi:"periodUnit"`
	// The policy details to associate with the CBR vault.
	Policies []CbrVaultPolicy `pulumi:"policies"`
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId *string `pulumi:"policyId"`
	// The protection type of the vault.
	ProtectionType string `pulumi:"protectionType"`
	// The region where the vault is located.
	Region *string `pulumi:"region"`
	// The array of one or more resources to attach to the CBR vault.
	Resources []CbrVaultResource `pulumi:"resources"`
	// The capacity of the vault, in GB.
	Size int               `pulumi:"size"`
	Tags map[string]string `pulumi:"tags"`
	// The type of the vault.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CbrVault resource.
type CbrVaultArgs struct {
	// Whether automatic association is supported.
	AutoBind pulumi.BoolPtrInput
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand pulumi.BoolPtrInput
	// Deprecated: Deprecated
	AutoPay   pulumi.StringPtrInput
	AutoRenew pulumi.StringPtrInput
	// The backup name prefix.
	BackupNamePrefix pulumi.StringPtrInput
	// The rules for automatic association.
	BindRules    pulumi.StringMapInput
	ChargingMode pulumi.StringPtrInput
	// The cloud type of the vault.
	CloudType pulumi.StringPtrInput
	// The consistent level (specification) of the vault.
	ConsistentLevel pulumi.StringPtrInput
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether multiple availability zones are used for backing up.
	IsMultiAz pulumi.BoolPtrInput
	// The name of the vault.
	Name       pulumi.StringPtrInput
	Period     pulumi.IntPtrInput
	PeriodUnit pulumi.StringPtrInput
	// The policy details to associate with the CBR vault.
	Policies CbrVaultPolicyArrayInput
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId pulumi.StringPtrInput
	// The protection type of the vault.
	ProtectionType pulumi.StringInput
	// The region where the vault is located.
	Region pulumi.StringPtrInput
	// The array of one or more resources to attach to the CBR vault.
	Resources CbrVaultResourceArrayInput
	// The capacity of the vault, in GB.
	Size pulumi.IntInput
	Tags pulumi.StringMapInput
	// The type of the vault.
	Type pulumi.StringInput
}

func (CbrVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrVaultArgs)(nil)).Elem()
}

type CbrVaultInput interface {
	pulumi.Input

	ToCbrVaultOutput() CbrVaultOutput
	ToCbrVaultOutputWithContext(ctx context.Context) CbrVaultOutput
}

func (*CbrVault) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrVault)(nil)).Elem()
}

func (i *CbrVault) ToCbrVaultOutput() CbrVaultOutput {
	return i.ToCbrVaultOutputWithContext(context.Background())
}

func (i *CbrVault) ToCbrVaultOutputWithContext(ctx context.Context) CbrVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrVaultOutput)
}

// CbrVaultArrayInput is an input type that accepts CbrVaultArray and CbrVaultArrayOutput values.
// You can construct a concrete instance of `CbrVaultArrayInput` via:
//
//	CbrVaultArray{ CbrVaultArgs{...} }
type CbrVaultArrayInput interface {
	pulumi.Input

	ToCbrVaultArrayOutput() CbrVaultArrayOutput
	ToCbrVaultArrayOutputWithContext(context.Context) CbrVaultArrayOutput
}

type CbrVaultArray []CbrVaultInput

func (CbrVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrVault)(nil)).Elem()
}

func (i CbrVaultArray) ToCbrVaultArrayOutput() CbrVaultArrayOutput {
	return i.ToCbrVaultArrayOutputWithContext(context.Background())
}

func (i CbrVaultArray) ToCbrVaultArrayOutputWithContext(ctx context.Context) CbrVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrVaultArrayOutput)
}

// CbrVaultMapInput is an input type that accepts CbrVaultMap and CbrVaultMapOutput values.
// You can construct a concrete instance of `CbrVaultMapInput` via:
//
//	CbrVaultMap{ "key": CbrVaultArgs{...} }
type CbrVaultMapInput interface {
	pulumi.Input

	ToCbrVaultMapOutput() CbrVaultMapOutput
	ToCbrVaultMapOutputWithContext(context.Context) CbrVaultMapOutput
}

type CbrVaultMap map[string]CbrVaultInput

func (CbrVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrVault)(nil)).Elem()
}

func (i CbrVaultMap) ToCbrVaultMapOutput() CbrVaultMapOutput {
	return i.ToCbrVaultMapOutputWithContext(context.Background())
}

func (i CbrVaultMap) ToCbrVaultMapOutputWithContext(ctx context.Context) CbrVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrVaultMapOutput)
}

type CbrVaultOutput struct{ *pulumi.OutputState }

func (CbrVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrVault)(nil)).Elem()
}

func (o CbrVaultOutput) ToCbrVaultOutput() CbrVaultOutput {
	return o
}

func (o CbrVaultOutput) ToCbrVaultOutputWithContext(ctx context.Context) CbrVaultOutput {
	return o
}

// The allocated capacity, in GB.
func (o CbrVaultOutput) Allocated() pulumi.Float64Output {
	return o.ApplyT(func(v *CbrVault) pulumi.Float64Output { return v.Allocated }).(pulumi.Float64Output)
}

// Whether automatic association is supported.
func (o CbrVaultOutput) AutoBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.BoolOutput { return v.AutoBind }).(pulumi.BoolOutput)
}

// Whether to enable auto capacity expansion for the vault.
func (o CbrVaultOutput) AutoExpand() pulumi.BoolOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.BoolOutput { return v.AutoExpand }).(pulumi.BoolOutput)
}

// Deprecated: Deprecated
func (o CbrVaultOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

func (o CbrVaultOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// The backup name prefix.
func (o CbrVaultOutput) BackupNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.BackupNamePrefix }).(pulumi.StringOutput)
}

// The rules for automatic association.
func (o CbrVaultOutput) BindRules() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringMapOutput { return v.BindRules }).(pulumi.StringMapOutput)
}

func (o CbrVaultOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The cloud type of the vault.
func (o CbrVaultOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.CloudType }).(pulumi.StringOutput)
}

// The consistent level (specification) of the vault.
func (o CbrVaultOutput) ConsistentLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringPtrOutput { return v.ConsistentLevel }).(pulumi.StringPtrOutput)
}

// The enterprise project ID to which the vault belongs.
func (o CbrVaultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Whether multiple availability zones are used for backing up.
func (o CbrVaultOutput) IsMultiAz() pulumi.BoolOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.BoolOutput { return v.IsMultiAz }).(pulumi.BoolOutput)
}

// The name of the vault.
func (o CbrVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CbrVaultOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o CbrVaultOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The policy details to associate with the CBR vault.
func (o CbrVaultOutput) Policies() CbrVaultPolicyArrayOutput {
	return o.ApplyT(func(v *CbrVault) CbrVaultPolicyArrayOutput { return v.Policies }).(CbrVaultPolicyArrayOutput)
}

// schema:Deprecated; Using parameter 'policy' instead.
func (o CbrVaultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// The protection type of the vault.
func (o CbrVaultOutput) ProtectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.ProtectionType }).(pulumi.StringOutput)
}

// The region where the vault is located.
func (o CbrVaultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The array of one or more resources to attach to the CBR vault.
func (o CbrVaultOutput) Resources() CbrVaultResourceArrayOutput {
	return o.ApplyT(func(v *CbrVault) CbrVaultResourceArrayOutput { return v.Resources }).(CbrVaultResourceArrayOutput)
}

// The capacity of the vault, in GB.
func (o CbrVaultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The specification code.
func (o CbrVaultOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.SpecCode }).(pulumi.StringOutput)
}

// The vault status.
func (o CbrVaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of the bucket for the vault.
func (o CbrVaultOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.Storage }).(pulumi.StringOutput)
}

func (o CbrVaultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the vault.
func (o CbrVaultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrVault) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The used capacity, in GB.
func (o CbrVaultOutput) Used() pulumi.Float64Output {
	return o.ApplyT(func(v *CbrVault) pulumi.Float64Output { return v.Used }).(pulumi.Float64Output)
}

type CbrVaultArrayOutput struct{ *pulumi.OutputState }

func (CbrVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrVault)(nil)).Elem()
}

func (o CbrVaultArrayOutput) ToCbrVaultArrayOutput() CbrVaultArrayOutput {
	return o
}

func (o CbrVaultArrayOutput) ToCbrVaultArrayOutputWithContext(ctx context.Context) CbrVaultArrayOutput {
	return o
}

func (o CbrVaultArrayOutput) Index(i pulumi.IntInput) CbrVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CbrVault {
		return vs[0].([]*CbrVault)[vs[1].(int)]
	}).(CbrVaultOutput)
}

type CbrVaultMapOutput struct{ *pulumi.OutputState }

func (CbrVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrVault)(nil)).Elem()
}

func (o CbrVaultMapOutput) ToCbrVaultMapOutput() CbrVaultMapOutput {
	return o
}

func (o CbrVaultMapOutput) ToCbrVaultMapOutputWithContext(ctx context.Context) CbrVaultMapOutput {
	return o
}

func (o CbrVaultMapOutput) MapIndex(k pulumi.StringInput) CbrVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CbrVault {
		return vs[0].(map[string]*CbrVault)[vs[1].(string)]
	}).(CbrVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CbrVaultInput)(nil)).Elem(), &CbrVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrVaultArrayInput)(nil)).Elem(), CbrVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrVaultMapInput)(nil)).Elem(), CbrVaultMap{})
	pulumi.RegisterOutputType(CbrVaultOutput{})
	pulumi.RegisterOutputType(CbrVaultArrayOutput{})
	pulumi.RegisterOutputType(CbrVaultMapOutput{})
}
