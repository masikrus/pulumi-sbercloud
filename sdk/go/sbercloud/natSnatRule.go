// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NatSnatRule struct {
	pulumi.CustomResourceState

	// The CIDR block connected by SNAT rule (DC side).
	Cidr pulumi.StringPtrOutput `pulumi:"cidr"`
	// The creation time of the SNAT rule.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the SNAT rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The floating IP addresses (separated by commas) connected by SNAT rule.
	FloatingIpAddress pulumi.StringOutput `pulumi:"floatingIpAddress"`
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId pulumi.StringOutput `pulumi:"floatingIpId"`
	// The frozen EIP associated with the SNAT rule.
	FreezedIpAddress pulumi.StringOutput `pulumi:"freezedIpAddress"`
	// The global EIP addresses (separated by commas) connected by SNAT rule.
	GlobalEipAddress pulumi.StringOutput `pulumi:"globalEipAddress"`
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId pulumi.StringOutput `pulumi:"globalEipId"`
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId pulumi.StringPtrOutput `pulumi:"networkId"`
	// The region where the SNAT rule is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The resource type of the SNAT rule.
	SourceType pulumi.IntPtrOutput `pulumi:"sourceType"`
	// The status of the SNAT rule.
	Status pulumi.StringOutput `pulumi:"status"`
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewNatSnatRule registers a new resource with the given unique name, arguments, and options.
func NewNatSnatRule(ctx *pulumi.Context,
	name string, args *NatSnatRuleArgs, opts ...pulumi.ResourceOption) (*NatSnatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatSnatRule
	err := ctx.RegisterResource("sbercloud:index/natSnatRule:NatSnatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatSnatRule gets an existing NatSnatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatSnatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatSnatRuleState, opts ...pulumi.ResourceOption) (*NatSnatRule, error) {
	var resource NatSnatRule
	err := ctx.ReadResource("sbercloud:index/natSnatRule:NatSnatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatSnatRule resources.
type natSnatRuleState struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr *string `pulumi:"cidr"`
	// The creation time of the SNAT rule.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the SNAT rule.
	Description *string `pulumi:"description"`
	// The floating IP addresses (separated by commas) connected by SNAT rule.
	FloatingIpAddress *string `pulumi:"floatingIpAddress"`
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The frozen EIP associated with the SNAT rule.
	FreezedIpAddress *string `pulumi:"freezedIpAddress"`
	// The global EIP addresses (separated by commas) connected by SNAT rule.
	GlobalEipAddress *string `pulumi:"globalEipAddress"`
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId *string `pulumi:"networkId"`
	// The region where the SNAT rule is located.
	Region *string `pulumi:"region"`
	// The resource type of the SNAT rule.
	SourceType *int `pulumi:"sourceType"`
	// The status of the SNAT rule.
	Status *string `pulumi:"status"`
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId *string `pulumi:"subnetId"`
}

type NatSnatRuleState struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr pulumi.StringPtrInput
	// The creation time of the SNAT rule.
	CreatedAt pulumi.StringPtrInput
	// The description of the SNAT rule.
	Description pulumi.StringPtrInput
	// The floating IP addresses (separated by commas) connected by SNAT rule.
	FloatingIpAddress pulumi.StringPtrInput
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId pulumi.StringPtrInput
	// The frozen EIP associated with the SNAT rule.
	FreezedIpAddress pulumi.StringPtrInput
	// The global EIP addresses (separated by commas) connected by SNAT rule.
	GlobalEipAddress pulumi.StringPtrInput
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId pulumi.StringPtrInput
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId pulumi.StringPtrInput
	// The region where the SNAT rule is located.
	Region pulumi.StringPtrInput
	// The resource type of the SNAT rule.
	SourceType pulumi.IntPtrInput
	// The status of the SNAT rule.
	Status pulumi.StringPtrInput
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId pulumi.StringPtrInput
}

func (NatSnatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*natSnatRuleState)(nil)).Elem()
}

type natSnatRuleArgs struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr *string `pulumi:"cidr"`
	// The description of the SNAT rule.
	Description *string `pulumi:"description"`
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId *string `pulumi:"networkId"`
	// The region where the SNAT rule is located.
	Region *string `pulumi:"region"`
	// The resource type of the SNAT rule.
	SourceType *int `pulumi:"sourceType"`
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a NatSnatRule resource.
type NatSnatRuleArgs struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr pulumi.StringPtrInput
	// The description of the SNAT rule.
	Description pulumi.StringPtrInput
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId pulumi.StringPtrInput
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId pulumi.StringInput
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId pulumi.StringPtrInput
	// The region where the SNAT rule is located.
	Region pulumi.StringPtrInput
	// The resource type of the SNAT rule.
	SourceType pulumi.IntPtrInput
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId pulumi.StringPtrInput
}

func (NatSnatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natSnatRuleArgs)(nil)).Elem()
}

type NatSnatRuleInput interface {
	pulumi.Input

	ToNatSnatRuleOutput() NatSnatRuleOutput
	ToNatSnatRuleOutputWithContext(ctx context.Context) NatSnatRuleOutput
}

func (*NatSnatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NatSnatRule)(nil)).Elem()
}

func (i *NatSnatRule) ToNatSnatRuleOutput() NatSnatRuleOutput {
	return i.ToNatSnatRuleOutputWithContext(context.Background())
}

func (i *NatSnatRule) ToNatSnatRuleOutputWithContext(ctx context.Context) NatSnatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatSnatRuleOutput)
}

// NatSnatRuleArrayInput is an input type that accepts NatSnatRuleArray and NatSnatRuleArrayOutput values.
// You can construct a concrete instance of `NatSnatRuleArrayInput` via:
//
//	NatSnatRuleArray{ NatSnatRuleArgs{...} }
type NatSnatRuleArrayInput interface {
	pulumi.Input

	ToNatSnatRuleArrayOutput() NatSnatRuleArrayOutput
	ToNatSnatRuleArrayOutputWithContext(context.Context) NatSnatRuleArrayOutput
}

type NatSnatRuleArray []NatSnatRuleInput

func (NatSnatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatSnatRule)(nil)).Elem()
}

func (i NatSnatRuleArray) ToNatSnatRuleArrayOutput() NatSnatRuleArrayOutput {
	return i.ToNatSnatRuleArrayOutputWithContext(context.Background())
}

func (i NatSnatRuleArray) ToNatSnatRuleArrayOutputWithContext(ctx context.Context) NatSnatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatSnatRuleArrayOutput)
}

// NatSnatRuleMapInput is an input type that accepts NatSnatRuleMap and NatSnatRuleMapOutput values.
// You can construct a concrete instance of `NatSnatRuleMapInput` via:
//
//	NatSnatRuleMap{ "key": NatSnatRuleArgs{...} }
type NatSnatRuleMapInput interface {
	pulumi.Input

	ToNatSnatRuleMapOutput() NatSnatRuleMapOutput
	ToNatSnatRuleMapOutputWithContext(context.Context) NatSnatRuleMapOutput
}

type NatSnatRuleMap map[string]NatSnatRuleInput

func (NatSnatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatSnatRule)(nil)).Elem()
}

func (i NatSnatRuleMap) ToNatSnatRuleMapOutput() NatSnatRuleMapOutput {
	return i.ToNatSnatRuleMapOutputWithContext(context.Background())
}

func (i NatSnatRuleMap) ToNatSnatRuleMapOutputWithContext(ctx context.Context) NatSnatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatSnatRuleMapOutput)
}

type NatSnatRuleOutput struct{ *pulumi.OutputState }

func (NatSnatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatSnatRule)(nil)).Elem()
}

func (o NatSnatRuleOutput) ToNatSnatRuleOutput() NatSnatRuleOutput {
	return o
}

func (o NatSnatRuleOutput) ToNatSnatRuleOutputWithContext(ctx context.Context) NatSnatRuleOutput {
	return o
}

// The CIDR block connected by SNAT rule (DC side).
func (o NatSnatRuleOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringPtrOutput { return v.Cidr }).(pulumi.StringPtrOutput)
}

// The creation time of the SNAT rule.
func (o NatSnatRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the SNAT rule.
func (o NatSnatRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The floating IP addresses (separated by commas) connected by SNAT rule.
func (o NatSnatRuleOutput) FloatingIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.FloatingIpAddress }).(pulumi.StringOutput)
}

// The IDs of floating IPs connected by SNAT rule.
func (o NatSnatRuleOutput) FloatingIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.FloatingIpId }).(pulumi.StringOutput)
}

// The frozen EIP associated with the SNAT rule.
func (o NatSnatRuleOutput) FreezedIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.FreezedIpAddress }).(pulumi.StringOutput)
}

// The global EIP addresses (separated by commas) connected by SNAT rule.
func (o NatSnatRuleOutput) GlobalEipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.GlobalEipAddress }).(pulumi.StringOutput)
}

// The IDs (separated by commas) of global EIPs connected by SNAT rule.
func (o NatSnatRuleOutput) GlobalEipId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.GlobalEipId }).(pulumi.StringOutput)
}

// schema: Required; The ID of the gateway to which the SNAT rule belongs.
func (o NatSnatRuleOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
func (o NatSnatRuleOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringPtrOutput { return v.NetworkId }).(pulumi.StringPtrOutput)
}

// The region where the SNAT rule is located.
func (o NatSnatRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The resource type of the SNAT rule.
func (o NatSnatRuleOutput) SourceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.IntPtrOutput { return v.SourceType }).(pulumi.IntPtrOutput)
}

// The status of the SNAT rule.
func (o NatSnatRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The network IDs of subnet connected by SNAT rule (VPC side).
func (o NatSnatRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatSnatRule) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type NatSnatRuleArrayOutput struct{ *pulumi.OutputState }

func (NatSnatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatSnatRule)(nil)).Elem()
}

func (o NatSnatRuleArrayOutput) ToNatSnatRuleArrayOutput() NatSnatRuleArrayOutput {
	return o
}

func (o NatSnatRuleArrayOutput) ToNatSnatRuleArrayOutputWithContext(ctx context.Context) NatSnatRuleArrayOutput {
	return o
}

func (o NatSnatRuleArrayOutput) Index(i pulumi.IntInput) NatSnatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatSnatRule {
		return vs[0].([]*NatSnatRule)[vs[1].(int)]
	}).(NatSnatRuleOutput)
}

type NatSnatRuleMapOutput struct{ *pulumi.OutputState }

func (NatSnatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatSnatRule)(nil)).Elem()
}

func (o NatSnatRuleMapOutput) ToNatSnatRuleMapOutput() NatSnatRuleMapOutput {
	return o
}

func (o NatSnatRuleMapOutput) ToNatSnatRuleMapOutputWithContext(ctx context.Context) NatSnatRuleMapOutput {
	return o
}

func (o NatSnatRuleMapOutput) MapIndex(k pulumi.StringInput) NatSnatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatSnatRule {
		return vs[0].(map[string]*NatSnatRule)[vs[1].(string)]
	}).(NatSnatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatSnatRuleInput)(nil)).Elem(), &NatSnatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatSnatRuleArrayInput)(nil)).Elem(), NatSnatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatSnatRuleMapInput)(nil)).Elem(), NatSnatRuleMap{})
	pulumi.RegisterOutputType(NatSnatRuleOutput{})
	pulumi.RegisterOutputType(NatSnatRuleArrayOutput{})
	pulumi.RegisterOutputType(NatSnatRuleMapOutput{})
}
