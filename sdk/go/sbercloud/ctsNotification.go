// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CtsNotification struct {
	pulumi.CustomResourceState

	AgencyName     pulumi.StringPtrOutput                  `pulumi:"agencyName"`
	CreatedAt      pulumi.StringOutput                     `pulumi:"createdAt"`
	Enabled        pulumi.BoolPtrOutput                    `pulumi:"enabled"`
	Filter         CtsNotificationFilterPtrOutput          `pulumi:"filter"`
	Name           pulumi.StringOutput                     `pulumi:"name"`
	NotificationId pulumi.StringOutput                     `pulumi:"notificationId"`
	OperationType  pulumi.StringOutput                     `pulumi:"operationType"`
	OperationUsers CtsNotificationOperationUserArrayOutput `pulumi:"operationUsers"`
	Operations     CtsNotificationOperationArrayOutput     `pulumi:"operations"`
	Region         pulumi.StringOutput                     `pulumi:"region"`
	SmnTopic       pulumi.StringPtrOutput                  `pulumi:"smnTopic"`
	Status         pulumi.StringOutput                     `pulumi:"status"`
}

// NewCtsNotification registers a new resource with the given unique name, arguments, and options.
func NewCtsNotification(ctx *pulumi.Context,
	name string, args *CtsNotificationArgs, opts ...pulumi.ResourceOption) (*CtsNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperationType == nil {
		return nil, errors.New("invalid value for required argument 'OperationType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CtsNotification
	err := ctx.RegisterResource("sbercloud:index/ctsNotification:CtsNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCtsNotification gets an existing CtsNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCtsNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CtsNotificationState, opts ...pulumi.ResourceOption) (*CtsNotification, error) {
	var resource CtsNotification
	err := ctx.ReadResource("sbercloud:index/ctsNotification:CtsNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CtsNotification resources.
type ctsNotificationState struct {
	AgencyName     *string                        `pulumi:"agencyName"`
	CreatedAt      *string                        `pulumi:"createdAt"`
	Enabled        *bool                          `pulumi:"enabled"`
	Filter         *CtsNotificationFilter         `pulumi:"filter"`
	Name           *string                        `pulumi:"name"`
	NotificationId *string                        `pulumi:"notificationId"`
	OperationType  *string                        `pulumi:"operationType"`
	OperationUsers []CtsNotificationOperationUser `pulumi:"operationUsers"`
	Operations     []CtsNotificationOperation     `pulumi:"operations"`
	Region         *string                        `pulumi:"region"`
	SmnTopic       *string                        `pulumi:"smnTopic"`
	Status         *string                        `pulumi:"status"`
}

type CtsNotificationState struct {
	AgencyName     pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	Enabled        pulumi.BoolPtrInput
	Filter         CtsNotificationFilterPtrInput
	Name           pulumi.StringPtrInput
	NotificationId pulumi.StringPtrInput
	OperationType  pulumi.StringPtrInput
	OperationUsers CtsNotificationOperationUserArrayInput
	Operations     CtsNotificationOperationArrayInput
	Region         pulumi.StringPtrInput
	SmnTopic       pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
}

func (CtsNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ctsNotificationState)(nil)).Elem()
}

type ctsNotificationArgs struct {
	AgencyName     *string                        `pulumi:"agencyName"`
	Enabled        *bool                          `pulumi:"enabled"`
	Filter         *CtsNotificationFilter         `pulumi:"filter"`
	Name           *string                        `pulumi:"name"`
	OperationType  string                         `pulumi:"operationType"`
	OperationUsers []CtsNotificationOperationUser `pulumi:"operationUsers"`
	Operations     []CtsNotificationOperation     `pulumi:"operations"`
	Region         *string                        `pulumi:"region"`
	SmnTopic       *string                        `pulumi:"smnTopic"`
}

// The set of arguments for constructing a CtsNotification resource.
type CtsNotificationArgs struct {
	AgencyName     pulumi.StringPtrInput
	Enabled        pulumi.BoolPtrInput
	Filter         CtsNotificationFilterPtrInput
	Name           pulumi.StringPtrInput
	OperationType  pulumi.StringInput
	OperationUsers CtsNotificationOperationUserArrayInput
	Operations     CtsNotificationOperationArrayInput
	Region         pulumi.StringPtrInput
	SmnTopic       pulumi.StringPtrInput
}

func (CtsNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ctsNotificationArgs)(nil)).Elem()
}

type CtsNotificationInput interface {
	pulumi.Input

	ToCtsNotificationOutput() CtsNotificationOutput
	ToCtsNotificationOutputWithContext(ctx context.Context) CtsNotificationOutput
}

func (*CtsNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**CtsNotification)(nil)).Elem()
}

func (i *CtsNotification) ToCtsNotificationOutput() CtsNotificationOutput {
	return i.ToCtsNotificationOutputWithContext(context.Background())
}

func (i *CtsNotification) ToCtsNotificationOutputWithContext(ctx context.Context) CtsNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsNotificationOutput)
}

// CtsNotificationArrayInput is an input type that accepts CtsNotificationArray and CtsNotificationArrayOutput values.
// You can construct a concrete instance of `CtsNotificationArrayInput` via:
//
//	CtsNotificationArray{ CtsNotificationArgs{...} }
type CtsNotificationArrayInput interface {
	pulumi.Input

	ToCtsNotificationArrayOutput() CtsNotificationArrayOutput
	ToCtsNotificationArrayOutputWithContext(context.Context) CtsNotificationArrayOutput
}

type CtsNotificationArray []CtsNotificationInput

func (CtsNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CtsNotification)(nil)).Elem()
}

func (i CtsNotificationArray) ToCtsNotificationArrayOutput() CtsNotificationArrayOutput {
	return i.ToCtsNotificationArrayOutputWithContext(context.Background())
}

func (i CtsNotificationArray) ToCtsNotificationArrayOutputWithContext(ctx context.Context) CtsNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsNotificationArrayOutput)
}

// CtsNotificationMapInput is an input type that accepts CtsNotificationMap and CtsNotificationMapOutput values.
// You can construct a concrete instance of `CtsNotificationMapInput` via:
//
//	CtsNotificationMap{ "key": CtsNotificationArgs{...} }
type CtsNotificationMapInput interface {
	pulumi.Input

	ToCtsNotificationMapOutput() CtsNotificationMapOutput
	ToCtsNotificationMapOutputWithContext(context.Context) CtsNotificationMapOutput
}

type CtsNotificationMap map[string]CtsNotificationInput

func (CtsNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CtsNotification)(nil)).Elem()
}

func (i CtsNotificationMap) ToCtsNotificationMapOutput() CtsNotificationMapOutput {
	return i.ToCtsNotificationMapOutputWithContext(context.Background())
}

func (i CtsNotificationMap) ToCtsNotificationMapOutputWithContext(ctx context.Context) CtsNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsNotificationMapOutput)
}

type CtsNotificationOutput struct{ *pulumi.OutputState }

func (CtsNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CtsNotification)(nil)).Elem()
}

func (o CtsNotificationOutput) ToCtsNotificationOutput() CtsNotificationOutput {
	return o
}

func (o CtsNotificationOutput) ToCtsNotificationOutputWithContext(ctx context.Context) CtsNotificationOutput {
	return o
}

func (o CtsNotificationOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringPtrOutput { return v.AgencyName }).(pulumi.StringPtrOutput)
}

func (o CtsNotificationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o CtsNotificationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CtsNotificationOutput) Filter() CtsNotificationFilterPtrOutput {
	return o.ApplyT(func(v *CtsNotification) CtsNotificationFilterPtrOutput { return v.Filter }).(CtsNotificationFilterPtrOutput)
}

func (o CtsNotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CtsNotificationOutput) NotificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringOutput { return v.NotificationId }).(pulumi.StringOutput)
}

func (o CtsNotificationOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringOutput { return v.OperationType }).(pulumi.StringOutput)
}

func (o CtsNotificationOutput) OperationUsers() CtsNotificationOperationUserArrayOutput {
	return o.ApplyT(func(v *CtsNotification) CtsNotificationOperationUserArrayOutput { return v.OperationUsers }).(CtsNotificationOperationUserArrayOutput)
}

func (o CtsNotificationOutput) Operations() CtsNotificationOperationArrayOutput {
	return o.ApplyT(func(v *CtsNotification) CtsNotificationOperationArrayOutput { return v.Operations }).(CtsNotificationOperationArrayOutput)
}

func (o CtsNotificationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o CtsNotificationOutput) SmnTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringPtrOutput { return v.SmnTopic }).(pulumi.StringPtrOutput)
}

func (o CtsNotificationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CtsNotification) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type CtsNotificationArrayOutput struct{ *pulumi.OutputState }

func (CtsNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CtsNotification)(nil)).Elem()
}

func (o CtsNotificationArrayOutput) ToCtsNotificationArrayOutput() CtsNotificationArrayOutput {
	return o
}

func (o CtsNotificationArrayOutput) ToCtsNotificationArrayOutputWithContext(ctx context.Context) CtsNotificationArrayOutput {
	return o
}

func (o CtsNotificationArrayOutput) Index(i pulumi.IntInput) CtsNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CtsNotification {
		return vs[0].([]*CtsNotification)[vs[1].(int)]
	}).(CtsNotificationOutput)
}

type CtsNotificationMapOutput struct{ *pulumi.OutputState }

func (CtsNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CtsNotification)(nil)).Elem()
}

func (o CtsNotificationMapOutput) ToCtsNotificationMapOutput() CtsNotificationMapOutput {
	return o
}

func (o CtsNotificationMapOutput) ToCtsNotificationMapOutputWithContext(ctx context.Context) CtsNotificationMapOutput {
	return o
}

func (o CtsNotificationMapOutput) MapIndex(k pulumi.StringInput) CtsNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CtsNotification {
		return vs[0].(map[string]*CtsNotification)[vs[1].(string)]
	}).(CtsNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CtsNotificationInput)(nil)).Elem(), &CtsNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*CtsNotificationArrayInput)(nil)).Elem(), CtsNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CtsNotificationMapInput)(nil)).Elem(), CtsNotificationMap{})
	pulumi.RegisterOutputType(CtsNotificationOutput{})
	pulumi.RegisterOutputType(CtsNotificationArrayOutput{})
	pulumi.RegisterOutputType(CtsNotificationMapOutput{})
}
