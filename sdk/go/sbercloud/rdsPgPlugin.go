// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RdsPgPlugin struct {
	pulumi.CustomResourceState

	DatabaseName           pulumi.StringOutput `pulumi:"databaseName"`
	Description            pulumi.StringOutput `pulumi:"description"`
	InstanceId             pulumi.StringOutput `pulumi:"instanceId"`
	Name                   pulumi.StringOutput `pulumi:"name"`
	Region                 pulumi.StringOutput `pulumi:"region"`
	SharedPreloadLibraries pulumi.StringOutput `pulumi:"sharedPreloadLibraries"`
	Version                pulumi.StringOutput `pulumi:"version"`
}

// NewRdsPgPlugin registers a new resource with the given unique name, arguments, and options.
func NewRdsPgPlugin(ctx *pulumi.Context,
	name string, args *RdsPgPluginArgs, opts ...pulumi.ResourceOption) (*RdsPgPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RdsPgPlugin
	err := ctx.RegisterResource("sbercloud:index/rdsPgPlugin:RdsPgPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRdsPgPlugin gets an existing RdsPgPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdsPgPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RdsPgPluginState, opts ...pulumi.ResourceOption) (*RdsPgPlugin, error) {
	var resource RdsPgPlugin
	err := ctx.ReadResource("sbercloud:index/rdsPgPlugin:RdsPgPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RdsPgPlugin resources.
type rdsPgPluginState struct {
	DatabaseName           *string `pulumi:"databaseName"`
	Description            *string `pulumi:"description"`
	InstanceId             *string `pulumi:"instanceId"`
	Name                   *string `pulumi:"name"`
	Region                 *string `pulumi:"region"`
	SharedPreloadLibraries *string `pulumi:"sharedPreloadLibraries"`
	Version                *string `pulumi:"version"`
}

type RdsPgPluginState struct {
	DatabaseName           pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	InstanceId             pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
	SharedPreloadLibraries pulumi.StringPtrInput
	Version                pulumi.StringPtrInput
}

func (RdsPgPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgPluginState)(nil)).Elem()
}

type rdsPgPluginArgs struct {
	DatabaseName string  `pulumi:"databaseName"`
	InstanceId   string  `pulumi:"instanceId"`
	Name         *string `pulumi:"name"`
	Region       *string `pulumi:"region"`
}

// The set of arguments for constructing a RdsPgPlugin resource.
type RdsPgPluginArgs struct {
	DatabaseName pulumi.StringInput
	InstanceId   pulumi.StringInput
	Name         pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
}

func (RdsPgPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rdsPgPluginArgs)(nil)).Elem()
}

type RdsPgPluginInput interface {
	pulumi.Input

	ToRdsPgPluginOutput() RdsPgPluginOutput
	ToRdsPgPluginOutputWithContext(ctx context.Context) RdsPgPluginOutput
}

func (*RdsPgPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgPlugin)(nil)).Elem()
}

func (i *RdsPgPlugin) ToRdsPgPluginOutput() RdsPgPluginOutput {
	return i.ToRdsPgPluginOutputWithContext(context.Background())
}

func (i *RdsPgPlugin) ToRdsPgPluginOutputWithContext(ctx context.Context) RdsPgPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginOutput)
}

// RdsPgPluginArrayInput is an input type that accepts RdsPgPluginArray and RdsPgPluginArrayOutput values.
// You can construct a concrete instance of `RdsPgPluginArrayInput` via:
//
//	RdsPgPluginArray{ RdsPgPluginArgs{...} }
type RdsPgPluginArrayInput interface {
	pulumi.Input

	ToRdsPgPluginArrayOutput() RdsPgPluginArrayOutput
	ToRdsPgPluginArrayOutputWithContext(context.Context) RdsPgPluginArrayOutput
}

type RdsPgPluginArray []RdsPgPluginInput

func (RdsPgPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgPlugin)(nil)).Elem()
}

func (i RdsPgPluginArray) ToRdsPgPluginArrayOutput() RdsPgPluginArrayOutput {
	return i.ToRdsPgPluginArrayOutputWithContext(context.Background())
}

func (i RdsPgPluginArray) ToRdsPgPluginArrayOutputWithContext(ctx context.Context) RdsPgPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginArrayOutput)
}

// RdsPgPluginMapInput is an input type that accepts RdsPgPluginMap and RdsPgPluginMapOutput values.
// You can construct a concrete instance of `RdsPgPluginMapInput` via:
//
//	RdsPgPluginMap{ "key": RdsPgPluginArgs{...} }
type RdsPgPluginMapInput interface {
	pulumi.Input

	ToRdsPgPluginMapOutput() RdsPgPluginMapOutput
	ToRdsPgPluginMapOutputWithContext(context.Context) RdsPgPluginMapOutput
}

type RdsPgPluginMap map[string]RdsPgPluginInput

func (RdsPgPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgPlugin)(nil)).Elem()
}

func (i RdsPgPluginMap) ToRdsPgPluginMapOutput() RdsPgPluginMapOutput {
	return i.ToRdsPgPluginMapOutputWithContext(context.Background())
}

func (i RdsPgPluginMap) ToRdsPgPluginMapOutputWithContext(ctx context.Context) RdsPgPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsPgPluginMapOutput)
}

type RdsPgPluginOutput struct{ *pulumi.OutputState }

func (RdsPgPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsPgPlugin)(nil)).Elem()
}

func (o RdsPgPluginOutput) ToRdsPgPluginOutput() RdsPgPluginOutput {
	return o
}

func (o RdsPgPluginOutput) ToRdsPgPluginOutputWithContext(ctx context.Context) RdsPgPluginOutput {
	return o
}

func (o RdsPgPluginOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o RdsPgPluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o RdsPgPluginOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o RdsPgPluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RdsPgPluginOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o RdsPgPluginOutput) SharedPreloadLibraries() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.SharedPreloadLibraries }).(pulumi.StringOutput)
}

func (o RdsPgPluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RdsPgPlugin) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type RdsPgPluginArrayOutput struct{ *pulumi.OutputState }

func (RdsPgPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RdsPgPlugin)(nil)).Elem()
}

func (o RdsPgPluginArrayOutput) ToRdsPgPluginArrayOutput() RdsPgPluginArrayOutput {
	return o
}

func (o RdsPgPluginArrayOutput) ToRdsPgPluginArrayOutputWithContext(ctx context.Context) RdsPgPluginArrayOutput {
	return o
}

func (o RdsPgPluginArrayOutput) Index(i pulumi.IntInput) RdsPgPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RdsPgPlugin {
		return vs[0].([]*RdsPgPlugin)[vs[1].(int)]
	}).(RdsPgPluginOutput)
}

type RdsPgPluginMapOutput struct{ *pulumi.OutputState }

func (RdsPgPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RdsPgPlugin)(nil)).Elem()
}

func (o RdsPgPluginMapOutput) ToRdsPgPluginMapOutput() RdsPgPluginMapOutput {
	return o
}

func (o RdsPgPluginMapOutput) ToRdsPgPluginMapOutputWithContext(ctx context.Context) RdsPgPluginMapOutput {
	return o
}

func (o RdsPgPluginMapOutput) MapIndex(k pulumi.StringInput) RdsPgPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RdsPgPlugin {
		return vs[0].(map[string]*RdsPgPlugin)[vs[1].(string)]
	}).(RdsPgPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginInput)(nil)).Elem(), &RdsPgPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginArrayInput)(nil)).Elem(), RdsPgPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsPgPluginMapInput)(nil)).Elem(), RdsPgPluginMap{})
	pulumi.RegisterOutputType(RdsPgPluginOutput{})
	pulumi.RegisterOutputType(RdsPgPluginArrayOutput{})
	pulumi.RegisterOutputType(RdsPgPluginMapOutput{})
}
