// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DliPackage struct {
	pulumi.CustomResourceState

	CreatedAt  pulumi.StringOutput    `pulumi:"createdAt"`
	GroupName  pulumi.StringPtrOutput `pulumi:"groupName"`
	IsAsync    pulumi.BoolOutput      `pulumi:"isAsync"`
	ObjectName pulumi.StringOutput    `pulumi:"objectName"`
	ObjectPath pulumi.StringOutput    `pulumi:"objectPath"`
	Owner      pulumi.StringOutput    `pulumi:"owner"`
	Region     pulumi.StringOutput    `pulumi:"region"`
	Status     pulumi.StringOutput    `pulumi:"status"`
	Tags       pulumi.StringMapOutput `pulumi:"tags"`
	Type       pulumi.StringOutput    `pulumi:"type"`
	UpdatedAt  pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewDliPackage registers a new resource with the given unique name, arguments, and options.
func NewDliPackage(ctx *pulumi.Context,
	name string, args *DliPackageArgs, opts ...pulumi.ResourceOption) (*DliPackage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectPath == nil {
		return nil, errors.New("invalid value for required argument 'ObjectPath'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DliPackage
	err := ctx.RegisterResource("sbercloud:index/dliPackage:DliPackage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDliPackage gets an existing DliPackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDliPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DliPackageState, opts ...pulumi.ResourceOption) (*DliPackage, error) {
	var resource DliPackage
	err := ctx.ReadResource("sbercloud:index/dliPackage:DliPackage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DliPackage resources.
type dliPackageState struct {
	CreatedAt  *string           `pulumi:"createdAt"`
	GroupName  *string           `pulumi:"groupName"`
	IsAsync    *bool             `pulumi:"isAsync"`
	ObjectName *string           `pulumi:"objectName"`
	ObjectPath *string           `pulumi:"objectPath"`
	Owner      *string           `pulumi:"owner"`
	Region     *string           `pulumi:"region"`
	Status     *string           `pulumi:"status"`
	Tags       map[string]string `pulumi:"tags"`
	Type       *string           `pulumi:"type"`
	UpdatedAt  *string           `pulumi:"updatedAt"`
}

type DliPackageState struct {
	CreatedAt  pulumi.StringPtrInput
	GroupName  pulumi.StringPtrInput
	IsAsync    pulumi.BoolPtrInput
	ObjectName pulumi.StringPtrInput
	ObjectPath pulumi.StringPtrInput
	Owner      pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	Type       pulumi.StringPtrInput
	UpdatedAt  pulumi.StringPtrInput
}

func (DliPackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*dliPackageState)(nil)).Elem()
}

type dliPackageArgs struct {
	GroupName  *string           `pulumi:"groupName"`
	IsAsync    *bool             `pulumi:"isAsync"`
	ObjectPath string            `pulumi:"objectPath"`
	Owner      *string           `pulumi:"owner"`
	Region     *string           `pulumi:"region"`
	Tags       map[string]string `pulumi:"tags"`
	Type       string            `pulumi:"type"`
}

// The set of arguments for constructing a DliPackage resource.
type DliPackageArgs struct {
	GroupName  pulumi.StringPtrInput
	IsAsync    pulumi.BoolPtrInput
	ObjectPath pulumi.StringInput
	Owner      pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	Type       pulumi.StringInput
}

func (DliPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dliPackageArgs)(nil)).Elem()
}

type DliPackageInput interface {
	pulumi.Input

	ToDliPackageOutput() DliPackageOutput
	ToDliPackageOutputWithContext(ctx context.Context) DliPackageOutput
}

func (*DliPackage) ElementType() reflect.Type {
	return reflect.TypeOf((**DliPackage)(nil)).Elem()
}

func (i *DliPackage) ToDliPackageOutput() DliPackageOutput {
	return i.ToDliPackageOutputWithContext(context.Background())
}

func (i *DliPackage) ToDliPackageOutputWithContext(ctx context.Context) DliPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliPackageOutput)
}

// DliPackageArrayInput is an input type that accepts DliPackageArray and DliPackageArrayOutput values.
// You can construct a concrete instance of `DliPackageArrayInput` via:
//
//	DliPackageArray{ DliPackageArgs{...} }
type DliPackageArrayInput interface {
	pulumi.Input

	ToDliPackageArrayOutput() DliPackageArrayOutput
	ToDliPackageArrayOutputWithContext(context.Context) DliPackageArrayOutput
}

type DliPackageArray []DliPackageInput

func (DliPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DliPackage)(nil)).Elem()
}

func (i DliPackageArray) ToDliPackageArrayOutput() DliPackageArrayOutput {
	return i.ToDliPackageArrayOutputWithContext(context.Background())
}

func (i DliPackageArray) ToDliPackageArrayOutputWithContext(ctx context.Context) DliPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliPackageArrayOutput)
}

// DliPackageMapInput is an input type that accepts DliPackageMap and DliPackageMapOutput values.
// You can construct a concrete instance of `DliPackageMapInput` via:
//
//	DliPackageMap{ "key": DliPackageArgs{...} }
type DliPackageMapInput interface {
	pulumi.Input

	ToDliPackageMapOutput() DliPackageMapOutput
	ToDliPackageMapOutputWithContext(context.Context) DliPackageMapOutput
}

type DliPackageMap map[string]DliPackageInput

func (DliPackageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DliPackage)(nil)).Elem()
}

func (i DliPackageMap) ToDliPackageMapOutput() DliPackageMapOutput {
	return i.ToDliPackageMapOutputWithContext(context.Background())
}

func (i DliPackageMap) ToDliPackageMapOutputWithContext(ctx context.Context) DliPackageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DliPackageMapOutput)
}

type DliPackageOutput struct{ *pulumi.OutputState }

func (DliPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DliPackage)(nil)).Elem()
}

func (o DliPackageOutput) ToDliPackageOutput() DliPackageOutput {
	return o
}

func (o DliPackageOutput) ToDliPackageOutputWithContext(ctx context.Context) DliPackageOutput {
	return o
}

func (o DliPackageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DliPackageOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringPtrOutput { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o DliPackageOutput) IsAsync() pulumi.BoolOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.BoolOutput { return v.IsAsync }).(pulumi.BoolOutput)
}

func (o DliPackageOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.ObjectName }).(pulumi.StringOutput)
}

func (o DliPackageOutput) ObjectPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.ObjectPath }).(pulumi.StringOutput)
}

func (o DliPackageOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o DliPackageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DliPackageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o DliPackageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DliPackageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o DliPackageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DliPackage) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type DliPackageArrayOutput struct{ *pulumi.OutputState }

func (DliPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DliPackage)(nil)).Elem()
}

func (o DliPackageArrayOutput) ToDliPackageArrayOutput() DliPackageArrayOutput {
	return o
}

func (o DliPackageArrayOutput) ToDliPackageArrayOutputWithContext(ctx context.Context) DliPackageArrayOutput {
	return o
}

func (o DliPackageArrayOutput) Index(i pulumi.IntInput) DliPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DliPackage {
		return vs[0].([]*DliPackage)[vs[1].(int)]
	}).(DliPackageOutput)
}

type DliPackageMapOutput struct{ *pulumi.OutputState }

func (DliPackageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DliPackage)(nil)).Elem()
}

func (o DliPackageMapOutput) ToDliPackageMapOutput() DliPackageMapOutput {
	return o
}

func (o DliPackageMapOutput) ToDliPackageMapOutputWithContext(ctx context.Context) DliPackageMapOutput {
	return o
}

func (o DliPackageMapOutput) MapIndex(k pulumi.StringInput) DliPackageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DliPackage {
		return vs[0].(map[string]*DliPackage)[vs[1].(string)]
	}).(DliPackageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DliPackageInput)(nil)).Elem(), &DliPackage{})
	pulumi.RegisterInputType(reflect.TypeOf((*DliPackageArrayInput)(nil)).Elem(), DliPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DliPackageMapInput)(nil)).Elem(), DliPackageMap{})
	pulumi.RegisterOutputType(DliPackageOutput{})
	pulumi.RegisterOutputType(DliPackageArrayOutput{})
	pulumi.RegisterOutputType(DliPackageMapOutput{})
}
