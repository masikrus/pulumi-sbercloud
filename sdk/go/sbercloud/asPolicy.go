// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-sbercloud/sdk/go/sbercloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AsPolicy struct {
	pulumi.CustomResourceState

	Action              pulumi.StringOutput               `pulumi:"action"`
	AlarmId             pulumi.StringPtrOutput            `pulumi:"alarmId"`
	CoolDownTime        pulumi.IntOutput                  `pulumi:"coolDownTime"`
	Region              pulumi.StringOutput               `pulumi:"region"`
	ScalingGroupId      pulumi.StringOutput               `pulumi:"scalingGroupId"`
	ScalingPolicyAction AsPolicyScalingPolicyActionOutput `pulumi:"scalingPolicyAction"`
	ScalingPolicyName   pulumi.StringOutput               `pulumi:"scalingPolicyName"`
	ScalingPolicyType   pulumi.StringOutput               `pulumi:"scalingPolicyType"`
	ScheduledPolicy     AsPolicyScheduledPolicyOutput     `pulumi:"scheduledPolicy"`
	Status              pulumi.StringOutput               `pulumi:"status"`
}

// NewAsPolicy registers a new resource with the given unique name, arguments, and options.
func NewAsPolicy(ctx *pulumi.Context,
	name string, args *AsPolicyArgs, opts ...pulumi.ResourceOption) (*AsPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	if args.ScalingPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyName'")
	}
	if args.ScalingPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AsPolicy
	err := ctx.RegisterResource("sbercloud:index/asPolicy:AsPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsPolicy gets an existing AsPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AsPolicyState, opts ...pulumi.ResourceOption) (*AsPolicy, error) {
	var resource AsPolicy
	err := ctx.ReadResource("sbercloud:index/asPolicy:AsPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AsPolicy resources.
type asPolicyState struct {
	Action              *string                      `pulumi:"action"`
	AlarmId             *string                      `pulumi:"alarmId"`
	CoolDownTime        *int                         `pulumi:"coolDownTime"`
	Region              *string                      `pulumi:"region"`
	ScalingGroupId      *string                      `pulumi:"scalingGroupId"`
	ScalingPolicyAction *AsPolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	ScalingPolicyName   *string                      `pulumi:"scalingPolicyName"`
	ScalingPolicyType   *string                      `pulumi:"scalingPolicyType"`
	ScheduledPolicy     *AsPolicyScheduledPolicy     `pulumi:"scheduledPolicy"`
	Status              *string                      `pulumi:"status"`
}

type AsPolicyState struct {
	Action              pulumi.StringPtrInput
	AlarmId             pulumi.StringPtrInput
	CoolDownTime        pulumi.IntPtrInput
	Region              pulumi.StringPtrInput
	ScalingGroupId      pulumi.StringPtrInput
	ScalingPolicyAction AsPolicyScalingPolicyActionPtrInput
	ScalingPolicyName   pulumi.StringPtrInput
	ScalingPolicyType   pulumi.StringPtrInput
	ScheduledPolicy     AsPolicyScheduledPolicyPtrInput
	Status              pulumi.StringPtrInput
}

func (AsPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*asPolicyState)(nil)).Elem()
}

type asPolicyArgs struct {
	Action              *string                      `pulumi:"action"`
	AlarmId             *string                      `pulumi:"alarmId"`
	CoolDownTime        *int                         `pulumi:"coolDownTime"`
	Region              *string                      `pulumi:"region"`
	ScalingGroupId      string                       `pulumi:"scalingGroupId"`
	ScalingPolicyAction *AsPolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	ScalingPolicyName   string                       `pulumi:"scalingPolicyName"`
	ScalingPolicyType   string                       `pulumi:"scalingPolicyType"`
	ScheduledPolicy     *AsPolicyScheduledPolicy     `pulumi:"scheduledPolicy"`
}

// The set of arguments for constructing a AsPolicy resource.
type AsPolicyArgs struct {
	Action              pulumi.StringPtrInput
	AlarmId             pulumi.StringPtrInput
	CoolDownTime        pulumi.IntPtrInput
	Region              pulumi.StringPtrInput
	ScalingGroupId      pulumi.StringInput
	ScalingPolicyAction AsPolicyScalingPolicyActionPtrInput
	ScalingPolicyName   pulumi.StringInput
	ScalingPolicyType   pulumi.StringInput
	ScheduledPolicy     AsPolicyScheduledPolicyPtrInput
}

func (AsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*asPolicyArgs)(nil)).Elem()
}

type AsPolicyInput interface {
	pulumi.Input

	ToAsPolicyOutput() AsPolicyOutput
	ToAsPolicyOutputWithContext(ctx context.Context) AsPolicyOutput
}

func (*AsPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AsPolicy)(nil)).Elem()
}

func (i *AsPolicy) ToAsPolicyOutput() AsPolicyOutput {
	return i.ToAsPolicyOutputWithContext(context.Background())
}

func (i *AsPolicy) ToAsPolicyOutputWithContext(ctx context.Context) AsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsPolicyOutput)
}

// AsPolicyArrayInput is an input type that accepts AsPolicyArray and AsPolicyArrayOutput values.
// You can construct a concrete instance of `AsPolicyArrayInput` via:
//
//	AsPolicyArray{ AsPolicyArgs{...} }
type AsPolicyArrayInput interface {
	pulumi.Input

	ToAsPolicyArrayOutput() AsPolicyArrayOutput
	ToAsPolicyArrayOutputWithContext(context.Context) AsPolicyArrayOutput
}

type AsPolicyArray []AsPolicyInput

func (AsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AsPolicy)(nil)).Elem()
}

func (i AsPolicyArray) ToAsPolicyArrayOutput() AsPolicyArrayOutput {
	return i.ToAsPolicyArrayOutputWithContext(context.Background())
}

func (i AsPolicyArray) ToAsPolicyArrayOutputWithContext(ctx context.Context) AsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsPolicyArrayOutput)
}

// AsPolicyMapInput is an input type that accepts AsPolicyMap and AsPolicyMapOutput values.
// You can construct a concrete instance of `AsPolicyMapInput` via:
//
//	AsPolicyMap{ "key": AsPolicyArgs{...} }
type AsPolicyMapInput interface {
	pulumi.Input

	ToAsPolicyMapOutput() AsPolicyMapOutput
	ToAsPolicyMapOutputWithContext(context.Context) AsPolicyMapOutput
}

type AsPolicyMap map[string]AsPolicyInput

func (AsPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AsPolicy)(nil)).Elem()
}

func (i AsPolicyMap) ToAsPolicyMapOutput() AsPolicyMapOutput {
	return i.ToAsPolicyMapOutputWithContext(context.Background())
}

func (i AsPolicyMap) ToAsPolicyMapOutputWithContext(ctx context.Context) AsPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsPolicyMapOutput)
}

type AsPolicyOutput struct{ *pulumi.OutputState }

func (AsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsPolicy)(nil)).Elem()
}

func (o AsPolicyOutput) ToAsPolicyOutput() AsPolicyOutput {
	return o
}

func (o AsPolicyOutput) ToAsPolicyOutputWithContext(ctx context.Context) AsPolicyOutput {
	return o
}

func (o AsPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o AsPolicyOutput) AlarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringPtrOutput { return v.AlarmId }).(pulumi.StringPtrOutput)
}

func (o AsPolicyOutput) CoolDownTime() pulumi.IntOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.IntOutput { return v.CoolDownTime }).(pulumi.IntOutput)
}

func (o AsPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AsPolicyOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

func (o AsPolicyOutput) ScalingPolicyAction() AsPolicyScalingPolicyActionOutput {
	return o.ApplyT(func(v *AsPolicy) AsPolicyScalingPolicyActionOutput { return v.ScalingPolicyAction }).(AsPolicyScalingPolicyActionOutput)
}

func (o AsPolicyOutput) ScalingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringOutput { return v.ScalingPolicyName }).(pulumi.StringOutput)
}

func (o AsPolicyOutput) ScalingPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringOutput { return v.ScalingPolicyType }).(pulumi.StringOutput)
}

func (o AsPolicyOutput) ScheduledPolicy() AsPolicyScheduledPolicyOutput {
	return o.ApplyT(func(v *AsPolicy) AsPolicyScheduledPolicyOutput { return v.ScheduledPolicy }).(AsPolicyScheduledPolicyOutput)
}

func (o AsPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AsPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AsPolicyArrayOutput struct{ *pulumi.OutputState }

func (AsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AsPolicy)(nil)).Elem()
}

func (o AsPolicyArrayOutput) ToAsPolicyArrayOutput() AsPolicyArrayOutput {
	return o
}

func (o AsPolicyArrayOutput) ToAsPolicyArrayOutputWithContext(ctx context.Context) AsPolicyArrayOutput {
	return o
}

func (o AsPolicyArrayOutput) Index(i pulumi.IntInput) AsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AsPolicy {
		return vs[0].([]*AsPolicy)[vs[1].(int)]
	}).(AsPolicyOutput)
}

type AsPolicyMapOutput struct{ *pulumi.OutputState }

func (AsPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AsPolicy)(nil)).Elem()
}

func (o AsPolicyMapOutput) ToAsPolicyMapOutput() AsPolicyMapOutput {
	return o
}

func (o AsPolicyMapOutput) ToAsPolicyMapOutputWithContext(ctx context.Context) AsPolicyMapOutput {
	return o
}

func (o AsPolicyMapOutput) MapIndex(k pulumi.StringInput) AsPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AsPolicy {
		return vs[0].(map[string]*AsPolicy)[vs[1].(string)]
	}).(AsPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AsPolicyInput)(nil)).Elem(), &AsPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsPolicyArrayInput)(nil)).Elem(), AsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsPolicyMapInput)(nil)).Elem(), AsPolicyMap{})
	pulumi.RegisterOutputType(AsPolicyOutput{})
	pulumi.RegisterOutputType(AsPolicyArrayOutput{})
	pulumi.RegisterOutputType(AsPolicyMapOutput{})
}
