// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnGatewayState, opts?: pulumi.CustomResourceOptions): VpnGateway {
        return new VpnGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpnGateway:VpnGateway';

    /**
     * Returns true if the given object is an instance of VpnGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnGateway.__pulumiType;
    }

    public readonly accessPrivateIp1!: pulumi.Output<string>;
    public readonly accessPrivateIp2!: pulumi.Output<string>;
    /**
     * The access subnet ID of the VPN gateway.
     */
    public readonly accessSubnetId!: pulumi.Output<string>;
    /**
     * The access VPC ID of the VPN gateway.
     */
    public readonly accessVpcId!: pulumi.Output<string>;
    /**
     * The ASN number of BGP
     */
    public readonly asn!: pulumi.Output<number | undefined>;
    /**
     * The attachment type.
     */
    public readonly attachmentType!: pulumi.Output<string | undefined>;
    /**
     * The availability zone IDs.
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    public readonly certificate!: pulumi.Output<outputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     */
    public readonly connectSubnet!: pulumi.Output<string>;
    /**
     * The create time.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    public readonly deleteEipOnTermination!: pulumi.Output<boolean | undefined>;
    public readonly eip1!: pulumi.Output<outputs.VpnGatewayEip1>;
    public readonly eip2!: pulumi.Output<outputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * The ER attachment ID.
     */
    public /*out*/ readonly erAttachmentId!: pulumi.Output<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     */
    public readonly erId!: pulumi.Output<string>;
    /**
     * The flavor of the VPN gateway.
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * The HA mode of the VPN gateway.
     */
    public readonly haMode!: pulumi.Output<string>;
    /**
     * The local subnets.
     */
    public readonly localSubnets!: pulumi.Output<string[]>;
    public readonly masterEip!: pulumi.Output<outputs.VpnGatewayMasterEip>;
    /**
     * The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network type of the VPN gateway.
     */
    public readonly networkType!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly slaveEip!: pulumi.Output<outputs.VpnGatewaySlaveEip>;
    /**
     * The status of VPN gateway.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The number of used connection groups.
     */
    public /*out*/ readonly usedConnectionGroup!: pulumi.Output<number>;
    /**
     * The number of used connections.
     */
    public /*out*/ readonly usedConnectionNumber!: pulumi.Output<number>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpnGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnGatewayArgs | VpnGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnGatewayState | undefined;
            resourceInputs["accessPrivateIp1"] = state ? state.accessPrivateIp1 : undefined;
            resourceInputs["accessPrivateIp2"] = state ? state.accessPrivateIp2 : undefined;
            resourceInputs["accessSubnetId"] = state ? state.accessSubnetId : undefined;
            resourceInputs["accessVpcId"] = state ? state.accessVpcId : undefined;
            resourceInputs["asn"] = state ? state.asn : undefined;
            resourceInputs["attachmentType"] = state ? state.attachmentType : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["connectSubnet"] = state ? state.connectSubnet : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deleteEipOnTermination"] = state ? state.deleteEipOnTermination : undefined;
            resourceInputs["eip1"] = state ? state.eip1 : undefined;
            resourceInputs["eip2"] = state ? state.eip2 : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["erAttachmentId"] = state ? state.erAttachmentId : undefined;
            resourceInputs["erId"] = state ? state.erId : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["haMode"] = state ? state.haMode : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["masterEip"] = state ? state.masterEip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["slaveEip"] = state ? state.slaveEip : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["usedConnectionGroup"] = state ? state.usedConnectionGroup : undefined;
            resourceInputs["usedConnectionNumber"] = state ? state.usedConnectionNumber : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpnGatewayArgs | undefined;
            if ((!args || args.availabilityZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            resourceInputs["accessPrivateIp1"] = args ? args.accessPrivateIp1 : undefined;
            resourceInputs["accessPrivateIp2"] = args ? args.accessPrivateIp2 : undefined;
            resourceInputs["accessSubnetId"] = args ? args.accessSubnetId : undefined;
            resourceInputs["accessVpcId"] = args ? args.accessVpcId : undefined;
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["attachmentType"] = args ? args.attachmentType : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["connectSubnet"] = args ? args.connectSubnet : undefined;
            resourceInputs["deleteEipOnTermination"] = args ? args.deleteEipOnTermination : undefined;
            resourceInputs["eip1"] = args ? args.eip1 : undefined;
            resourceInputs["eip2"] = args ? args.eip2 : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["erId"] = args ? args.erId : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["haMode"] = args ? args.haMode : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["masterEip"] = args ? args.masterEip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["slaveEip"] = args ? args.slaveEip : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["erAttachmentId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["usedConnectionGroup"] = undefined /*out*/;
            resourceInputs["usedConnectionNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnGateway resources.
 */
export interface VpnGatewayState {
    accessPrivateIp1?: pulumi.Input<string>;
    accessPrivateIp2?: pulumi.Input<string>;
    /**
     * The access subnet ID of the VPN gateway.
     */
    accessSubnetId?: pulumi.Input<string>;
    /**
     * The access VPC ID of the VPN gateway.
     */
    accessVpcId?: pulumi.Input<string>;
    /**
     * The ASN number of BGP
     */
    asn?: pulumi.Input<number>;
    /**
     * The attachment type.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The availability zone IDs.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    certificate?: pulumi.Input<inputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     */
    connectSubnet?: pulumi.Input<string>;
    /**
     * The create time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    eip1?: pulumi.Input<inputs.VpnGatewayEip1>;
    eip2?: pulumi.Input<inputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The ER attachment ID.
     */
    erAttachmentId?: pulumi.Input<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     */
    erId?: pulumi.Input<string>;
    /**
     * The flavor of the VPN gateway.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The HA mode of the VPN gateway.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The local subnets.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    masterEip?: pulumi.Input<inputs.VpnGatewayMasterEip>;
    /**
     * The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type of the VPN gateway.
     */
    networkType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    slaveEip?: pulumi.Input<inputs.VpnGatewaySlaveEip>;
    /**
     * The status of VPN gateway.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The number of used connection groups.
     */
    usedConnectionGroup?: pulumi.Input<number>;
    /**
     * The number of used connections.
     */
    usedConnectionNumber?: pulumi.Input<number>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnGateway resource.
 */
export interface VpnGatewayArgs {
    accessPrivateIp1?: pulumi.Input<string>;
    accessPrivateIp2?: pulumi.Input<string>;
    /**
     * The access subnet ID of the VPN gateway.
     */
    accessSubnetId?: pulumi.Input<string>;
    /**
     * The access VPC ID of the VPN gateway.
     */
    accessVpcId?: pulumi.Input<string>;
    /**
     * The ASN number of BGP
     */
    asn?: pulumi.Input<number>;
    /**
     * The attachment type.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The availability zone IDs.
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    certificate?: pulumi.Input<inputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     */
    connectSubnet?: pulumi.Input<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    eip1?: pulumi.Input<inputs.VpnGatewayEip1>;
    eip2?: pulumi.Input<inputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     */
    erId?: pulumi.Input<string>;
    /**
     * The flavor of the VPN gateway.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The HA mode of the VPN gateway.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The local subnets.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    masterEip?: pulumi.Input<inputs.VpnGatewayMasterEip>;
    /**
     * The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type of the VPN gateway.
     */
    networkType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    slaveEip?: pulumi.Input<inputs.VpnGatewaySlaveEip>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     */
    vpcId?: pulumi.Input<string>;
}
