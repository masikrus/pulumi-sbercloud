// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdsInstance extends pulumi.CustomResource {
    /**
     * Get an existing DdsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdsInstanceState, opts?: pulumi.CustomResourceOptions): DdsInstance {
        return new DdsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/ddsInstance:DdsInstance';

    /**
     * Returns true if the given object is an instance of DdsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdsInstance.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly backupStrategy!: pulumi.Output<outputs.DdsInstanceBackupStrategy>;
    public readonly balancerActiveBegin!: pulumi.Output<string | undefined>;
    public readonly balancerActiveEnd!: pulumi.Output<string | undefined>;
    public readonly balancerStatus!: pulumi.Output<string>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly configurations!: pulumi.Output<outputs.DdsInstanceConfiguration[] | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly datastore!: pulumi.Output<outputs.DdsInstanceDatastore>;
    public /*out*/ readonly dbUsername!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskEncryptionId!: pulumi.Output<string | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly flavors!: pulumi.Output<outputs.DdsInstanceFlavor[]>;
    public /*out*/ readonly groups!: pulumi.Output<outputs.DdsInstanceGroup[]>;
    public readonly mode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * This field is deprecated.
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.DdsInstanceNode[]>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly ssl!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly timeZone!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a DdsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdsInstanceArgs | DdsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdsInstanceState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupStrategy"] = state ? state.backupStrategy : undefined;
            resourceInputs["balancerActiveBegin"] = state ? state.balancerActiveBegin : undefined;
            resourceInputs["balancerActiveEnd"] = state ? state.balancerActiveEnd : undefined;
            resourceInputs["balancerStatus"] = state ? state.balancerStatus : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["datastore"] = state ? state.datastore : undefined;
            resourceInputs["dbUsername"] = state ? state.dbUsername : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskEncryptionId"] = state ? state.diskEncryptionId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["flavors"] = state ? state.flavors : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DdsInstanceArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.datastore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            if ((!args || args.flavors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavors'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupStrategy"] = args ? args.backupStrategy : undefined;
            resourceInputs["balancerActiveBegin"] = args ? args.balancerActiveBegin : undefined;
            resourceInputs["balancerActiveEnd"] = args ? args.balancerActiveEnd : undefined;
            resourceInputs["balancerStatus"] = args ? args.balancerStatus : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["datastore"] = args ? args.datastore : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskEncryptionId"] = args ? args.diskEncryptionId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["flavors"] = args ? args.flavors : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dbUsername"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DdsInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DdsInstance resources.
 */
export interface DdsInstanceState {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    backupStrategy?: pulumi.Input<inputs.DdsInstanceBackupStrategy>;
    balancerActiveBegin?: pulumi.Input<string>;
    balancerActiveEnd?: pulumi.Input<string>;
    balancerStatus?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.DdsInstanceConfiguration>[]>;
    createdAt?: pulumi.Input<string>;
    datastore?: pulumi.Input<inputs.DdsInstanceDatastore>;
    dbUsername?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskEncryptionId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    flavors?: pulumi.Input<pulumi.Input<inputs.DdsInstanceFlavor>[]>;
    groups?: pulumi.Input<pulumi.Input<inputs.DdsInstanceGroup>[]>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * This field is deprecated.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.DdsInstanceNode>[]>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    ssl?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeZone?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdsInstance resource.
 */
export interface DdsInstanceArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    backupStrategy?: pulumi.Input<inputs.DdsInstanceBackupStrategy>;
    balancerActiveBegin?: pulumi.Input<string>;
    balancerActiveEnd?: pulumi.Input<string>;
    balancerStatus?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.DdsInstanceConfiguration>[]>;
    datastore: pulumi.Input<inputs.DdsInstanceDatastore>;
    description?: pulumi.Input<string>;
    diskEncryptionId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    flavors: pulumi.Input<pulumi.Input<inputs.DdsInstanceFlavor>[]>;
    mode: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    ssl?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}
