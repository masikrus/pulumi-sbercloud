// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AsGroup extends pulumi.CustomResource {
    /**
     * Get an existing AsGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AsGroupState, opts?: pulumi.CustomResourceOptions): AsGroup {
        return new AsGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/asGroup:AsGroup';

    /**
     * Returns true if the given object is an instance of AsGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AsGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AsGroup.__pulumiType;
    }

    public readonly agencyName!: pulumi.Output<string>;
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * schema: Deprecated; use availabilityZones instead
     */
    public readonly availableZones!: pulumi.Output<string[] | undefined>;
    /**
     * The cooling duration, in seconds.
     */
    public readonly coolDownTime!: pulumi.Output<number | undefined>;
    public /*out*/ readonly currentInstanceNumber!: pulumi.Output<number>;
    /**
     * Whether to delete instances when they are removed from the AS group.
     */
    public readonly deleteInstances!: pulumi.Output<string | undefined>;
    public readonly deletePublicip!: pulumi.Output<boolean | undefined>;
    public readonly deleteVolume!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public readonly desireInstanceNumber!: pulumi.Output<number>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    /**
     * The health check grace period for instances, in seconds.
     */
    public readonly healthPeriodicAuditGracePeriod!: pulumi.Output<number>;
    public readonly healthPeriodicAuditMethod!: pulumi.Output<string | undefined>;
    /**
     * The health check period for instances, in minutes.
     */
    public readonly healthPeriodicAuditTime!: pulumi.Output<number | undefined>;
    public readonly instanceTerminatePolicy!: pulumi.Output<string | undefined>;
    /**
     * The instances id list in the as group.
     */
    public /*out*/ readonly instances!: pulumi.Output<string[]>;
    /**
     * The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
     *
     * @deprecated use lbaasListeners instead
     */
    public readonly lbListenerId!: pulumi.Output<string | undefined>;
    public readonly lbaasListeners!: pulumi.Output<outputs.AsGroupLbaasListener[]>;
    public readonly maxInstanceNumber!: pulumi.Output<number | undefined>;
    public readonly minInstanceNumber!: pulumi.Output<number | undefined>;
    public readonly multiAzScalingPolicy!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.AsGroupNetwork[]>;
    /**
     * schema: Deprecated; The notification mode has been canceled
     */
    public readonly notifications!: pulumi.Output<string[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    /**
     * schema: Required
     */
    public readonly scalingConfigurationId!: pulumi.Output<string>;
    public readonly scalingGroupName!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<outputs.AsGroupSecurityGroup[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a AsGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AsGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AsGroupArgs | AsGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AsGroupState | undefined;
            resourceInputs["agencyName"] = state ? state.agencyName : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["availableZones"] = state ? state.availableZones : undefined;
            resourceInputs["coolDownTime"] = state ? state.coolDownTime : undefined;
            resourceInputs["currentInstanceNumber"] = state ? state.currentInstanceNumber : undefined;
            resourceInputs["deleteInstances"] = state ? state.deleteInstances : undefined;
            resourceInputs["deletePublicip"] = state ? state.deletePublicip : undefined;
            resourceInputs["deleteVolume"] = state ? state.deleteVolume : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desireInstanceNumber"] = state ? state.desireInstanceNumber : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["healthPeriodicAuditGracePeriod"] = state ? state.healthPeriodicAuditGracePeriod : undefined;
            resourceInputs["healthPeriodicAuditMethod"] = state ? state.healthPeriodicAuditMethod : undefined;
            resourceInputs["healthPeriodicAuditTime"] = state ? state.healthPeriodicAuditTime : undefined;
            resourceInputs["instanceTerminatePolicy"] = state ? state.instanceTerminatePolicy : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["lbListenerId"] = state ? state.lbListenerId : undefined;
            resourceInputs["lbaasListeners"] = state ? state.lbaasListeners : undefined;
            resourceInputs["maxInstanceNumber"] = state ? state.maxInstanceNumber : undefined;
            resourceInputs["minInstanceNumber"] = state ? state.minInstanceNumber : undefined;
            resourceInputs["multiAzScalingPolicy"] = state ? state.multiAzScalingPolicy : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scalingConfigurationId"] = state ? state.scalingConfigurationId : undefined;
            resourceInputs["scalingGroupName"] = state ? state.scalingGroupName : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as AsGroupArgs | undefined;
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.scalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupName'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["agencyName"] = args ? args.agencyName : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["availableZones"] = args ? args.availableZones : undefined;
            resourceInputs["coolDownTime"] = args ? args.coolDownTime : undefined;
            resourceInputs["deleteInstances"] = args ? args.deleteInstances : undefined;
            resourceInputs["deletePublicip"] = args ? args.deletePublicip : undefined;
            resourceInputs["deleteVolume"] = args ? args.deleteVolume : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desireInstanceNumber"] = args ? args.desireInstanceNumber : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["healthPeriodicAuditGracePeriod"] = args ? args.healthPeriodicAuditGracePeriod : undefined;
            resourceInputs["healthPeriodicAuditMethod"] = args ? args.healthPeriodicAuditMethod : undefined;
            resourceInputs["healthPeriodicAuditTime"] = args ? args.healthPeriodicAuditTime : undefined;
            resourceInputs["instanceTerminatePolicy"] = args ? args.instanceTerminatePolicy : undefined;
            resourceInputs["lbListenerId"] = args ? args.lbListenerId : undefined;
            resourceInputs["lbaasListeners"] = args ? args.lbaasListeners : undefined;
            resourceInputs["maxInstanceNumber"] = args ? args.maxInstanceNumber : undefined;
            resourceInputs["minInstanceNumber"] = args ? args.minInstanceNumber : undefined;
            resourceInputs["multiAzScalingPolicy"] = args ? args.multiAzScalingPolicy : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scalingConfigurationId"] = args ? args.scalingConfigurationId : undefined;
            resourceInputs["scalingGroupName"] = args ? args.scalingGroupName : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["currentInstanceNumber"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AsGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AsGroup resources.
 */
export interface AsGroupState {
    agencyName?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; use availabilityZones instead
     */
    availableZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cooling duration, in seconds.
     */
    coolDownTime?: pulumi.Input<number>;
    currentInstanceNumber?: pulumi.Input<number>;
    /**
     * Whether to delete instances when they are removed from the AS group.
     */
    deleteInstances?: pulumi.Input<string>;
    deletePublicip?: pulumi.Input<boolean>;
    deleteVolume?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    desireInstanceNumber?: pulumi.Input<number>;
    enable?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The health check grace period for instances, in seconds.
     */
    healthPeriodicAuditGracePeriod?: pulumi.Input<number>;
    healthPeriodicAuditMethod?: pulumi.Input<string>;
    /**
     * The health check period for instances, in minutes.
     */
    healthPeriodicAuditTime?: pulumi.Input<number>;
    instanceTerminatePolicy?: pulumi.Input<string>;
    /**
     * The instances id list in the as group.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
     *
     * @deprecated use lbaasListeners instead
     */
    lbListenerId?: pulumi.Input<string>;
    lbaasListeners?: pulumi.Input<pulumi.Input<inputs.AsGroupLbaasListener>[]>;
    maxInstanceNumber?: pulumi.Input<number>;
    minInstanceNumber?: pulumi.Input<number>;
    multiAzScalingPolicy?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.AsGroupNetwork>[]>;
    /**
     * schema: Deprecated; The notification mode has been canceled
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    scalingConfigurationId?: pulumi.Input<string>;
    scalingGroupName?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.AsGroupSecurityGroup>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AsGroup resource.
 */
export interface AsGroupArgs {
    agencyName?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; use availabilityZones instead
     */
    availableZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cooling duration, in seconds.
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * Whether to delete instances when they are removed from the AS group.
     */
    deleteInstances?: pulumi.Input<string>;
    deletePublicip?: pulumi.Input<boolean>;
    deleteVolume?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    desireInstanceNumber?: pulumi.Input<number>;
    enable?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The health check grace period for instances, in seconds.
     */
    healthPeriodicAuditGracePeriod?: pulumi.Input<number>;
    healthPeriodicAuditMethod?: pulumi.Input<string>;
    /**
     * The health check period for instances, in minutes.
     */
    healthPeriodicAuditTime?: pulumi.Input<number>;
    instanceTerminatePolicy?: pulumi.Input<string>;
    /**
     * The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
     *
     * @deprecated use lbaasListeners instead
     */
    lbListenerId?: pulumi.Input<string>;
    lbaasListeners?: pulumi.Input<pulumi.Input<inputs.AsGroupLbaasListener>[]>;
    maxInstanceNumber?: pulumi.Input<number>;
    minInstanceNumber?: pulumi.Input<number>;
    multiAzScalingPolicy?: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.AsGroupNetwork>[]>;
    /**
     * schema: Deprecated; The notification mode has been canceled
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    scalingConfigurationId?: pulumi.Input<string>;
    scalingGroupName: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.AsGroupSecurityGroup>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}
