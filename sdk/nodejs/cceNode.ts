// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CceNode extends pulumi.CustomResource {
    /**
     * Get an existing CceNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CceNodeState, opts?: pulumi.CustomResourceOptions): CceNode {
        return new CceNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cceNode:CceNode';

    /**
     * Returns true if the given object is an instance of CceNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CceNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CceNode.__pulumiType;
    }

    /**
     * schema: Internal
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly bandwidthChargeMode!: pulumi.Output<string | undefined>;
    public readonly bandwidthSize!: pulumi.Output<number | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    public readonly billingMode!: pulumi.Output<number>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly dataVolumes!: pulumi.Output<outputs.CceNodeDataVolume[]>;
    public readonly dedicatedHostId!: pulumi.Output<string | undefined>;
    public readonly ecsGroupId!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly ecsPerformanceType!: pulumi.Output<string | undefined>;
    public readonly eipId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use eipId instead
     */
    public readonly eipIds!: pulumi.Output<string[] | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    public readonly extendParam!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    public readonly extendParamChargingMode!: pulumi.Output<number | undefined>;
    public readonly extendParams!: pulumi.Output<outputs.CceNodeExtendParams | undefined>;
    public readonly extensionNics!: pulumi.Output<outputs.CceNodeExtensionNic[] | undefined>;
    public readonly fixedIp!: pulumi.Output<string | undefined>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly hostnameConfig!: pulumi.Output<outputs.CceNodeHostnameConfig>;
    public readonly initializedConditions!: pulumi.Output<string[]>;
    public readonly iptype!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly keepEcs!: pulumi.Output<boolean | undefined>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly maxPods!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    public readonly orderId!: pulumi.Output<string | undefined>;
    public readonly os!: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly postinstall!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly preinstall!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly productId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly rootVolume!: pulumi.Output<outputs.CceNodeRootVolume>;
    public readonly runtime!: pulumi.Output<string>;
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    public readonly sharetype!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<outputs.CceNodeStorage | undefined>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taints!: pulumi.Output<outputs.CceNodeTaint[] | undefined>;

    /**
     * Create a CceNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CceNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CceNodeArgs | CceNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CceNodeState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bandwidthChargeMode"] = state ? state.bandwidthChargeMode : undefined;
            resourceInputs["bandwidthSize"] = state ? state.bandwidthSize : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["dedicatedHostId"] = state ? state.dedicatedHostId : undefined;
            resourceInputs["ecsGroupId"] = state ? state.ecsGroupId : undefined;
            resourceInputs["ecsPerformanceType"] = state ? state.ecsPerformanceType : undefined;
            resourceInputs["eipId"] = state ? state.eipId : undefined;
            resourceInputs["eipIds"] = state ? state.eipIds : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = state ? state.extendParam : undefined;
            resourceInputs["extendParamChargingMode"] = state ? state.extendParamChargingMode : undefined;
            resourceInputs["extendParams"] = state ? state.extendParams : undefined;
            resourceInputs["extensionNics"] = state ? state.extensionNics : undefined;
            resourceInputs["fixedIp"] = state ? state.fixedIp : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hostnameConfig"] = state ? state.hostnameConfig : undefined;
            resourceInputs["initializedConditions"] = state ? state.initializedConditions : undefined;
            resourceInputs["iptype"] = state ? state.iptype : undefined;
            resourceInputs["keepEcs"] = state ? state.keepEcs : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orderId"] = state ? state.orderId : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["postinstall"] = state ? state.postinstall : undefined;
            resourceInputs["preinstall"] = state ? state.preinstall : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolume"] = state ? state.rootVolume : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["sharetype"] = state ? state.sharetype : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as CceNodeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.rootVolume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolume'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bandwidthChargeMode"] = args ? args.bandwidthChargeMode : undefined;
            resourceInputs["bandwidthSize"] = args ? args.bandwidthSize : undefined;
            resourceInputs["billingMode"] = args ? args.billingMode : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataVolumes"] = args ? args.dataVolumes : undefined;
            resourceInputs["dedicatedHostId"] = args ? args.dedicatedHostId : undefined;
            resourceInputs["ecsGroupId"] = args ? args.ecsGroupId : undefined;
            resourceInputs["ecsPerformanceType"] = args ? args.ecsPerformanceType : undefined;
            resourceInputs["eipId"] = args ? args.eipId : undefined;
            resourceInputs["eipIds"] = args ? args.eipIds : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = args ? args.extendParam : undefined;
            resourceInputs["extendParamChargingMode"] = args ? args.extendParamChargingMode : undefined;
            resourceInputs["extendParams"] = args ? args.extendParams : undefined;
            resourceInputs["extensionNics"] = args ? args.extensionNics : undefined;
            resourceInputs["fixedIp"] = args ? args.fixedIp : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["hostnameConfig"] = args ? args.hostnameConfig : undefined;
            resourceInputs["initializedConditions"] = args ? args.initializedConditions : undefined;
            resourceInputs["iptype"] = args ? args.iptype : undefined;
            resourceInputs["keepEcs"] = args ? args.keepEcs : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orderId"] = args ? args.orderId : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["postinstall"] = args ? args.postinstall : undefined;
            resourceInputs["preinstall"] = args ? args.preinstall : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rootVolume"] = args ? args.rootVolume : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["sharetype"] = args ? args.sharetype : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CceNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CceNode resources.
 */
export interface CceNodeState {
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    bandwidthChargeMode?: pulumi.Input<string>;
    bandwidthSize?: pulumi.Input<number>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.CceNodeDataVolume>[]>;
    dedicatedHostId?: pulumi.Input<string>;
    ecsGroupId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    ecsPerformanceType?: pulumi.Input<string>;
    eipId?: pulumi.Input<string>;
    /**
     * @deprecated use eipId instead
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated use chargingMode instead
     */
    extendParamChargingMode?: pulumi.Input<number>;
    extendParams?: pulumi.Input<inputs.CceNodeExtendParams>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.CceNodeExtensionNic>[]>;
    fixedIp?: pulumi.Input<string>;
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.CceNodeHostnameConfig>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    iptype?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    keepEcs?: pulumi.Input<boolean>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * schema: Deprecated
     */
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    orderId?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    partition?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    preinstall?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    productId?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rootVolume?: pulumi.Input<inputs.CceNodeRootVolume>;
    runtime?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    sharetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.CceNodeStorage>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CceNodeTaint>[]>;
}

/**
 * The set of arguments for constructing a CceNode resource.
 */
export interface CceNodeArgs {
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    bandwidthChargeMode?: pulumi.Input<string>;
    bandwidthSize?: pulumi.Input<number>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.CceNodeDataVolume>[]>;
    dedicatedHostId?: pulumi.Input<string>;
    ecsGroupId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    ecsPerformanceType?: pulumi.Input<string>;
    eipId?: pulumi.Input<string>;
    /**
     * @deprecated use eipId instead
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated use chargingMode instead
     */
    extendParamChargingMode?: pulumi.Input<number>;
    extendParams?: pulumi.Input<inputs.CceNodeExtendParams>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.CceNodeExtensionNic>[]>;
    fixedIp?: pulumi.Input<string>;
    flavorId: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.CceNodeHostnameConfig>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    iptype?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    keepEcs?: pulumi.Input<boolean>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * schema: Deprecated
     */
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    orderId?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    partition?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    preinstall?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    productId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rootVolume: pulumi.Input<inputs.CceNodeRootVolume>;
    runtime?: pulumi.Input<string>;
    sharetype?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.CceNodeStorage>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CceNodeTaint>[]>;
}
