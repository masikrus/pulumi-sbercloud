// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DliSparkJob extends pulumi.CustomResource {
    /**
     * Get an existing DliSparkJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DliSparkJobState, opts?: pulumi.CustomResourceOptions): DliSparkJob {
        return new DliSparkJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dliSparkJob:DliSparkJob';

    /**
     * Returns true if the given object is an instance of DliSparkJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DliSparkJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DliSparkJob.__pulumiType;
    }

    public readonly appName!: pulumi.Output<string>;
    public readonly appParameters!: pulumi.Output<string[] | undefined>;
    public readonly configurations!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dependentPackages!: pulumi.Output<outputs.DliSparkJobDependentPackage[] | undefined>;
    public readonly driverCores!: pulumi.Output<number | undefined>;
    public readonly driverMemory!: pulumi.Output<string | undefined>;
    public readonly executorCores!: pulumi.Output<number | undefined>;
    public readonly executorMemory!: pulumi.Output<string | undefined>;
    public readonly executors!: pulumi.Output<number | undefined>;
    public readonly feature!: pulumi.Output<string | undefined>;
    public readonly files!: pulumi.Output<string[] | undefined>;
    public readonly jars!: pulumi.Output<string[] | undefined>;
    public readonly mainClass!: pulumi.Output<string | undefined>;
    public readonly maxRetries!: pulumi.Output<number | undefined>;
    public readonly modules!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly pythonFiles!: pulumi.Output<string[] | undefined>;
    public readonly queueName!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly sparkVersion!: pulumi.Output<string | undefined>;
    public readonly specification!: pulumi.Output<string | undefined>;

    /**
     * Create a DliSparkJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DliSparkJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DliSparkJobArgs | DliSparkJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DliSparkJobState | undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["appParameters"] = state ? state.appParameters : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dependentPackages"] = state ? state.dependentPackages : undefined;
            resourceInputs["driverCores"] = state ? state.driverCores : undefined;
            resourceInputs["driverMemory"] = state ? state.driverMemory : undefined;
            resourceInputs["executorCores"] = state ? state.executorCores : undefined;
            resourceInputs["executorMemory"] = state ? state.executorMemory : undefined;
            resourceInputs["executors"] = state ? state.executors : undefined;
            resourceInputs["feature"] = state ? state.feature : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["jars"] = state ? state.jars : undefined;
            resourceInputs["mainClass"] = state ? state.mainClass : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["modules"] = state ? state.modules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["pythonFiles"] = state ? state.pythonFiles : undefined;
            resourceInputs["queueName"] = state ? state.queueName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sparkVersion"] = state ? state.sparkVersion : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
        } else {
            const args = argsOrState as DliSparkJobArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.queueName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueName'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["appParameters"] = args ? args.appParameters : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["dependentPackages"] = args ? args.dependentPackages : undefined;
            resourceInputs["driverCores"] = args ? args.driverCores : undefined;
            resourceInputs["driverMemory"] = args ? args.driverMemory : undefined;
            resourceInputs["executorCores"] = args ? args.executorCores : undefined;
            resourceInputs["executorMemory"] = args ? args.executorMemory : undefined;
            resourceInputs["executors"] = args ? args.executors : undefined;
            resourceInputs["feature"] = args ? args.feature : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["jars"] = args ? args.jars : undefined;
            resourceInputs["mainClass"] = args ? args.mainClass : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["modules"] = args ? args.modules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pythonFiles"] = args ? args.pythonFiles : undefined;
            resourceInputs["queueName"] = args ? args.queueName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sparkVersion"] = args ? args.sparkVersion : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DliSparkJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DliSparkJob resources.
 */
export interface DliSparkJobState {
    appName?: pulumi.Input<string>;
    appParameters?: pulumi.Input<pulumi.Input<string>[]>;
    configurations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    createdAt?: pulumi.Input<string>;
    dependentPackages?: pulumi.Input<pulumi.Input<inputs.DliSparkJobDependentPackage>[]>;
    driverCores?: pulumi.Input<number>;
    driverMemory?: pulumi.Input<string>;
    executorCores?: pulumi.Input<number>;
    executorMemory?: pulumi.Input<string>;
    executors?: pulumi.Input<number>;
    feature?: pulumi.Input<string>;
    files?: pulumi.Input<pulumi.Input<string>[]>;
    jars?: pulumi.Input<pulumi.Input<string>[]>;
    mainClass?: pulumi.Input<string>;
    maxRetries?: pulumi.Input<number>;
    modules?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    pythonFiles?: pulumi.Input<pulumi.Input<string>[]>;
    queueName?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sparkVersion?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DliSparkJob resource.
 */
export interface DliSparkJobArgs {
    appName: pulumi.Input<string>;
    appParameters?: pulumi.Input<pulumi.Input<string>[]>;
    configurations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dependentPackages?: pulumi.Input<pulumi.Input<inputs.DliSparkJobDependentPackage>[]>;
    driverCores?: pulumi.Input<number>;
    driverMemory?: pulumi.Input<string>;
    executorCores?: pulumi.Input<number>;
    executorMemory?: pulumi.Input<string>;
    executors?: pulumi.Input<number>;
    feature?: pulumi.Input<string>;
    files?: pulumi.Input<pulumi.Input<string>[]>;
    jars?: pulumi.Input<pulumi.Input<string>[]>;
    mainClass?: pulumi.Input<string>;
    maxRetries?: pulumi.Input<number>;
    modules?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    pythonFiles?: pulumi.Input<pulumi.Input<string>[]>;
    queueName: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sparkVersion?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
}
