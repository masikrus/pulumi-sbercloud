// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SfsTurbo extends pulumi.CustomResource {
    /**
     * Get an existing SfsTurbo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SfsTurboState, opts?: pulumi.CustomResourceOptions): SfsTurbo {
        return new SfsTurbo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/sfsTurbo:SfsTurbo';

    /**
     * Returns true if the given object is an instance of SfsTurbo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SfsTurbo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SfsTurbo.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly availableCapacity!: pulumi.Output<string>;
    public readonly backupId!: pulumi.Output<string>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly cryptKeyId!: pulumi.Output<string | undefined>;
    public readonly dedicatedFlavor!: pulumi.Output<string | undefined>;
    public readonly dedicatedStorageId!: pulumi.Output<string | undefined>;
    public readonly enhanced!: pulumi.Output<boolean>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly exportLocation!: pulumi.Output<string>;
    public readonly hpcBandwidth!: pulumi.Output<string>;
    public readonly hpcCacheBandwidth!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly shareProto!: pulumi.Output<string | undefined>;
    public readonly shareType!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a SfsTurbo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SfsTurboArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SfsTurboArgs | SfsTurboState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SfsTurboState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["availableCapacity"] = state ? state.availableCapacity : undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["cryptKeyId"] = state ? state.cryptKeyId : undefined;
            resourceInputs["dedicatedFlavor"] = state ? state.dedicatedFlavor : undefined;
            resourceInputs["dedicatedStorageId"] = state ? state.dedicatedStorageId : undefined;
            resourceInputs["enhanced"] = state ? state.enhanced : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["exportLocation"] = state ? state.exportLocation : undefined;
            resourceInputs["hpcBandwidth"] = state ? state.hpcBandwidth : undefined;
            resourceInputs["hpcCacheBandwidth"] = state ? state.hpcCacheBandwidth : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["shareProto"] = state ? state.shareProto : undefined;
            resourceInputs["shareType"] = state ? state.shareType : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as SfsTurboArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["cryptKeyId"] = args ? args.cryptKeyId : undefined;
            resourceInputs["dedicatedFlavor"] = args ? args.dedicatedFlavor : undefined;
            resourceInputs["dedicatedStorageId"] = args ? args.dedicatedStorageId : undefined;
            resourceInputs["enhanced"] = args ? args.enhanced : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["hpcBandwidth"] = args ? args.hpcBandwidth : undefined;
            resourceInputs["hpcCacheBandwidth"] = args ? args.hpcCacheBandwidth : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["shareProto"] = args ? args.shareProto : undefined;
            resourceInputs["shareType"] = args ? args.shareType : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["availableCapacity"] = undefined /*out*/;
            resourceInputs["exportLocation"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SfsTurbo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SfsTurbo resources.
 */
export interface SfsTurboState {
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    availableCapacity?: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    cryptKeyId?: pulumi.Input<string>;
    dedicatedFlavor?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    enhanced?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    exportLocation?: pulumi.Input<string>;
    hpcBandwidth?: pulumi.Input<string>;
    hpcCacheBandwidth?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SfsTurbo resource.
 */
export interface SfsTurboArgs {
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    cryptKeyId?: pulumi.Input<string>;
    dedicatedFlavor?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    enhanced?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    hpcBandwidth?: pulumi.Input<string>;
    hpcCacheBandwidth?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}
