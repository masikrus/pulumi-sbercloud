// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NatGateway extends pulumi.CustomResource {
    /**
     * Get an existing NatGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatGatewayState, opts?: pulumi.CustomResourceOptions): NatGateway {
        return new NatGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/natGateway:NatGateway';

    /**
     * Returns true if the given object is an instance of NatGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatGateway.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * The order information of the NAT gateway.
     */
    public /*out*/ readonly billingInfo!: pulumi.Output<string>;
    /**
     * The bandwidth that the NAT gateway can receive or send per second.
     */
    public /*out*/ readonly bpsMax!: pulumi.Output<number>;
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * The creation time of the NAT gateway.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the NAT gateway.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of DNAT rules on the NAT gateway.
     */
    public /*out*/ readonly dnatRulesLimit!: pulumi.Output<number>;
    /**
     * The enterprise project ID of the NAT gateway.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * The NAT gateway name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IP address used for the NG port of the NAT gateway.
     */
    public readonly ngportIpAddress!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * The number of packets that the NAT gateway can receive or send per second.
     */
    public /*out*/ readonly ppsMax!: pulumi.Output<number>;
    /**
     * The region where the NAT gateway is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The session configuration of the NAT gateway.
     */
    public readonly sessionConf!: pulumi.Output<outputs.NatGatewaySessionConf>;
    /**
     * The maximum number of SNAT rules on the NAT gateway.
     */
    public /*out*/ readonly snatRulePublicIpLimit!: pulumi.Output<number>;
    /**
     * The specification of the NAT gateway.
     */
    public readonly spec!: pulumi.Output<string>;
    /**
     * The current status of the NAT gateway.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the VPC to which the NAT gateway belongs.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a NatGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatGatewayArgs | NatGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatGatewayState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["billingInfo"] = state ? state.billingInfo : undefined;
            resourceInputs["bpsMax"] = state ? state.bpsMax : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnatRulesLimit"] = state ? state.dnatRulesLimit : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ngportIpAddress"] = state ? state.ngportIpAddress : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["ppsMax"] = state ? state.ppsMax : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sessionConf"] = state ? state.sessionConf : undefined;
            resourceInputs["snatRulePublicIpLimit"] = state ? state.snatRulePublicIpLimit : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as NatGatewayArgs | undefined;
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ngportIpAddress"] = args ? args.ngportIpAddress : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sessionConf"] = args ? args.sessionConf : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["billingInfo"] = undefined /*out*/;
            resourceInputs["bpsMax"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnatRulesLimit"] = undefined /*out*/;
            resourceInputs["ppsMax"] = undefined /*out*/;
            resourceInputs["snatRulePublicIpLimit"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatGateway resources.
 */
export interface NatGatewayState {
    autoRenew?: pulumi.Input<string>;
    /**
     * The order information of the NAT gateway.
     */
    billingInfo?: pulumi.Input<string>;
    /**
     * The bandwidth that the NAT gateway can receive or send per second.
     */
    bpsMax?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The creation time of the NAT gateway.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the NAT gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum number of DNAT rules on the NAT gateway.
     */
    dnatRulesLimit?: pulumi.Input<number>;
    /**
     * The enterprise project ID of the NAT gateway.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The NAT gateway name.
     */
    name?: pulumi.Input<string>;
    /**
     * The IP address used for the NG port of the NAT gateway.
     */
    ngportIpAddress?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The number of packets that the NAT gateway can receive or send per second.
     */
    ppsMax?: pulumi.Input<number>;
    /**
     * The region where the NAT gateway is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The session configuration of the NAT gateway.
     */
    sessionConf?: pulumi.Input<inputs.NatGatewaySessionConf>;
    /**
     * The maximum number of SNAT rules on the NAT gateway.
     */
    snatRulePublicIpLimit?: pulumi.Input<number>;
    /**
     * The specification of the NAT gateway.
     */
    spec?: pulumi.Input<string>;
    /**
     * The current status of the NAT gateway.
     */
    status?: pulumi.Input<string>;
    /**
     * The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the NAT gateway belongs.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatGateway resource.
 */
export interface NatGatewayArgs {
    autoRenew?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The description of the NAT gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the NAT gateway.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The NAT gateway name.
     */
    name?: pulumi.Input<string>;
    /**
     * The IP address used for the NG port of the NAT gateway.
     */
    ngportIpAddress?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The region where the NAT gateway is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The session configuration of the NAT gateway.
     */
    sessionConf?: pulumi.Input<inputs.NatGatewaySessionConf>;
    /**
     * The specification of the NAT gateway.
     */
    spec: pulumi.Input<string>;
    /**
     * The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the NAT gateway belongs.
     */
    vpcId: pulumi.Input<string>;
}
