// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CbrVault extends pulumi.CustomResource {
    /**
     * Get an existing CbrVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CbrVaultState, opts?: pulumi.CustomResourceOptions): CbrVault {
        return new CbrVault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cbrVault:CbrVault';

    /**
     * Returns true if the given object is an instance of CbrVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CbrVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CbrVault.__pulumiType;
    }

    /**
     * The allocated capacity, in GB.
     */
    public /*out*/ readonly allocated!: pulumi.Output<number>;
    /**
     * Whether automatic association is supported.
     */
    public readonly autoBind!: pulumi.Output<boolean>;
    /**
     * Whether to enable auto capacity expansion for the vault.
     */
    public readonly autoExpand!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * The backup name prefix.
     */
    public readonly backupNamePrefix!: pulumi.Output<string>;
    /**
     * The rules for automatic association.
     */
    public readonly bindRules!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * The cloud type of the vault.
     */
    public readonly cloudType!: pulumi.Output<string>;
    /**
     * The consistent level (specification) of the vault.
     */
    public readonly consistentLevel!: pulumi.Output<string | undefined>;
    /**
     * The enterprise project ID to which the vault belongs.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Whether multiple availability zones are used for backing up.
     */
    public readonly isMultiAz!: pulumi.Output<boolean>;
    /**
     * The name of the vault.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * The policy details to associate with the CBR vault.
     */
    public readonly policies!: pulumi.Output<outputs.CbrVaultPolicy[]>;
    /**
     * schema:Deprecated; Using parameter 'policy' instead.
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * The protection type of the vault.
     */
    public readonly protectionType!: pulumi.Output<string>;
    /**
     * The region where the vault is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The array of one or more resources to attach to the CBR vault.
     */
    public readonly resources!: pulumi.Output<outputs.CbrVaultResource[]>;
    /**
     * The capacity of the vault, in GB.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The specification code.
     */
    public /*out*/ readonly specCode!: pulumi.Output<string>;
    /**
     * The vault status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The name of the bucket for the vault.
     */
    public /*out*/ readonly storage!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the vault.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The used capacity, in GB.
     */
    public /*out*/ readonly used!: pulumi.Output<number>;

    /**
     * Create a CbrVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CbrVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CbrVaultArgs | CbrVaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CbrVaultState | undefined;
            resourceInputs["allocated"] = state ? state.allocated : undefined;
            resourceInputs["autoBind"] = state ? state.autoBind : undefined;
            resourceInputs["autoExpand"] = state ? state.autoExpand : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["backupNamePrefix"] = state ? state.backupNamePrefix : undefined;
            resourceInputs["bindRules"] = state ? state.bindRules : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["consistentLevel"] = state ? state.consistentLevel : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["isMultiAz"] = state ? state.isMultiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["protectionType"] = state ? state.protectionType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["specCode"] = state ? state.specCode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["used"] = state ? state.used : undefined;
        } else {
            const args = argsOrState as CbrVaultArgs | undefined;
            if ((!args || args.protectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionType'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autoBind"] = args ? args.autoBind : undefined;
            resourceInputs["autoExpand"] = args ? args.autoExpand : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["backupNamePrefix"] = args ? args.backupNamePrefix : undefined;
            resourceInputs["bindRules"] = args ? args.bindRules : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["consistentLevel"] = args ? args.consistentLevel : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["isMultiAz"] = args ? args.isMultiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["protectionType"] = args ? args.protectionType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["allocated"] = undefined /*out*/;
            resourceInputs["specCode"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["used"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CbrVault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CbrVault resources.
 */
export interface CbrVaultState {
    /**
     * The allocated capacity, in GB.
     */
    allocated?: pulumi.Input<number>;
    /**
     * Whether automatic association is supported.
     */
    autoBind?: pulumi.Input<boolean>;
    /**
     * Whether to enable auto capacity expansion for the vault.
     */
    autoExpand?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * The backup name prefix.
     */
    backupNamePrefix?: pulumi.Input<string>;
    /**
     * The rules for automatic association.
     */
    bindRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The cloud type of the vault.
     */
    cloudType?: pulumi.Input<string>;
    /**
     * The consistent level (specification) of the vault.
     */
    consistentLevel?: pulumi.Input<string>;
    /**
     * The enterprise project ID to which the vault belongs.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Whether multiple availability zones are used for backing up.
     */
    isMultiAz?: pulumi.Input<boolean>;
    /**
     * The name of the vault.
     */
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy details to associate with the CBR vault.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.CbrVaultPolicy>[]>;
    /**
     * schema:Deprecated; Using parameter 'policy' instead.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protection type of the vault.
     */
    protectionType?: pulumi.Input<string>;
    /**
     * The region where the vault is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The array of one or more resources to attach to the CBR vault.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.CbrVaultResource>[]>;
    /**
     * The capacity of the vault, in GB.
     */
    size?: pulumi.Input<number>;
    /**
     * The specification code.
     */
    specCode?: pulumi.Input<string>;
    /**
     * The vault status.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the bucket for the vault.
     */
    storage?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the vault.
     */
    type?: pulumi.Input<string>;
    /**
     * The used capacity, in GB.
     */
    used?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CbrVault resource.
 */
export interface CbrVaultArgs {
    /**
     * Whether automatic association is supported.
     */
    autoBind?: pulumi.Input<boolean>;
    /**
     * Whether to enable auto capacity expansion for the vault.
     */
    autoExpand?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * The backup name prefix.
     */
    backupNamePrefix?: pulumi.Input<string>;
    /**
     * The rules for automatic association.
     */
    bindRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The cloud type of the vault.
     */
    cloudType?: pulumi.Input<string>;
    /**
     * The consistent level (specification) of the vault.
     */
    consistentLevel?: pulumi.Input<string>;
    /**
     * The enterprise project ID to which the vault belongs.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Whether multiple availability zones are used for backing up.
     */
    isMultiAz?: pulumi.Input<boolean>;
    /**
     * The name of the vault.
     */
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy details to associate with the CBR vault.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.CbrVaultPolicy>[]>;
    /**
     * schema:Deprecated; Using parameter 'policy' instead.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protection type of the vault.
     */
    protectionType: pulumi.Input<string>;
    /**
     * The region where the vault is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The array of one or more resources to attach to the CBR vault.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.CbrVaultResource>[]>;
    /**
     * The capacity of the vault, in GB.
     */
    size: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the vault.
     */
    type: pulumi.Input<string>;
}
