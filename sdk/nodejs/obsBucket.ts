// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObsBucket extends pulumi.CustomResource {
    /**
     * Get an existing ObsBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObsBucketState, opts?: pulumi.CustomResourceOptions): ObsBucket {
        return new ObsBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/obsBucket:ObsBucket';

    /**
     * Returns true if the given object is an instance of ObsBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObsBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObsBucket.__pulumiType;
    }

    public readonly acl!: pulumi.Output<string | undefined>;
    public readonly bucket!: pulumi.Output<string>;
    public /*out*/ readonly bucketDomainName!: pulumi.Output<string>;
    public /*out*/ readonly bucketVersion!: pulumi.Output<string>;
    public readonly corsRules!: pulumi.Output<outputs.ObsBucketCorsRule[] | undefined>;
    public readonly encryption!: pulumi.Output<boolean | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly kmsKeyProjectId!: pulumi.Output<string>;
    public readonly lifecycleRules!: pulumi.Output<outputs.ObsBucketLifecycleRule[] | undefined>;
    public readonly loggings!: pulumi.Output<outputs.ObsBucketLogging[] | undefined>;
    public readonly multiAz!: pulumi.Output<boolean>;
    public readonly parallelFs!: pulumi.Output<boolean | undefined>;
    public readonly policy!: pulumi.Output<string>;
    public readonly policyFormat!: pulumi.Output<string | undefined>;
    public readonly quota!: pulumi.Output<number | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly sseAlgorithm!: pulumi.Output<string>;
    public readonly storageClass!: pulumi.Output<string | undefined>;
    public /*out*/ readonly storageInfos!: pulumi.Output<outputs.ObsBucketStorageInfo[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly userDomainNames!: pulumi.Output<string[]>;
    public readonly versioning!: pulumi.Output<boolean | undefined>;
    public readonly website!: pulumi.Output<outputs.ObsBucketWebsite | undefined>;

    /**
     * Create a ObsBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObsBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObsBucketArgs | ObsBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObsBucketState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketVersion"] = state ? state.bucketVersion : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["kmsKeyProjectId"] = state ? state.kmsKeyProjectId : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["loggings"] = state ? state.loggings : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["parallelFs"] = state ? state.parallelFs : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["policyFormat"] = state ? state.policyFormat : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sseAlgorithm"] = state ? state.sseAlgorithm : undefined;
            resourceInputs["storageClass"] = state ? state.storageClass : undefined;
            resourceInputs["storageInfos"] = state ? state.storageInfos : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userDomainNames"] = state ? state.userDomainNames : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as ObsBucketArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["kmsKeyProjectId"] = args ? args.kmsKeyProjectId : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["loggings"] = args ? args.loggings : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["parallelFs"] = args ? args.parallelFs : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["policyFormat"] = args ? args.policyFormat : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sseAlgorithm"] = args ? args.sseAlgorithm : undefined;
            resourceInputs["storageClass"] = args ? args.storageClass : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userDomainNames"] = args ? args.userDomainNames : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketVersion"] = undefined /*out*/;
            resourceInputs["storageInfos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObsBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObsBucket resources.
 */
export interface ObsBucketState {
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketDomainName?: pulumi.Input<string>;
    bucketVersion?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.ObsBucketCorsRule>[]>;
    encryption?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyProjectId?: pulumi.Input<string>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.ObsBucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.ObsBucketLogging>[]>;
    multiAz?: pulumi.Input<boolean>;
    parallelFs?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    policyFormat?: pulumi.Input<string>;
    quota?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    sseAlgorithm?: pulumi.Input<string>;
    storageClass?: pulumi.Input<string>;
    storageInfos?: pulumi.Input<pulumi.Input<inputs.ObsBucketStorageInfo>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    versioning?: pulumi.Input<boolean>;
    website?: pulumi.Input<inputs.ObsBucketWebsite>;
}

/**
 * The set of arguments for constructing a ObsBucket resource.
 */
export interface ObsBucketArgs {
    acl?: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.ObsBucketCorsRule>[]>;
    encryption?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyProjectId?: pulumi.Input<string>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.ObsBucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.ObsBucketLogging>[]>;
    multiAz?: pulumi.Input<boolean>;
    parallelFs?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    policyFormat?: pulumi.Input<string>;
    quota?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    sseAlgorithm?: pulumi.Input<string>;
    storageClass?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    versioning?: pulumi.Input<boolean>;
    website?: pulumi.Input<inputs.ObsBucketWebsite>;
}
