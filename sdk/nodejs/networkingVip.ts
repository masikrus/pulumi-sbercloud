// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkingVip extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingVip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingVipState, opts?: pulumi.CustomResourceOptions): NetworkingVip {
        return new NetworkingVip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/networkingVip:NetworkingVip';

    /**
     * Returns true if the given object is an instance of NetworkingVip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingVip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingVip.__pulumiType;
    }

    public /*out*/ readonly deviceOwner!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly ipVersion!: pulumi.Output<number>;
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * @deprecated use ipVersion instead
     */
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a NetworkingVip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingVipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingVipArgs | NetworkingVipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingVipState | undefined;
            resourceInputs["deviceOwner"] = state ? state.deviceOwner : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as NetworkingVipArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["deviceOwner"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingVip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkingVip resources.
 */
export interface NetworkingVipState {
    deviceOwner?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    /**
     * @deprecated use ipVersion instead
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkingVip resource.
 */
export interface NetworkingVipArgs {
    ipAddress?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * @deprecated use ipVersion instead
     */
    subnetId?: pulumi.Input<string>;
}
