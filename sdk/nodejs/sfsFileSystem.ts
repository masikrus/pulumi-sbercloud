// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SfsFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing SfsFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SfsFileSystemState, opts?: pulumi.CustomResourceOptions): SfsFileSystem {
        return new SfsFileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/sfsFileSystem:SfsFileSystem';

    /**
     * Returns true if the given object is an instance of SfsFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SfsFileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SfsFileSystem.__pulumiType;
    }

    public readonly accessLevel!: pulumi.Output<string>;
    public /*out*/ readonly accessRuleStatus!: pulumi.Output<string>;
    public /*out*/ readonly accessRules!: pulumi.Output<outputs.SfsFileSystemAccessRule[]>;
    public readonly accessTo!: pulumi.Output<string | undefined>;
    public readonly accessType!: pulumi.Output<string>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly exportLocation!: pulumi.Output<string>;
    public readonly isPublic!: pulumi.Output<boolean | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly shareAccessId!: pulumi.Output<string>;
    public readonly shareProto!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a SfsFileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SfsFileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SfsFileSystemArgs | SfsFileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SfsFileSystemState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["accessRuleStatus"] = state ? state.accessRuleStatus : undefined;
            resourceInputs["accessRules"] = state ? state.accessRules : undefined;
            resourceInputs["accessTo"] = state ? state.accessTo : undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["exportLocation"] = state ? state.exportLocation : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["shareAccessId"] = state ? state.shareAccessId : undefined;
            resourceInputs["shareProto"] = state ? state.shareProto : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SfsFileSystemArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["accessTo"] = args ? args.accessTo : undefined;
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["shareProto"] = args ? args.shareProto : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accessRuleStatus"] = undefined /*out*/;
            resourceInputs["accessRules"] = undefined /*out*/;
            resourceInputs["exportLocation"] = undefined /*out*/;
            resourceInputs["shareAccessId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SfsFileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SfsFileSystem resources.
 */
export interface SfsFileSystemState {
    accessLevel?: pulumi.Input<string>;
    accessRuleStatus?: pulumi.Input<string>;
    accessRules?: pulumi.Input<pulumi.Input<inputs.SfsFileSystemAccessRule>[]>;
    accessTo?: pulumi.Input<string>;
    accessType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    exportLocation?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareAccessId?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SfsFileSystem resource.
 */
export interface SfsFileSystemArgs {
    accessLevel?: pulumi.Input<string>;
    accessTo?: pulumi.Input<string>;
    accessType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
