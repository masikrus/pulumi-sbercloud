// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NatSnatRule extends pulumi.CustomResource {
    /**
     * Get an existing NatSnatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatSnatRuleState, opts?: pulumi.CustomResourceOptions): NatSnatRule {
        return new NatSnatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/natSnatRule:NatSnatRule';

    /**
     * Returns true if the given object is an instance of NatSnatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatSnatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatSnatRule.__pulumiType;
    }

    /**
     * The CIDR block connected by SNAT rule (DC side).
     */
    public readonly cidr!: pulumi.Output<string | undefined>;
    /**
     * The creation time of the SNAT rule.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the SNAT rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The floating IP addresses (separated by commas) connected by SNAT rule.
     */
    public /*out*/ readonly floatingIpAddress!: pulumi.Output<string>;
    /**
     * The IDs of floating IPs connected by SNAT rule.
     */
    public readonly floatingIpId!: pulumi.Output<string>;
    /**
     * The frozen EIP associated with the SNAT rule.
     */
    public /*out*/ readonly freezedIpAddress!: pulumi.Output<string>;
    /**
     * The global EIP addresses (separated by commas) connected by SNAT rule.
     */
    public /*out*/ readonly globalEipAddress!: pulumi.Output<string>;
    /**
     * The IDs (separated by commas) of global EIPs connected by SNAT rule.
     */
    public readonly globalEipId!: pulumi.Output<string>;
    /**
     * schema: Required; The ID of the gateway to which the SNAT rule belongs.
     */
    public readonly natGatewayId!: pulumi.Output<string>;
    /**
     * @deprecated schema: Deprecated; Use 'subnet_id' instead.
     */
    public readonly networkId!: pulumi.Output<string | undefined>;
    /**
     * The region where the SNAT rule is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The resource type of the SNAT rule.
     */
    public readonly sourceType!: pulumi.Output<number | undefined>;
    /**
     * The status of the SNAT rule.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The network IDs of subnet connected by SNAT rule (VPC side).
     */
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a NatSnatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatSnatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatSnatRuleArgs | NatSnatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatSnatRuleState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["floatingIpAddress"] = state ? state.floatingIpAddress : undefined;
            resourceInputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            resourceInputs["freezedIpAddress"] = state ? state.freezedIpAddress : undefined;
            resourceInputs["globalEipAddress"] = state ? state.globalEipAddress : undefined;
            resourceInputs["globalEipId"] = state ? state.globalEipId : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as NatSnatRuleArgs | undefined;
            if ((!args || args.natGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            resourceInputs["globalEipId"] = args ? args.globalEipId : undefined;
            resourceInputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["floatingIpAddress"] = undefined /*out*/;
            resourceInputs["freezedIpAddress"] = undefined /*out*/;
            resourceInputs["globalEipAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatSnatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatSnatRule resources.
 */
export interface NatSnatRuleState {
    /**
     * The CIDR block connected by SNAT rule (DC side).
     */
    cidr?: pulumi.Input<string>;
    /**
     * The creation time of the SNAT rule.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the SNAT rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The floating IP addresses (separated by commas) connected by SNAT rule.
     */
    floatingIpAddress?: pulumi.Input<string>;
    /**
     * The IDs of floating IPs connected by SNAT rule.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * The frozen EIP associated with the SNAT rule.
     */
    freezedIpAddress?: pulumi.Input<string>;
    /**
     * The global EIP addresses (separated by commas) connected by SNAT rule.
     */
    globalEipAddress?: pulumi.Input<string>;
    /**
     * The IDs (separated by commas) of global EIPs connected by SNAT rule.
     */
    globalEipId?: pulumi.Input<string>;
    /**
     * schema: Required; The ID of the gateway to which the SNAT rule belongs.
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * @deprecated schema: Deprecated; Use 'subnet_id' instead.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The region where the SNAT rule is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The resource type of the SNAT rule.
     */
    sourceType?: pulumi.Input<number>;
    /**
     * The status of the SNAT rule.
     */
    status?: pulumi.Input<string>;
    /**
     * The network IDs of subnet connected by SNAT rule (VPC side).
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatSnatRule resource.
 */
export interface NatSnatRuleArgs {
    /**
     * The CIDR block connected by SNAT rule (DC side).
     */
    cidr?: pulumi.Input<string>;
    /**
     * The description of the SNAT rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The IDs of floating IPs connected by SNAT rule.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * The IDs (separated by commas) of global EIPs connected by SNAT rule.
     */
    globalEipId?: pulumi.Input<string>;
    /**
     * schema: Required; The ID of the gateway to which the SNAT rule belongs.
     */
    natGatewayId: pulumi.Input<string>;
    /**
     * @deprecated schema: Deprecated; Use 'subnet_id' instead.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The region where the SNAT rule is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The resource type of the SNAT rule.
     */
    sourceType?: pulumi.Input<number>;
    /**
     * The network IDs of subnet connected by SNAT rule (VPC side).
     */
    subnetId?: pulumi.Input<string>;
}
