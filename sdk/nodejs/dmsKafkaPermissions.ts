// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DmsKafkaPermissions extends pulumi.CustomResource {
    /**
     * Get an existing DmsKafkaPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsKafkaPermissionsState, opts?: pulumi.CustomResourceOptions): DmsKafkaPermissions {
        return new DmsKafkaPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsKafkaPermissions:DmsKafkaPermissions';

    /**
     * Returns true if the given object is an instance of DmsKafkaPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsKafkaPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsKafkaPermissions.__pulumiType;
    }

    public readonly instanceId!: pulumi.Output<string>;
    public readonly policies!: pulumi.Output<outputs.DmsKafkaPermissionsPolicy[]>;
    public readonly region!: pulumi.Output<string>;
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a DmsKafkaPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsKafkaPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsKafkaPermissionsArgs | DmsKafkaPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsKafkaPermissionsState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as DmsKafkaPermissionsArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsKafkaPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsKafkaPermissions resources.
 */
export interface DmsKafkaPermissionsState {
    instanceId?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.DmsKafkaPermissionsPolicy>[]>;
    region?: pulumi.Input<string>;
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsKafkaPermissions resource.
 */
export interface DmsKafkaPermissionsArgs {
    instanceId: pulumi.Input<string>;
    policies: pulumi.Input<pulumi.Input<inputs.DmsKafkaPermissionsPolicy>[]>;
    region?: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}
