// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DmsKafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing DmsKafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsKafkaTopicState, opts?: pulumi.CustomResourceOptions): DmsKafkaTopic {
        return new DmsKafkaTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsKafkaTopic:DmsKafkaTopic';

    /**
     * Returns true if the given object is an instance of DmsKafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsKafkaTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsKafkaTopic.__pulumiType;
    }

    public readonly agingTime!: pulumi.Output<number>;
    public readonly configs!: pulumi.Output<outputs.DmsKafkaTopicConfig[]>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly newPartitionBrokers!: pulumi.Output<number[] | undefined>;
    public readonly partitions!: pulumi.Output<number>;
    public /*out*/ readonly policiesOnly!: pulumi.Output<boolean>;
    public readonly region!: pulumi.Output<string>;
    public readonly replicas!: pulumi.Output<number>;
    public readonly syncFlushing!: pulumi.Output<boolean>;
    public readonly syncReplication!: pulumi.Output<boolean>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DmsKafkaTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsKafkaTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsKafkaTopicArgs | DmsKafkaTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsKafkaTopicState | undefined;
            resourceInputs["agingTime"] = state ? state.agingTime : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newPartitionBrokers"] = state ? state.newPartitionBrokers : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["policiesOnly"] = state ? state.policiesOnly : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["syncFlushing"] = state ? state.syncFlushing : undefined;
            resourceInputs["syncReplication"] = state ? state.syncReplication : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DmsKafkaTopicArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.partitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitions'");
            }
            resourceInputs["agingTime"] = args ? args.agingTime : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newPartitionBrokers"] = args ? args.newPartitionBrokers : undefined;
            resourceInputs["partitions"] = args ? args.partitions : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["syncFlushing"] = args ? args.syncFlushing : undefined;
            resourceInputs["syncReplication"] = args ? args.syncReplication : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["policiesOnly"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsKafkaTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsKafkaTopic resources.
 */
export interface DmsKafkaTopicState {
    agingTime?: pulumi.Input<number>;
    configs?: pulumi.Input<pulumi.Input<inputs.DmsKafkaTopicConfig>[]>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    newPartitionBrokers?: pulumi.Input<pulumi.Input<number>[]>;
    partitions?: pulumi.Input<number>;
    policiesOnly?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    syncFlushing?: pulumi.Input<boolean>;
    syncReplication?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsKafkaTopic resource.
 */
export interface DmsKafkaTopicArgs {
    agingTime?: pulumi.Input<number>;
    configs?: pulumi.Input<pulumi.Input<inputs.DmsKafkaTopicConfig>[]>;
    description?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    newPartitionBrokers?: pulumi.Input<pulumi.Input<number>[]>;
    partitions: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    syncFlushing?: pulumi.Input<boolean>;
    syncReplication?: pulumi.Input<boolean>;
}
