// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CtsNotification extends pulumi.CustomResource {
    /**
     * Get an existing CtsNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CtsNotificationState, opts?: pulumi.CustomResourceOptions): CtsNotification {
        return new CtsNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/ctsNotification:CtsNotification';

    /**
     * Returns true if the given object is an instance of CtsNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CtsNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CtsNotification.__pulumiType;
    }

    public readonly agencyName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly filter!: pulumi.Output<outputs.CtsNotificationFilter | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly notificationId!: pulumi.Output<string>;
    public readonly operationType!: pulumi.Output<string>;
    public readonly operationUsers!: pulumi.Output<outputs.CtsNotificationOperationUser[] | undefined>;
    public readonly operations!: pulumi.Output<outputs.CtsNotificationOperation[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly smnTopic!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a CtsNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CtsNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CtsNotificationArgs | CtsNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CtsNotificationState | undefined;
            resourceInputs["agencyName"] = state ? state.agencyName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationId"] = state ? state.notificationId : undefined;
            resourceInputs["operationType"] = state ? state.operationType : undefined;
            resourceInputs["operationUsers"] = state ? state.operationUsers : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["smnTopic"] = state ? state.smnTopic : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as CtsNotificationArgs | undefined;
            if ((!args || args.operationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operationType'");
            }
            resourceInputs["agencyName"] = args ? args.agencyName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operationType"] = args ? args.operationType : undefined;
            resourceInputs["operationUsers"] = args ? args.operationUsers : undefined;
            resourceInputs["operations"] = args ? args.operations : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["smnTopic"] = args ? args.smnTopic : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["notificationId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CtsNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CtsNotification resources.
 */
export interface CtsNotificationState {
    agencyName?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.CtsNotificationFilter>;
    name?: pulumi.Input<string>;
    notificationId?: pulumi.Input<string>;
    operationType?: pulumi.Input<string>;
    operationUsers?: pulumi.Input<pulumi.Input<inputs.CtsNotificationOperationUser>[]>;
    operations?: pulumi.Input<pulumi.Input<inputs.CtsNotificationOperation>[]>;
    region?: pulumi.Input<string>;
    smnTopic?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CtsNotification resource.
 */
export interface CtsNotificationArgs {
    agencyName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.CtsNotificationFilter>;
    name?: pulumi.Input<string>;
    operationType: pulumi.Input<string>;
    operationUsers?: pulumi.Input<pulumi.Input<inputs.CtsNotificationOperationUser>[]>;
    operations?: pulumi.Input<pulumi.Input<inputs.CtsNotificationOperation>[]>;
    region?: pulumi.Input<string>;
    smnTopic?: pulumi.Input<string>;
}
