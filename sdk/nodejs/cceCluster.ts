// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CceCluster extends pulumi.CustomResource {
    /**
     * Get an existing CceCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CceClusterState, opts?: pulumi.CustomResourceOptions): CceCluster {
        return new CceCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cceCluster:CceCluster';

    /**
     * Returns true if the given object is an instance of CceCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CceCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CceCluster.__pulumiType;
    }

    public readonly alias!: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly authenticatingProxyCa!: pulumi.Output<string | undefined>;
    public readonly authenticatingProxyCert!: pulumi.Output<string | undefined>;
    public readonly authenticatingProxyPrivateKey!: pulumi.Output<string | undefined>;
    public readonly authenticationMode!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    public readonly billingMode!: pulumi.Output<number>;
    public /*out*/ readonly category!: pulumi.Output<string>;
    public /*out*/ readonly certificateClusters!: pulumi.Output<outputs.CceClusterCertificateCluster[]>;
    public /*out*/ readonly certificateUsers!: pulumi.Output<outputs.CceClusterCertificateUser[]>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string | undefined>;
    public readonly clusterVersion!: pulumi.Output<string>;
    public readonly componentConfigurations!: pulumi.Output<outputs.CceClusterComponentConfiguration[] | undefined>;
    public readonly containerNetworkCidr!: pulumi.Output<string>;
    public readonly containerNetworkType!: pulumi.Output<string>;
    public readonly customSans!: pulumi.Output<string[]>;
    public readonly deleteAll!: pulumi.Output<string | undefined>;
    public readonly deleteEfs!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly deleteEni!: pulumi.Output<string | undefined>;
    public readonly deleteEvs!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly deleteNet!: pulumi.Output<string | undefined>;
    public readonly deleteObs!: pulumi.Output<string | undefined>;
    public readonly deleteSfs!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly eip!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly enableDistributeManagement!: pulumi.Output<boolean | undefined>;
    /**
     * schema: Computed
     */
    public readonly eniSubnetCidr!: pulumi.Output<string>;
    /**
     * the IPv4 subnet ID of the subnet where the ENI resides
     */
    public readonly eniSubnetId!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    public readonly extendParam!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly extendParams!: pulumi.Output<outputs.CceClusterExtendParam[] | undefined>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly hibernate!: pulumi.Output<boolean | undefined>;
    /**
     * schema: Internal
     */
    public readonly highwaySubnetId!: pulumi.Output<string>;
    public readonly ipv6Enable!: pulumi.Output<boolean>;
    public /*out*/ readonly kubeConfigRaw!: pulumi.Output<string>;
    public readonly kubeProxyMode!: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly ltsReclaimPolicy!: pulumi.Output<string | undefined>;
    public readonly masters!: pulumi.Output<outputs.CceClusterMaster[]>;
    public readonly multiAz!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly serviceNetworkCidr!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly supportIstio!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a CceCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CceClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CceClusterArgs | CceClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CceClusterState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["authenticatingProxyCa"] = state ? state.authenticatingProxyCa : undefined;
            resourceInputs["authenticatingProxyCert"] = state ? state.authenticatingProxyCert : undefined;
            resourceInputs["authenticatingProxyPrivateKey"] = state ? state.authenticatingProxyPrivateKey : undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["certificateClusters"] = state ? state.certificateClusters : undefined;
            resourceInputs["certificateUsers"] = state ? state.certificateUsers : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["componentConfigurations"] = state ? state.componentConfigurations : undefined;
            resourceInputs["containerNetworkCidr"] = state ? state.containerNetworkCidr : undefined;
            resourceInputs["containerNetworkType"] = state ? state.containerNetworkType : undefined;
            resourceInputs["customSans"] = state ? state.customSans : undefined;
            resourceInputs["deleteAll"] = state ? state.deleteAll : undefined;
            resourceInputs["deleteEfs"] = state ? state.deleteEfs : undefined;
            resourceInputs["deleteEni"] = state ? state.deleteEni : undefined;
            resourceInputs["deleteEvs"] = state ? state.deleteEvs : undefined;
            resourceInputs["deleteNet"] = state ? state.deleteNet : undefined;
            resourceInputs["deleteObs"] = state ? state.deleteObs : undefined;
            resourceInputs["deleteSfs"] = state ? state.deleteSfs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eip"] = state ? state.eip : undefined;
            resourceInputs["enableDistributeManagement"] = state ? state.enableDistributeManagement : undefined;
            resourceInputs["eniSubnetCidr"] = state ? state.eniSubnetCidr : undefined;
            resourceInputs["eniSubnetId"] = state ? state.eniSubnetId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = state ? state.extendParam : undefined;
            resourceInputs["extendParams"] = state ? state.extendParams : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hibernate"] = state ? state.hibernate : undefined;
            resourceInputs["highwaySubnetId"] = state ? state.highwaySubnetId : undefined;
            resourceInputs["ipv6Enable"] = state ? state.ipv6Enable : undefined;
            resourceInputs["kubeConfigRaw"] = state ? state.kubeConfigRaw : undefined;
            resourceInputs["kubeProxyMode"] = state ? state.kubeProxyMode : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["ltsReclaimPolicy"] = state ? state.ltsReclaimPolicy : undefined;
            resourceInputs["masters"] = state ? state.masters : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["serviceNetworkCidr"] = state ? state.serviceNetworkCidr : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["supportIstio"] = state ? state.supportIstio : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as CceClusterArgs | undefined;
            if ((!args || args.containerNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerNetworkType'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["authenticatingProxyCa"] = args ? args.authenticatingProxyCa : undefined;
            resourceInputs["authenticatingProxyCert"] = args ? args.authenticatingProxyCert : undefined;
            resourceInputs["authenticatingProxyPrivateKey"] = args ? args.authenticatingProxyPrivateKey : undefined;
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["billingMode"] = args ? args.billingMode : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["componentConfigurations"] = args ? args.componentConfigurations : undefined;
            resourceInputs["containerNetworkCidr"] = args ? args.containerNetworkCidr : undefined;
            resourceInputs["containerNetworkType"] = args ? args.containerNetworkType : undefined;
            resourceInputs["customSans"] = args ? args.customSans : undefined;
            resourceInputs["deleteAll"] = args ? args.deleteAll : undefined;
            resourceInputs["deleteEfs"] = args ? args.deleteEfs : undefined;
            resourceInputs["deleteEni"] = args ? args.deleteEni : undefined;
            resourceInputs["deleteEvs"] = args ? args.deleteEvs : undefined;
            resourceInputs["deleteNet"] = args ? args.deleteNet : undefined;
            resourceInputs["deleteObs"] = args ? args.deleteObs : undefined;
            resourceInputs["deleteSfs"] = args ? args.deleteSfs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eip"] = args ? args.eip : undefined;
            resourceInputs["enableDistributeManagement"] = args ? args.enableDistributeManagement : undefined;
            resourceInputs["eniSubnetCidr"] = args ? args.eniSubnetCidr : undefined;
            resourceInputs["eniSubnetId"] = args ? args.eniSubnetId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = args ? args.extendParam : undefined;
            resourceInputs["extendParams"] = args ? args.extendParams : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["hibernate"] = args ? args.hibernate : undefined;
            resourceInputs["highwaySubnetId"] = args ? args.highwaySubnetId : undefined;
            resourceInputs["ipv6Enable"] = args ? args.ipv6Enable : undefined;
            resourceInputs["kubeProxyMode"] = args ? args.kubeProxyMode : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["ltsReclaimPolicy"] = args ? args.ltsReclaimPolicy : undefined;
            resourceInputs["masters"] = args ? args.masters : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["serviceNetworkCidr"] = args ? args.serviceNetworkCidr : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["supportIstio"] = args ? args.supportIstio : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["certificateClusters"] = undefined /*out*/;
            resourceInputs["certificateUsers"] = undefined /*out*/;
            resourceInputs["kubeConfigRaw"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CceCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CceCluster resources.
 */
export interface CceClusterState {
    alias?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authenticatingProxyCa?: pulumi.Input<string>;
    authenticatingProxyCert?: pulumi.Input<string>;
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    authenticationMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    category?: pulumi.Input<string>;
    certificateClusters?: pulumi.Input<pulumi.Input<inputs.CceClusterCertificateCluster>[]>;
    certificateUsers?: pulumi.Input<pulumi.Input<inputs.CceClusterCertificateUser>[]>;
    chargingMode?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    componentConfigurations?: pulumi.Input<pulumi.Input<inputs.CceClusterComponentConfiguration>[]>;
    containerNetworkCidr?: pulumi.Input<string>;
    containerNetworkType?: pulumi.Input<string>;
    customSans?: pulumi.Input<pulumi.Input<string>[]>;
    deleteAll?: pulumi.Input<string>;
    deleteEfs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteEni?: pulumi.Input<string>;
    deleteEvs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteNet?: pulumi.Input<string>;
    deleteObs?: pulumi.Input<string>;
    deleteSfs?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    enableDistributeManagement?: pulumi.Input<boolean>;
    /**
     * schema: Computed
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the ENI resides
     */
    eniSubnetId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extendParams?: pulumi.Input<pulumi.Input<inputs.CceClusterExtendParam>[]>;
    flavorId?: pulumi.Input<string>;
    hibernate?: pulumi.Input<boolean>;
    /**
     * schema: Internal
     */
    highwaySubnetId?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    kubeConfigRaw?: pulumi.Input<string>;
    kubeProxyMode?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ltsReclaimPolicy?: pulumi.Input<string>;
    masters?: pulumi.Input<pulumi.Input<inputs.CceClusterMaster>[]>;
    multiAz?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    serviceNetworkCidr?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    supportIstio?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CceCluster resource.
 */
export interface CceClusterArgs {
    alias?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authenticatingProxyCa?: pulumi.Input<string>;
    authenticatingProxyCert?: pulumi.Input<string>;
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    authenticationMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    componentConfigurations?: pulumi.Input<pulumi.Input<inputs.CceClusterComponentConfiguration>[]>;
    containerNetworkCidr?: pulumi.Input<string>;
    containerNetworkType: pulumi.Input<string>;
    customSans?: pulumi.Input<pulumi.Input<string>[]>;
    deleteAll?: pulumi.Input<string>;
    deleteEfs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteEni?: pulumi.Input<string>;
    deleteEvs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteNet?: pulumi.Input<string>;
    deleteObs?: pulumi.Input<string>;
    deleteSfs?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    enableDistributeManagement?: pulumi.Input<boolean>;
    /**
     * schema: Computed
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the ENI resides
     */
    eniSubnetId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extendParams?: pulumi.Input<pulumi.Input<inputs.CceClusterExtendParam>[]>;
    flavorId: pulumi.Input<string>;
    hibernate?: pulumi.Input<boolean>;
    /**
     * schema: Internal
     */
    highwaySubnetId?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    kubeProxyMode?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ltsReclaimPolicy?: pulumi.Input<string>;
    masters?: pulumi.Input<pulumi.Input<inputs.CceClusterMaster>[]>;
    multiAz?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    serviceNetworkCidr?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    supportIstio?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}
