// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CcePvc extends pulumi.CustomResource {
    /**
     * Get an existing CcePvc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CcePvcState, opts?: pulumi.CustomResourceOptions): CcePvc {
        return new CcePvc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/ccePvc:CcePvc';

    /**
     * Returns true if the given object is an instance of CcePvc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CcePvc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CcePvc.__pulumiType;
    }

    public readonly accessModes!: pulumi.Output<string[]>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<string>;
    public readonly storageClassName!: pulumi.Output<string>;

    /**
     * Create a CcePvc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CcePvcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CcePvcArgs | CcePvcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CcePvcState | undefined;
            resourceInputs["accessModes"] = state ? state.accessModes : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["storageClassName"] = state ? state.storageClassName : undefined;
        } else {
            const args = argsOrState as CcePvcArgs | undefined;
            if ((!args || args.accessModes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessModes'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.storage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            if ((!args || args.storageClassName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageClassName'");
            }
            resourceInputs["accessModes"] = args ? args.accessModes : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["storageClassName"] = args ? args.storageClassName : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CcePvc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CcePvc resources.
 */
export interface CcePvcState {
    accessModes?: pulumi.Input<pulumi.Input<string>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clusterId?: pulumi.Input<string>;
    creationTimestamp?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<string>;
    storageClassName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CcePvc resource.
 */
export interface CcePvcArgs {
    accessModes: pulumi.Input<pulumi.Input<string>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clusterId: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    storage: pulumi.Input<string>;
    storageClassName: pulumi.Input<string>;
}
