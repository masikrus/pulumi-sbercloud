// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CbrPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CbrPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CbrPolicyState, opts?: pulumi.CustomResourceOptions): CbrPolicy {
        return new CbrPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cbrPolicy:CbrPolicy';

    /**
     * Returns true if the given object is an instance of CbrPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CbrPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CbrPolicy.__pulumiType;
    }

    /**
     * The scheduling rule for the CBR policy backup execution.
     */
    public readonly backupCycle!: pulumi.Output<outputs.CbrPolicyBackupCycle>;
    /**
     * The maximum number of retained backups.
     */
    public readonly backupQuantity!: pulumi.Output<number | undefined>;
    /**
     * The ID of the replication destination project.
     */
    public readonly destinationProjectId!: pulumi.Output<string | undefined>;
    /**
     * The name of the replication destination region.
     */
    public readonly destinationRegion!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable the acceleration function to shorten the replication time for cross-region
     */
    public readonly enableAcceleration!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable the CBR policy.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The long-term retention rules.
     */
    public readonly longTermRetention!: pulumi.Output<outputs.CbrPolicyLongTermRetention | undefined>;
    /**
     * The policy name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region where the policy is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The duration (in days) for retained backups.
     */
    public readonly timePeriod!: pulumi.Output<number | undefined>;
    /**
     * The UTC time zone.
     */
    public readonly timeZone!: pulumi.Output<string>;
    /**
     * The protection type of the CBR policy.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CbrPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CbrPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CbrPolicyArgs | CbrPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CbrPolicyState | undefined;
            resourceInputs["backupCycle"] = state ? state.backupCycle : undefined;
            resourceInputs["backupQuantity"] = state ? state.backupQuantity : undefined;
            resourceInputs["destinationProjectId"] = state ? state.destinationProjectId : undefined;
            resourceInputs["destinationRegion"] = state ? state.destinationRegion : undefined;
            resourceInputs["enableAcceleration"] = state ? state.enableAcceleration : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["longTermRetention"] = state ? state.longTermRetention : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timePeriod"] = state ? state.timePeriod : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CbrPolicyArgs | undefined;
            if ((!args || args.backupCycle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupCycle'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["backupCycle"] = args ? args.backupCycle : undefined;
            resourceInputs["backupQuantity"] = args ? args.backupQuantity : undefined;
            resourceInputs["destinationProjectId"] = args ? args.destinationProjectId : undefined;
            resourceInputs["destinationRegion"] = args ? args.destinationRegion : undefined;
            resourceInputs["enableAcceleration"] = args ? args.enableAcceleration : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["longTermRetention"] = args ? args.longTermRetention : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timePeriod"] = args ? args.timePeriod : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CbrPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CbrPolicy resources.
 */
export interface CbrPolicyState {
    /**
     * The scheduling rule for the CBR policy backup execution.
     */
    backupCycle?: pulumi.Input<inputs.CbrPolicyBackupCycle>;
    /**
     * The maximum number of retained backups.
     */
    backupQuantity?: pulumi.Input<number>;
    /**
     * The ID of the replication destination project.
     */
    destinationProjectId?: pulumi.Input<string>;
    /**
     * The name of the replication destination region.
     */
    destinationRegion?: pulumi.Input<string>;
    /**
     * Whether to enable the acceleration function to shorten the replication time for cross-region
     */
    enableAcceleration?: pulumi.Input<boolean>;
    /**
     * Whether to enable the CBR policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The long-term retention rules.
     */
    longTermRetention?: pulumi.Input<inputs.CbrPolicyLongTermRetention>;
    /**
     * The policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the policy is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The duration (in days) for retained backups.
     */
    timePeriod?: pulumi.Input<number>;
    /**
     * The UTC time zone.
     */
    timeZone?: pulumi.Input<string>;
    /**
     * The protection type of the CBR policy.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CbrPolicy resource.
 */
export interface CbrPolicyArgs {
    /**
     * The scheduling rule for the CBR policy backup execution.
     */
    backupCycle: pulumi.Input<inputs.CbrPolicyBackupCycle>;
    /**
     * The maximum number of retained backups.
     */
    backupQuantity?: pulumi.Input<number>;
    /**
     * The ID of the replication destination project.
     */
    destinationProjectId?: pulumi.Input<string>;
    /**
     * The name of the replication destination region.
     */
    destinationRegion?: pulumi.Input<string>;
    /**
     * Whether to enable the acceleration function to shorten the replication time for cross-region
     */
    enableAcceleration?: pulumi.Input<boolean>;
    /**
     * Whether to enable the CBR policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The long-term retention rules.
     */
    longTermRetention?: pulumi.Input<inputs.CbrPolicyLongTermRetention>;
    /**
     * The policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the policy is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The duration (in days) for retained backups.
     */
    timePeriod?: pulumi.Input<number>;
    /**
     * The UTC time zone.
     */
    timeZone?: pulumi.Input<string>;
    /**
     * The protection type of the CBR policy.
     */
    type: pulumi.Input<string>;
}
