// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpcRoute extends pulumi.CustomResource {
    /**
     * Get an existing VpcRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcRouteState, opts?: pulumi.CustomResourceOptions): VpcRoute {
        return new VpcRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpcRoute:VpcRoute';

    /**
     * Returns true if the given object is an instance of VpcRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcRoute.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destination!: pulumi.Output<string>;
    public readonly nexthop!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly routeTableId!: pulumi.Output<string>;
    public /*out*/ readonly routeTableName!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpcRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcRouteArgs | VpcRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcRouteState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["routeTableName"] = state ? state.routeTableName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcRouteArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.nexthop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nexthop'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["routeTableName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcRoute resources.
 */
export interface VpcRouteState {
    description?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    nexthop?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    routeTableName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcRoute resource.
 */
export interface VpcRouteArgs {
    description?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    nexthop: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}
