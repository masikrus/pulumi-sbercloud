// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsInstance extends pulumi.CustomResource {
    /**
     * Get an existing RdsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsInstanceState, opts?: pulumi.CustomResourceOptions): RdsInstance {
        return new RdsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/rdsInstance:RdsInstance';

    /**
     * Returns true if the given object is an instance of RdsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsInstance.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly availabilityZones!: pulumi.Output<string[]>;
    public readonly backupStrategy!: pulumi.Output<outputs.RdsInstanceBackupStrategy>;
    public readonly binlogRetentionHours!: pulumi.Output<number | undefined>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly collation!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public readonly db!: pulumi.Output<outputs.RdsInstanceDb>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dssPoolId!: pulumi.Output<string | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly fixedIp!: pulumi.Output<string>;
    public readonly flavor!: pulumi.Output<string>;
    public readonly haReplicationMode!: pulumi.Output<string>;
    public readonly lowerCaseTableNames!: pulumi.Output<string | undefined>;
    public readonly maintainBegin!: pulumi.Output<string>;
    public readonly maintainEnd!: pulumi.Output<string>;
    public readonly msdtcHosts!: pulumi.Output<outputs.RdsInstanceMsdtcHost[]>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.RdsInstanceNode[]>;
    public readonly paramGroupId!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<outputs.RdsInstanceParameter[]>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly powerAction!: pulumi.Output<string>;
    public readonly privateDnsNamePrefix!: pulumi.Output<string>;
    public /*out*/ readonly privateDnsNames!: pulumi.Output<string[]>;
    public /*out*/ readonly privateIps!: pulumi.Output<string[]>;
    public /*out*/ readonly publicIps!: pulumi.Output<string[]>;
    public readonly readWritePermissions!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly restore!: pulumi.Output<outputs.RdsInstanceRestore | undefined>;
    public readonly rotateDay!: pulumi.Output<number | undefined>;
    public readonly secondsLevelMonitoringEnabled!: pulumi.Output<boolean>;
    public readonly secondsLevelMonitoringInterval!: pulumi.Output<number>;
    public readonly secretId!: pulumi.Output<string | undefined>;
    public readonly secretName!: pulumi.Output<string | undefined>;
    public readonly secretVersion!: pulumi.Output<string | undefined>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly slowLogShowOriginalStatus!: pulumi.Output<string | undefined>;
    public readonly sslEnable!: pulumi.Output<boolean>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly switchStrategy!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tdeEnabled!: pulumi.Output<boolean>;
    public readonly timeZone!: pulumi.Output<string>;
    public readonly volume!: pulumi.Output<outputs.RdsInstanceVolume>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a RdsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsInstanceArgs | RdsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsInstanceState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["backupStrategy"] = state ? state.backupStrategy : undefined;
            resourceInputs["binlogRetentionHours"] = state ? state.binlogRetentionHours : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["collation"] = state ? state.collation : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["db"] = state ? state.db : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dssPoolId"] = state ? state.dssPoolId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["fixedIp"] = state ? state.fixedIp : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["haReplicationMode"] = state ? state.haReplicationMode : undefined;
            resourceInputs["lowerCaseTableNames"] = state ? state.lowerCaseTableNames : undefined;
            resourceInputs["maintainBegin"] = state ? state.maintainBegin : undefined;
            resourceInputs["maintainEnd"] = state ? state.maintainEnd : undefined;
            resourceInputs["msdtcHosts"] = state ? state.msdtcHosts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["paramGroupId"] = state ? state.paramGroupId : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["powerAction"] = state ? state.powerAction : undefined;
            resourceInputs["privateDnsNamePrefix"] = state ? state.privateDnsNamePrefix : undefined;
            resourceInputs["privateDnsNames"] = state ? state.privateDnsNames : undefined;
            resourceInputs["privateIps"] = state ? state.privateIps : undefined;
            resourceInputs["publicIps"] = state ? state.publicIps : undefined;
            resourceInputs["readWritePermissions"] = state ? state.readWritePermissions : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["restore"] = state ? state.restore : undefined;
            resourceInputs["rotateDay"] = state ? state.rotateDay : undefined;
            resourceInputs["secondsLevelMonitoringEnabled"] = state ? state.secondsLevelMonitoringEnabled : undefined;
            resourceInputs["secondsLevelMonitoringInterval"] = state ? state.secondsLevelMonitoringInterval : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretVersion"] = state ? state.secretVersion : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["slowLogShowOriginalStatus"] = state ? state.slowLogShowOriginalStatus : undefined;
            resourceInputs["sslEnable"] = state ? state.sslEnable : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["switchStrategy"] = state ? state.switchStrategy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tdeEnabled"] = state ? state.tdeEnabled : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as RdsInstanceArgs | undefined;
            if ((!args || args.availabilityZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            if ((!args || args.db === undefined) && !opts.urn) {
                throw new Error("Missing required property 'db'");
            }
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.volume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volume'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["backupStrategy"] = args ? args.backupStrategy : undefined;
            resourceInputs["binlogRetentionHours"] = args ? args.binlogRetentionHours : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["collation"] = args ? args.collation : undefined;
            resourceInputs["db"] = args ? args.db : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dssPoolId"] = args ? args.dssPoolId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["fixedIp"] = args ? args.fixedIp : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["haReplicationMode"] = args ? args.haReplicationMode : undefined;
            resourceInputs["lowerCaseTableNames"] = args ? args.lowerCaseTableNames : undefined;
            resourceInputs["maintainBegin"] = args ? args.maintainBegin : undefined;
            resourceInputs["maintainEnd"] = args ? args.maintainEnd : undefined;
            resourceInputs["msdtcHosts"] = args ? args.msdtcHosts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paramGroupId"] = args ? args.paramGroupId : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["powerAction"] = args ? args.powerAction : undefined;
            resourceInputs["privateDnsNamePrefix"] = args ? args.privateDnsNamePrefix : undefined;
            resourceInputs["readWritePermissions"] = args ? args.readWritePermissions : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["restore"] = args ? args.restore : undefined;
            resourceInputs["rotateDay"] = args ? args.rotateDay : undefined;
            resourceInputs["secondsLevelMonitoringEnabled"] = args ? args.secondsLevelMonitoringEnabled : undefined;
            resourceInputs["secondsLevelMonitoringInterval"] = args ? args.secondsLevelMonitoringInterval : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretVersion"] = args ? args.secretVersion : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["slowLogShowOriginalStatus"] = args ? args.slowLogShowOriginalStatus : undefined;
            resourceInputs["sslEnable"] = args ? args.sslEnable : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["switchStrategy"] = args ? args.switchStrategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tdeEnabled"] = args ? args.tdeEnabled : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["privateDnsNames"] = undefined /*out*/;
            resourceInputs["privateIps"] = undefined /*out*/;
            resourceInputs["publicIps"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RdsInstance resources.
 */
export interface RdsInstanceState {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backupStrategy?: pulumi.Input<inputs.RdsInstanceBackupStrategy>;
    binlogRetentionHours?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    collation?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    db?: pulumi.Input<inputs.RdsInstanceDb>;
    description?: pulumi.Input<string>;
    dssPoolId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    haReplicationMode?: pulumi.Input<string>;
    lowerCaseTableNames?: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    msdtcHosts?: pulumi.Input<pulumi.Input<inputs.RdsInstanceMsdtcHost>[]>;
    name?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.RdsInstanceNode>[]>;
    paramGroupId?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RdsInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    powerAction?: pulumi.Input<string>;
    privateDnsNamePrefix?: pulumi.Input<string>;
    privateDnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    readWritePermissions?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.RdsInstanceRestore>;
    rotateDay?: pulumi.Input<number>;
    secondsLevelMonitoringEnabled?: pulumi.Input<boolean>;
    secondsLevelMonitoringInterval?: pulumi.Input<number>;
    secretId?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    slowLogShowOriginalStatus?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    switchStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tdeEnabled?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    volume?: pulumi.Input<inputs.RdsInstanceVolume>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdsInstance resource.
 */
export interface RdsInstanceArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    backupStrategy?: pulumi.Input<inputs.RdsInstanceBackupStrategy>;
    binlogRetentionHours?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    collation?: pulumi.Input<string>;
    db: pulumi.Input<inputs.RdsInstanceDb>;
    description?: pulumi.Input<string>;
    dssPoolId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    flavor: pulumi.Input<string>;
    haReplicationMode?: pulumi.Input<string>;
    lowerCaseTableNames?: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    msdtcHosts?: pulumi.Input<pulumi.Input<inputs.RdsInstanceMsdtcHost>[]>;
    name?: pulumi.Input<string>;
    paramGroupId?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RdsInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    powerAction?: pulumi.Input<string>;
    privateDnsNamePrefix?: pulumi.Input<string>;
    readWritePermissions?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.RdsInstanceRestore>;
    rotateDay?: pulumi.Input<number>;
    secondsLevelMonitoringEnabled?: pulumi.Input<boolean>;
    secondsLevelMonitoringInterval?: pulumi.Input<number>;
    secretId?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    slowLogShowOriginalStatus?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
    switchStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tdeEnabled?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    volume: pulumi.Input<inputs.RdsInstanceVolume>;
    vpcId: pulumi.Input<string>;
}
