// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MapreduceCluster extends pulumi.CustomResource {
    /**
     * Get an existing MapreduceCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MapreduceClusterState, opts?: pulumi.CustomResourceOptions): MapreduceCluster {
        return new MapreduceCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/mapreduceCluster:MapreduceCluster';

    /**
     * Returns true if the given object is an instance of MapreduceCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MapreduceCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MapreduceCluster.__pulumiType;
    }

    public readonly analysisCoreNodes!: pulumi.Output<outputs.MapreduceClusterAnalysisCoreNodes | undefined>;
    public readonly analysisTaskNodes!: pulumi.Output<outputs.MapreduceClusterAnalysisTaskNodes | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly bootstrapScripts!: pulumi.Output<outputs.MapreduceClusterBootstrapScript[] | undefined>;
    public readonly chargingMode!: pulumi.Output<string>;
    public /*out*/ readonly chargingStartTime!: pulumi.Output<string>;
    public readonly componentConfigs!: pulumi.Output<outputs.MapreduceClusterComponentConfig[] | undefined>;
    public readonly componentLists!: pulumi.Output<string[]>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly customNodes!: pulumi.Output<outputs.MapreduceClusterCustomNode[] | undefined>;
    public readonly eipId!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly externalDatasources!: pulumi.Output<outputs.MapreduceClusterExternalDatasource[] | undefined>;
    public readonly logCollection!: pulumi.Output<boolean | undefined>;
    public readonly managerAdminPass!: pulumi.Output<string>;
    public /*out*/ readonly masterNodeIp!: pulumi.Output<string>;
    public readonly masterNodes!: pulumi.Output<outputs.MapreduceClusterMasterNodes>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeAdminPass!: pulumi.Output<string | undefined>;
    public readonly nodeKeyPair!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public readonly publicIp!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly safeMode!: pulumi.Output<boolean | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly smnNotify!: pulumi.Output<outputs.MapreduceClusterSmnNotify | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly streamingCoreNodes!: pulumi.Output<outputs.MapreduceClusterStreamingCoreNodes | undefined>;
    public readonly streamingTaskNodes!: pulumi.Output<outputs.MapreduceClusterStreamingTaskNodes | undefined>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly templateId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly totalNodeNumber!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string | undefined>;
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a MapreduceCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MapreduceClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MapreduceClusterArgs | MapreduceClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MapreduceClusterState | undefined;
            resourceInputs["analysisCoreNodes"] = state ? state.analysisCoreNodes : undefined;
            resourceInputs["analysisTaskNodes"] = state ? state.analysisTaskNodes : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootstrapScripts"] = state ? state.bootstrapScripts : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["chargingStartTime"] = state ? state.chargingStartTime : undefined;
            resourceInputs["componentConfigs"] = state ? state.componentConfigs : undefined;
            resourceInputs["componentLists"] = state ? state.componentLists : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customNodes"] = state ? state.customNodes : undefined;
            resourceInputs["eipId"] = state ? state.eipId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["externalDatasources"] = state ? state.externalDatasources : undefined;
            resourceInputs["logCollection"] = state ? state.logCollection : undefined;
            resourceInputs["managerAdminPass"] = state ? state.managerAdminPass : undefined;
            resourceInputs["masterNodeIp"] = state ? state.masterNodeIp : undefined;
            resourceInputs["masterNodes"] = state ? state.masterNodes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeAdminPass"] = state ? state.nodeAdminPass : undefined;
            resourceInputs["nodeKeyPair"] = state ? state.nodeKeyPair : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["safeMode"] = state ? state.safeMode : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["smnNotify"] = state ? state.smnNotify : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["streamingCoreNodes"] = state ? state.streamingCoreNodes : undefined;
            resourceInputs["streamingTaskNodes"] = state ? state.streamingTaskNodes : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["totalNodeNumber"] = state ? state.totalNodeNumber : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as MapreduceClusterArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.componentLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'componentLists'");
            }
            if ((!args || args.managerAdminPass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managerAdminPass'");
            }
            if ((!args || args.masterNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodes'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["analysisCoreNodes"] = args ? args.analysisCoreNodes : undefined;
            resourceInputs["analysisTaskNodes"] = args ? args.analysisTaskNodes : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bootstrapScripts"] = args ? args.bootstrapScripts : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["componentConfigs"] = args ? args.componentConfigs : undefined;
            resourceInputs["componentLists"] = args ? args.componentLists : undefined;
            resourceInputs["customNodes"] = args ? args.customNodes : undefined;
            resourceInputs["eipId"] = args ? args.eipId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["externalDatasources"] = args ? args.externalDatasources : undefined;
            resourceInputs["logCollection"] = args ? args.logCollection : undefined;
            resourceInputs["managerAdminPass"] = args?.managerAdminPass ? pulumi.secret(args.managerAdminPass) : undefined;
            resourceInputs["masterNodes"] = args ? args.masterNodes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeAdminPass"] = args?.nodeAdminPass ? pulumi.secret(args.nodeAdminPass) : undefined;
            resourceInputs["nodeKeyPair"] = args ? args.nodeKeyPair : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["safeMode"] = args ? args.safeMode : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["smnNotify"] = args ? args.smnNotify : undefined;
            resourceInputs["streamingCoreNodes"] = args ? args.streamingCoreNodes : undefined;
            resourceInputs["streamingTaskNodes"] = args ? args.streamingTaskNodes : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["chargingStartTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["masterNodeIp"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalNodeNumber"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["managerAdminPass", "nodeAdminPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MapreduceCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MapreduceCluster resources.
 */
export interface MapreduceClusterState {
    analysisCoreNodes?: pulumi.Input<inputs.MapreduceClusterAnalysisCoreNodes>;
    analysisTaskNodes?: pulumi.Input<inputs.MapreduceClusterAnalysisTaskNodes>;
    availabilityZone?: pulumi.Input<string>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterBootstrapScript>[]>;
    chargingMode?: pulumi.Input<string>;
    chargingStartTime?: pulumi.Input<string>;
    componentConfigs?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterComponentConfig>[]>;
    componentLists?: pulumi.Input<pulumi.Input<string>[]>;
    createTime?: pulumi.Input<string>;
    customNodes?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterCustomNode>[]>;
    eipId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    externalDatasources?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterExternalDatasource>[]>;
    logCollection?: pulumi.Input<boolean>;
    managerAdminPass?: pulumi.Input<string>;
    masterNodeIp?: pulumi.Input<string>;
    masterNodes?: pulumi.Input<inputs.MapreduceClusterMasterNodes>;
    name?: pulumi.Input<string>;
    nodeAdminPass?: pulumi.Input<string>;
    nodeKeyPair?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    safeMode?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    smnNotify?: pulumi.Input<inputs.MapreduceClusterSmnNotify>;
    status?: pulumi.Input<string>;
    streamingCoreNodes?: pulumi.Input<inputs.MapreduceClusterStreamingCoreNodes>;
    streamingTaskNodes?: pulumi.Input<inputs.MapreduceClusterStreamingTaskNodes>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateId?: pulumi.Input<string>;
    totalNodeNumber?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MapreduceCluster resource.
 */
export interface MapreduceClusterArgs {
    analysisCoreNodes?: pulumi.Input<inputs.MapreduceClusterAnalysisCoreNodes>;
    analysisTaskNodes?: pulumi.Input<inputs.MapreduceClusterAnalysisTaskNodes>;
    availabilityZone: pulumi.Input<string>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterBootstrapScript>[]>;
    chargingMode?: pulumi.Input<string>;
    componentConfigs?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterComponentConfig>[]>;
    componentLists: pulumi.Input<pulumi.Input<string>[]>;
    customNodes?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterCustomNode>[]>;
    eipId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    externalDatasources?: pulumi.Input<pulumi.Input<inputs.MapreduceClusterExternalDatasource>[]>;
    logCollection?: pulumi.Input<boolean>;
    managerAdminPass: pulumi.Input<string>;
    masterNodes: pulumi.Input<inputs.MapreduceClusterMasterNodes>;
    name?: pulumi.Input<string>;
    nodeAdminPass?: pulumi.Input<string>;
    nodeKeyPair?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    safeMode?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    smnNotify?: pulumi.Input<inputs.MapreduceClusterSmnNotify>;
    streamingCoreNodes?: pulumi.Input<inputs.MapreduceClusterStreamingCoreNodes>;
    streamingTaskNodes?: pulumi.Input<inputs.MapreduceClusterStreamingTaskNodes>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}
