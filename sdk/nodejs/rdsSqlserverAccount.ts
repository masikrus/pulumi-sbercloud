// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RdsSqlserverAccount extends pulumi.CustomResource {
    /**
     * Get an existing RdsSqlserverAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsSqlserverAccountState, opts?: pulumi.CustomResourceOptions): RdsSqlserverAccount {
        return new RdsSqlserverAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/rdsSqlserverAccount:RdsSqlserverAccount';

    /**
     * Returns true if the given object is an instance of RdsSqlserverAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsSqlserverAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsSqlserverAccount.__pulumiType;
    }

    /**
     * Specifies the ID of the RDS SQLServer instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the username of the DB account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the password of the DB account.
     */
    public readonly password!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the DB user status.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a RdsSqlserverAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsSqlserverAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsSqlserverAccountArgs | RdsSqlserverAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsSqlserverAccountState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as RdsSqlserverAccountArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RdsSqlserverAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RdsSqlserverAccount resources.
 */
export interface RdsSqlserverAccountState {
    /**
     * Specifies the ID of the RDS SQLServer instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the username of the DB account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the password of the DB account.
     */
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Indicates the DB user status.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdsSqlserverAccount resource.
 */
export interface RdsSqlserverAccountArgs {
    /**
     * Specifies the ID of the RDS SQLServer instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the username of the DB account.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the password of the DB account.
     */
    password: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
