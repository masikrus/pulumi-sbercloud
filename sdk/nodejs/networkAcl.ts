// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkAcl extends pulumi.CustomResource {
    /**
     * Get an existing NetworkAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkAclState, opts?: pulumi.CustomResourceOptions): NetworkAcl {
        return new NetworkAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/networkAcl:NetworkAcl';

    /**
     * Returns true if the given object is an instance of NetworkAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAcl.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly inboundPolicyId!: pulumi.Output<string>;
    public readonly inboundRules!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outboundPolicyId!: pulumi.Output<string>;
    public readonly outboundRules!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly ports!: pulumi.Output<string[]>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnets!: pulumi.Output<string[] | undefined>;

    /**
     * Create a NetworkAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkAclArgs | NetworkAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkAclState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inboundPolicyId"] = state ? state.inboundPolicyId : undefined;
            resourceInputs["inboundRules"] = state ? state.inboundRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundPolicyId"] = state ? state.outboundPolicyId : undefined;
            resourceInputs["outboundRules"] = state ? state.outboundRules : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
        } else {
            const args = argsOrState as NetworkAclArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inboundRules"] = args ? args.inboundRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outboundRules"] = args ? args.outboundRules : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["inboundPolicyId"] = undefined /*out*/;
            resourceInputs["outboundPolicyId"] = undefined /*out*/;
            resourceInputs["ports"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkAcl resources.
 */
export interface NetworkAclState {
    description?: pulumi.Input<string>;
    inboundPolicyId?: pulumi.Input<string>;
    inboundRules?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    outboundPolicyId?: pulumi.Input<string>;
    outboundRules?: pulumi.Input<pulumi.Input<string>[]>;
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NetworkAcl resource.
 */
export interface NetworkAclArgs {
    description?: pulumi.Input<string>;
    inboundRules?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    outboundRules?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}
