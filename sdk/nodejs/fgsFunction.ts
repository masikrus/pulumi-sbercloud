// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FgsFunction extends pulumi.CustomResource {
    /**
     * Get an existing FgsFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FgsFunctionState, opts?: pulumi.CustomResourceOptions): FgsFunction {
        return new FgsFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/fgsFunction:FgsFunction';

    /**
     * Returns true if the given object is an instance of FgsFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FgsFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FgsFunction.__pulumiType;
    }

    /**
     * The agency configuration of the function.
     */
    public readonly agency!: pulumi.Output<string | undefined>;
    /**
     * The group to which the function belongs.
     */
    public readonly app!: pulumi.Output<string | undefined>;
    /**
     * The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
     */
    public readonly appAgency!: pulumi.Output<string>;
    /**
     * The name of the function file.
     */
    public readonly codeFilename!: pulumi.Output<string>;
    /**
     * The code type of the function.
     */
    public readonly codeType!: pulumi.Output<string>;
    /**
     * The URL where the function code is stored in OBS.
     */
    public readonly codeUrl!: pulumi.Output<string | undefined>;
    /**
     * The number of concurrent requests of the function.
     */
    public readonly concurrencyNum!: pulumi.Output<number>;
    /**
     * The custom image configuration of the function.
     */
    public readonly customImage!: pulumi.Output<outputs.FgsFunctionCustomImage>;
    /**
     * The ID list of the dependencies.
     */
    public readonly dependLists!: pulumi.Output<string[]>;
    /**
     * The description of the function.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The private DNS configuration of the function network.
     */
    public readonly dnsList!: pulumi.Output<string>;
    /**
     * Whether the authentication in the request header is enabled.
     */
    public readonly enableAuthInHeader!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the class isolation is enabled for the JAVA runtime functions.
     */
    public readonly enableClassIsolation!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the dynamic memory configuration is enabled.
     */
    public readonly enableDynamicMemory!: pulumi.Output<boolean | undefined>;
    /**
     * The key/value information defined to be encrypted for the function.
     */
    public readonly encryptedUserData!: pulumi.Output<string | undefined>;
    /**
     * The ID of the enterprise project to which the function belongs.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * The size of the function ephemeral storage.
     */
    public readonly ephemeralStorage!: pulumi.Output<number>;
    /**
     * The function code.
     */
    public readonly funcCode!: pulumi.Output<string | undefined>;
    /**
     * The list of function mount configuration.
     */
    public readonly funcMounts!: pulumi.Output<outputs.FgsFunctionFuncMount[]>;
    /**
     * The description of the function.
     */
    public readonly functiongraphVersion!: pulumi.Output<string>;
    /**
     * The GPU memory size allocated to the function, in MByte (MB).
     */
    public readonly gpuMemory!: pulumi.Output<number | undefined>;
    /**
     * The GPU type of the function.
     */
    public readonly gpuType!: pulumi.Output<string | undefined>;
    /**
     * The entry point of the function.
     */
    public readonly handler!: pulumi.Output<string>;
    /**
     * The heartbeat handler of the function.
     */
    public readonly heartbeatHandler!: pulumi.Output<string | undefined>;
    /**
     * The initializer of the function.
     */
    public readonly initializerHandler!: pulumi.Output<string>;
    /**
     * The maximum duration the function can be initialized.
     */
    public readonly initializerTimeout!: pulumi.Output<number>;
    /**
     * Whether the function is a stateful function.
     */
    public readonly isStatefulFunction!: pulumi.Output<boolean | undefined>;
    /**
     * The LTS group ID for collecting logs.
     */
    public readonly logGroupId!: pulumi.Output<string>;
    /**
     * The LTS group name for collecting logs.
     */
    public readonly logGroupName!: pulumi.Output<string>;
    /**
     * The LTS stream ID for collecting logs.
     */
    public readonly logStreamId!: pulumi.Output<string>;
    /**
     * The LTS stream name for collecting logs.
     */
    public readonly logStreamName!: pulumi.Output<string>;
    /**
     * The maximum number of instances of the function.
     */
    public readonly maxInstanceNum!: pulumi.Output<string>;
    /**
     * The memory size allocated to the function, in MByte (MB).
     */
    public readonly memorySize!: pulumi.Output<number>;
    /**
     * The mount user group ID.
     */
    public readonly mountUserGroupId!: pulumi.Output<number>;
    /**
     * The mount user ID.
     */
    public readonly mountUserId!: pulumi.Output<number>;
    /**
     * The name of the function.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network configuration of the function.
     */
    public readonly networkController!: pulumi.Output<outputs.FgsFunctionNetworkController | undefined>;
    /**
     * The network ID of subnet.
     */
    public readonly networkId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use app instead
     */
    public readonly package!: pulumi.Output<string | undefined>;
    /**
     * The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
     * service.
     */
    public readonly peeringCidr!: pulumi.Output<string | undefined>;
    /**
     * The pre-stop handler of a function.
     */
    public readonly preStopHandler!: pulumi.Output<string | undefined>;
    /**
     * The maximum duration that the function can be initialized.
     */
    public readonly preStopTimeout!: pulumi.Output<number | undefined>;
    /**
     * The region where the function is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The reserved instance policies of the function.
     */
    public readonly reservedInstances!: pulumi.Output<outputs.FgsFunctionReservedInstance[] | undefined>;
    /**
     * The restore hook handler of the function.
     */
    public readonly restoreHookHandler!: pulumi.Output<string | undefined>;
    /**
     * The timeout of the function restore hook.
     */
    public readonly restoreHookTimeout!: pulumi.Output<number | undefined>;
    /**
     * The environment for executing the function.
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the function.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The timeout interval of the function, in seconds.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * The URN (Uniform Resource Name) of the function.
     */
    public /*out*/ readonly urn!: pulumi.Output<string>;
    /**
     * The key/value information defined for the function.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * The version of the function.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * The versions management of the function.
     */
    public readonly versions!: pulumi.Output<outputs.FgsFunctionVersion[] | undefined>;
    /**
     * The ID of the VPC to which the function belongs.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use agency instead
     */
    public readonly xrole!: pulumi.Output<string | undefined>;

    /**
     * Create a FgsFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FgsFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FgsFunctionArgs | FgsFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FgsFunctionState | undefined;
            resourceInputs["agency"] = state ? state.agency : undefined;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["appAgency"] = state ? state.appAgency : undefined;
            resourceInputs["codeFilename"] = state ? state.codeFilename : undefined;
            resourceInputs["codeType"] = state ? state.codeType : undefined;
            resourceInputs["codeUrl"] = state ? state.codeUrl : undefined;
            resourceInputs["concurrencyNum"] = state ? state.concurrencyNum : undefined;
            resourceInputs["customImage"] = state ? state.customImage : undefined;
            resourceInputs["dependLists"] = state ? state.dependLists : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsList"] = state ? state.dnsList : undefined;
            resourceInputs["enableAuthInHeader"] = state ? state.enableAuthInHeader : undefined;
            resourceInputs["enableClassIsolation"] = state ? state.enableClassIsolation : undefined;
            resourceInputs["enableDynamicMemory"] = state ? state.enableDynamicMemory : undefined;
            resourceInputs["encryptedUserData"] = state ? state.encryptedUserData : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["ephemeralStorage"] = state ? state.ephemeralStorage : undefined;
            resourceInputs["funcCode"] = state ? state.funcCode : undefined;
            resourceInputs["funcMounts"] = state ? state.funcMounts : undefined;
            resourceInputs["functiongraphVersion"] = state ? state.functiongraphVersion : undefined;
            resourceInputs["gpuMemory"] = state ? state.gpuMemory : undefined;
            resourceInputs["gpuType"] = state ? state.gpuType : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["heartbeatHandler"] = state ? state.heartbeatHandler : undefined;
            resourceInputs["initializerHandler"] = state ? state.initializerHandler : undefined;
            resourceInputs["initializerTimeout"] = state ? state.initializerTimeout : undefined;
            resourceInputs["isStatefulFunction"] = state ? state.isStatefulFunction : undefined;
            resourceInputs["logGroupId"] = state ? state.logGroupId : undefined;
            resourceInputs["logGroupName"] = state ? state.logGroupName : undefined;
            resourceInputs["logStreamId"] = state ? state.logStreamId : undefined;
            resourceInputs["logStreamName"] = state ? state.logStreamName : undefined;
            resourceInputs["maxInstanceNum"] = state ? state.maxInstanceNum : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["mountUserGroupId"] = state ? state.mountUserGroupId : undefined;
            resourceInputs["mountUserId"] = state ? state.mountUserId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkController"] = state ? state.networkController : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["package"] = state ? state.package : undefined;
            resourceInputs["peeringCidr"] = state ? state.peeringCidr : undefined;
            resourceInputs["preStopHandler"] = state ? state.preStopHandler : undefined;
            resourceInputs["preStopTimeout"] = state ? state.preStopTimeout : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reservedInstances"] = state ? state.reservedInstances : undefined;
            resourceInputs["restoreHookHandler"] = state ? state.restoreHookHandler : undefined;
            resourceInputs["restoreHookTimeout"] = state ? state.restoreHookTimeout : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["urn"] = state ? state.urn : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versions"] = state ? state.versions : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["xrole"] = state ? state.xrole : undefined;
        } else {
            const args = argsOrState as FgsFunctionArgs | undefined;
            if ((!args || args.memorySize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memorySize'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            resourceInputs["agency"] = args ? args.agency : undefined;
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["appAgency"] = args ? args.appAgency : undefined;
            resourceInputs["codeFilename"] = args ? args.codeFilename : undefined;
            resourceInputs["codeType"] = args ? args.codeType : undefined;
            resourceInputs["codeUrl"] = args ? args.codeUrl : undefined;
            resourceInputs["concurrencyNum"] = args ? args.concurrencyNum : undefined;
            resourceInputs["customImage"] = args ? args.customImage : undefined;
            resourceInputs["dependLists"] = args ? args.dependLists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsList"] = args ? args.dnsList : undefined;
            resourceInputs["enableAuthInHeader"] = args ? args.enableAuthInHeader : undefined;
            resourceInputs["enableClassIsolation"] = args ? args.enableClassIsolation : undefined;
            resourceInputs["enableDynamicMemory"] = args ? args.enableDynamicMemory : undefined;
            resourceInputs["encryptedUserData"] = args?.encryptedUserData ? pulumi.secret(args.encryptedUserData) : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["ephemeralStorage"] = args ? args.ephemeralStorage : undefined;
            resourceInputs["funcCode"] = args ? args.funcCode : undefined;
            resourceInputs["funcMounts"] = args ? args.funcMounts : undefined;
            resourceInputs["functiongraphVersion"] = args ? args.functiongraphVersion : undefined;
            resourceInputs["gpuMemory"] = args ? args.gpuMemory : undefined;
            resourceInputs["gpuType"] = args ? args.gpuType : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["heartbeatHandler"] = args ? args.heartbeatHandler : undefined;
            resourceInputs["initializerHandler"] = args ? args.initializerHandler : undefined;
            resourceInputs["initializerTimeout"] = args ? args.initializerTimeout : undefined;
            resourceInputs["isStatefulFunction"] = args ? args.isStatefulFunction : undefined;
            resourceInputs["logGroupId"] = args ? args.logGroupId : undefined;
            resourceInputs["logGroupName"] = args ? args.logGroupName : undefined;
            resourceInputs["logStreamId"] = args ? args.logStreamId : undefined;
            resourceInputs["logStreamName"] = args ? args.logStreamName : undefined;
            resourceInputs["maxInstanceNum"] = args ? args.maxInstanceNum : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["mountUserGroupId"] = args ? args.mountUserGroupId : undefined;
            resourceInputs["mountUserId"] = args ? args.mountUserId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkController"] = args ? args.networkController : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["package"] = args ? args.package : undefined;
            resourceInputs["peeringCidr"] = args ? args.peeringCidr : undefined;
            resourceInputs["preStopHandler"] = args ? args.preStopHandler : undefined;
            resourceInputs["preStopTimeout"] = args ? args.preStopTimeout : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reservedInstances"] = args ? args.reservedInstances : undefined;
            resourceInputs["restoreHookHandler"] = args ? args.restoreHookHandler : undefined;
            resourceInputs["restoreHookTimeout"] = args ? args.restoreHookTimeout : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["versions"] = args ? args.versions : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["xrole"] = args ? args.xrole : undefined;
            resourceInputs["urn"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedUserData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FgsFunction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FgsFunction resources.
 */
export interface FgsFunctionState {
    /**
     * The agency configuration of the function.
     */
    agency?: pulumi.Input<string>;
    /**
     * The group to which the function belongs.
     */
    app?: pulumi.Input<string>;
    /**
     * The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
     */
    appAgency?: pulumi.Input<string>;
    /**
     * The name of the function file.
     */
    codeFilename?: pulumi.Input<string>;
    /**
     * The code type of the function.
     */
    codeType?: pulumi.Input<string>;
    /**
     * The URL where the function code is stored in OBS.
     */
    codeUrl?: pulumi.Input<string>;
    /**
     * The number of concurrent requests of the function.
     */
    concurrencyNum?: pulumi.Input<number>;
    /**
     * The custom image configuration of the function.
     */
    customImage?: pulumi.Input<inputs.FgsFunctionCustomImage>;
    /**
     * The ID list of the dependencies.
     */
    dependLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the function.
     */
    description?: pulumi.Input<string>;
    /**
     * The private DNS configuration of the function network.
     */
    dnsList?: pulumi.Input<string>;
    /**
     * Whether the authentication in the request header is enabled.
     */
    enableAuthInHeader?: pulumi.Input<boolean>;
    /**
     * Whether the class isolation is enabled for the JAVA runtime functions.
     */
    enableClassIsolation?: pulumi.Input<boolean>;
    /**
     * Whether the dynamic memory configuration is enabled.
     */
    enableDynamicMemory?: pulumi.Input<boolean>;
    /**
     * The key/value information defined to be encrypted for the function.
     */
    encryptedUserData?: pulumi.Input<string>;
    /**
     * The ID of the enterprise project to which the function belongs.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The size of the function ephemeral storage.
     */
    ephemeralStorage?: pulumi.Input<number>;
    /**
     * The function code.
     */
    funcCode?: pulumi.Input<string>;
    /**
     * The list of function mount configuration.
     */
    funcMounts?: pulumi.Input<pulumi.Input<inputs.FgsFunctionFuncMount>[]>;
    /**
     * The description of the function.
     */
    functiongraphVersion?: pulumi.Input<string>;
    /**
     * The GPU memory size allocated to the function, in MByte (MB).
     */
    gpuMemory?: pulumi.Input<number>;
    /**
     * The GPU type of the function.
     */
    gpuType?: pulumi.Input<string>;
    /**
     * The entry point of the function.
     */
    handler?: pulumi.Input<string>;
    /**
     * The heartbeat handler of the function.
     */
    heartbeatHandler?: pulumi.Input<string>;
    /**
     * The initializer of the function.
     */
    initializerHandler?: pulumi.Input<string>;
    /**
     * The maximum duration the function can be initialized.
     */
    initializerTimeout?: pulumi.Input<number>;
    /**
     * Whether the function is a stateful function.
     */
    isStatefulFunction?: pulumi.Input<boolean>;
    /**
     * The LTS group ID for collecting logs.
     */
    logGroupId?: pulumi.Input<string>;
    /**
     * The LTS group name for collecting logs.
     */
    logGroupName?: pulumi.Input<string>;
    /**
     * The LTS stream ID for collecting logs.
     */
    logStreamId?: pulumi.Input<string>;
    /**
     * The LTS stream name for collecting logs.
     */
    logStreamName?: pulumi.Input<string>;
    /**
     * The maximum number of instances of the function.
     */
    maxInstanceNum?: pulumi.Input<string>;
    /**
     * The memory size allocated to the function, in MByte (MB).
     */
    memorySize?: pulumi.Input<number>;
    /**
     * The mount user group ID.
     */
    mountUserGroupId?: pulumi.Input<number>;
    /**
     * The mount user ID.
     */
    mountUserId?: pulumi.Input<number>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * The network configuration of the function.
     */
    networkController?: pulumi.Input<inputs.FgsFunctionNetworkController>;
    /**
     * The network ID of subnet.
     */
    networkId?: pulumi.Input<string>;
    /**
     * @deprecated use app instead
     */
    package?: pulumi.Input<string>;
    /**
     * The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
     * service.
     */
    peeringCidr?: pulumi.Input<string>;
    /**
     * The pre-stop handler of a function.
     */
    preStopHandler?: pulumi.Input<string>;
    /**
     * The maximum duration that the function can be initialized.
     */
    preStopTimeout?: pulumi.Input<number>;
    /**
     * The region where the function is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The reserved instance policies of the function.
     */
    reservedInstances?: pulumi.Input<pulumi.Input<inputs.FgsFunctionReservedInstance>[]>;
    /**
     * The restore hook handler of the function.
     */
    restoreHookHandler?: pulumi.Input<string>;
    /**
     * The timeout of the function restore hook.
     */
    restoreHookTimeout?: pulumi.Input<number>;
    /**
     * The environment for executing the function.
     */
    runtime?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the function.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timeout interval of the function, in seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The URN (Uniform Resource Name) of the function.
     */
    urn?: pulumi.Input<string>;
    /**
     * The key/value information defined for the function.
     */
    userData?: pulumi.Input<string>;
    /**
     * The version of the function.
     */
    version?: pulumi.Input<string>;
    /**
     * The versions management of the function.
     */
    versions?: pulumi.Input<pulumi.Input<inputs.FgsFunctionVersion>[]>;
    /**
     * The ID of the VPC to which the function belongs.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * @deprecated use agency instead
     */
    xrole?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FgsFunction resource.
 */
export interface FgsFunctionArgs {
    /**
     * The agency configuration of the function.
     */
    agency?: pulumi.Input<string>;
    /**
     * The group to which the function belongs.
     */
    app?: pulumi.Input<string>;
    /**
     * The execution agency enables you to obtain a token or an AK/SK for accessing other cloud services.
     */
    appAgency?: pulumi.Input<string>;
    /**
     * The name of the function file.
     */
    codeFilename?: pulumi.Input<string>;
    /**
     * The code type of the function.
     */
    codeType?: pulumi.Input<string>;
    /**
     * The URL where the function code is stored in OBS.
     */
    codeUrl?: pulumi.Input<string>;
    /**
     * The number of concurrent requests of the function.
     */
    concurrencyNum?: pulumi.Input<number>;
    /**
     * The custom image configuration of the function.
     */
    customImage?: pulumi.Input<inputs.FgsFunctionCustomImage>;
    /**
     * The ID list of the dependencies.
     */
    dependLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the function.
     */
    description?: pulumi.Input<string>;
    /**
     * The private DNS configuration of the function network.
     */
    dnsList?: pulumi.Input<string>;
    /**
     * Whether the authentication in the request header is enabled.
     */
    enableAuthInHeader?: pulumi.Input<boolean>;
    /**
     * Whether the class isolation is enabled for the JAVA runtime functions.
     */
    enableClassIsolation?: pulumi.Input<boolean>;
    /**
     * Whether the dynamic memory configuration is enabled.
     */
    enableDynamicMemory?: pulumi.Input<boolean>;
    /**
     * The key/value information defined to be encrypted for the function.
     */
    encryptedUserData?: pulumi.Input<string>;
    /**
     * The ID of the enterprise project to which the function belongs.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The size of the function ephemeral storage.
     */
    ephemeralStorage?: pulumi.Input<number>;
    /**
     * The function code.
     */
    funcCode?: pulumi.Input<string>;
    /**
     * The list of function mount configuration.
     */
    funcMounts?: pulumi.Input<pulumi.Input<inputs.FgsFunctionFuncMount>[]>;
    /**
     * The description of the function.
     */
    functiongraphVersion?: pulumi.Input<string>;
    /**
     * The GPU memory size allocated to the function, in MByte (MB).
     */
    gpuMemory?: pulumi.Input<number>;
    /**
     * The GPU type of the function.
     */
    gpuType?: pulumi.Input<string>;
    /**
     * The entry point of the function.
     */
    handler?: pulumi.Input<string>;
    /**
     * The heartbeat handler of the function.
     */
    heartbeatHandler?: pulumi.Input<string>;
    /**
     * The initializer of the function.
     */
    initializerHandler?: pulumi.Input<string>;
    /**
     * The maximum duration the function can be initialized.
     */
    initializerTimeout?: pulumi.Input<number>;
    /**
     * Whether the function is a stateful function.
     */
    isStatefulFunction?: pulumi.Input<boolean>;
    /**
     * The LTS group ID for collecting logs.
     */
    logGroupId?: pulumi.Input<string>;
    /**
     * The LTS group name for collecting logs.
     */
    logGroupName?: pulumi.Input<string>;
    /**
     * The LTS stream ID for collecting logs.
     */
    logStreamId?: pulumi.Input<string>;
    /**
     * The LTS stream name for collecting logs.
     */
    logStreamName?: pulumi.Input<string>;
    /**
     * The maximum number of instances of the function.
     */
    maxInstanceNum?: pulumi.Input<string>;
    /**
     * The memory size allocated to the function, in MByte (MB).
     */
    memorySize: pulumi.Input<number>;
    /**
     * The mount user group ID.
     */
    mountUserGroupId?: pulumi.Input<number>;
    /**
     * The mount user ID.
     */
    mountUserId?: pulumi.Input<number>;
    /**
     * The name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * The network configuration of the function.
     */
    networkController?: pulumi.Input<inputs.FgsFunctionNetworkController>;
    /**
     * The network ID of subnet.
     */
    networkId?: pulumi.Input<string>;
    /**
     * @deprecated use app instead
     */
    package?: pulumi.Input<string>;
    /**
     * The VPC CIDR blocks used in the function code to detect whether it conflicts with the VPC CIDR blocks used by the
     * service.
     */
    peeringCidr?: pulumi.Input<string>;
    /**
     * The pre-stop handler of a function.
     */
    preStopHandler?: pulumi.Input<string>;
    /**
     * The maximum duration that the function can be initialized.
     */
    preStopTimeout?: pulumi.Input<number>;
    /**
     * The region where the function is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The reserved instance policies of the function.
     */
    reservedInstances?: pulumi.Input<pulumi.Input<inputs.FgsFunctionReservedInstance>[]>;
    /**
     * The restore hook handler of the function.
     */
    restoreHookHandler?: pulumi.Input<string>;
    /**
     * The timeout of the function restore hook.
     */
    restoreHookTimeout?: pulumi.Input<number>;
    /**
     * The environment for executing the function.
     */
    runtime: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the function.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timeout interval of the function, in seconds.
     */
    timeout: pulumi.Input<number>;
    /**
     * The key/value information defined for the function.
     */
    userData?: pulumi.Input<string>;
    /**
     * The versions management of the function.
     */
    versions?: pulumi.Input<pulumi.Input<inputs.FgsFunctionVersion>[]>;
    /**
     * The ID of the VPC to which the function belongs.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * @deprecated use agency instead
     */
    xrole?: pulumi.Input<string>;
}
