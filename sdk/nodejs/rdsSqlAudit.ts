// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RdsSqlAudit extends pulumi.CustomResource {
    /**
     * Get an existing RdsSqlAudit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsSqlAuditState, opts?: pulumi.CustomResourceOptions): RdsSqlAudit {
        return new RdsSqlAudit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/rdsSqlAudit:RdsSqlAudit';

    /**
     * Returns true if the given object is an instance of RdsSqlAudit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsSqlAudit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsSqlAudit.__pulumiType;
    }

    /**
     * Specifies the list of audit types.
     */
    public readonly auditTypes!: pulumi.Output<string[]>;
    /**
     * Specifies the ID of the RDS instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the number of days for storing audit logs.
     */
    public readonly keepDays!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
     */
    public readonly reserveAuditlogs!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RdsSqlAudit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsSqlAuditArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsSqlAuditArgs | RdsSqlAuditState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsSqlAuditState | undefined;
            resourceInputs["auditTypes"] = state ? state.auditTypes : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["keepDays"] = state ? state.keepDays : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reserveAuditlogs"] = state ? state.reserveAuditlogs : undefined;
        } else {
            const args = argsOrState as RdsSqlAuditArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.keepDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keepDays'");
            }
            resourceInputs["auditTypes"] = args ? args.auditTypes : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["keepDays"] = args ? args.keepDays : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reserveAuditlogs"] = args ? args.reserveAuditlogs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsSqlAudit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RdsSqlAudit resources.
 */
export interface RdsSqlAuditState {
    /**
     * Specifies the list of audit types.
     */
    auditTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the ID of the RDS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the number of days for storing audit logs.
     */
    keepDays?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    /**
     * Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
     */
    reserveAuditlogs?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RdsSqlAudit resource.
 */
export interface RdsSqlAuditArgs {
    /**
     * Specifies the list of audit types.
     */
    auditTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the ID of the RDS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the number of days for storing audit logs.
     */
    keepDays: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    /**
     * Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
     */
    reserveAuditlogs?: pulumi.Input<boolean>;
}
