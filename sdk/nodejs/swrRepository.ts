// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwrRepository extends pulumi.CustomResource {
    /**
     * Get an existing SwrRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwrRepositoryState, opts?: pulumi.CustomResourceOptions): SwrRepository {
        return new SwrRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/swrRepository:SwrRepository';

    /**
     * Returns true if the given object is an instance of SwrRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwrRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwrRepository.__pulumiType;
    }

    public readonly category!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly internalPath!: pulumi.Output<string>;
    public readonly isPublic!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numImages!: pulumi.Output<number>;
    public readonly organization!: pulumi.Output<string>;
    public /*out*/ readonly path!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly repositoryId!: pulumi.Output<number>;
    public /*out*/ readonly size!: pulumi.Output<number>;

    /**
     * Create a SwrRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwrRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwrRepositoryArgs | SwrRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwrRepositoryState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["internalPath"] = state ? state.internalPath : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numImages"] = state ? state.numImages : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
        } else {
            const args = argsOrState as SwrRepositoryArgs | undefined;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["internalPath"] = undefined /*out*/;
            resourceInputs["numImages"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwrRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwrRepository resources.
 */
export interface SwrRepositoryState {
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    internalPath?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    numImages?: pulumi.Input<number>;
    organization?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    repositoryId?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SwrRepository resource.
 */
export interface SwrRepositoryArgs {
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    organization: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
