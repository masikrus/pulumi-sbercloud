// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GesGraph extends pulumi.CustomResource {
    /**
     * Get an existing GesGraph resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GesGraphState, opts?: pulumi.CustomResourceOptions): GesGraph {
        return new GesGraph(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/gesGraph:GesGraph';

    /**
     * Returns true if the given object is an instance of GesGraph.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GesGraph {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GesGraph.__pulumiType;
    }

    /**
     * AZ code
     */
    public /*out*/ readonly azCode!: pulumi.Output<string>;
    /**
     * Graph instance's CPU architecture type.
     */
    public readonly cpuArch!: pulumi.Output<string>;
    /**
     * Graph instance cryptography algorithm.
     */
    public readonly cryptAlgorithm!: pulumi.Output<string>;
    /**
     * Whether to enable full-text index control for the created graph.
     */
    public readonly enableFullTextIndex!: pulumi.Output<boolean>;
    /**
     * Whether to enable the security mode. This mode may damage GES performance greatly.
     */
    public readonly enableHttps!: pulumi.Output<boolean>;
    /**
     * Whether to enable HyG for the graph. This parameter is available for database edition graphs only.
     */
    public readonly enableHyg!: pulumi.Output<boolean>;
    /**
     * Whether the created graph supports the cross-AZ mode. The default value is false.
     */
    public readonly enableMultiAz!: pulumi.Output<boolean>;
    /**
     * Whether to enable granular permission control for the created graph.
     */
    public readonly enableRbac!: pulumi.Output<boolean>;
    /**
     * Whether to enable data encryption The value can be true or false.
     */
    public readonly encryption!: pulumi.Output<outputs.GesGraphEncryption>;
    /**
     * The enterprise project ID.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Graph size type index.
     */
    public readonly graphSizeTypeIndex!: pulumi.Output<string>;
    /**
     * Whether to retain the backups of a graph after it is deleted.
     */
    public readonly keepBackup!: pulumi.Output<boolean>;
    public readonly ltsOperationTrace!: pulumi.Output<outputs.GesGraphLtsOperationTrace>;
    /**
     * The graph name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Floating IP address of a graph instance.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * Graph product type
     */
    public readonly productType!: pulumi.Output<string>;
    /**
     * The information about public IP.
     */
    public readonly publicIp!: pulumi.Output<outputs.GesGraphPublicIp>;
    public readonly region!: pulumi.Output<string>;
    public readonly replication!: pulumi.Output<number>;
    /**
     * The security group ID.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Status of a graph.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subnet ID.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the graph.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Physical addresses of a graph instance for access from private networks.
     */
    public /*out*/ readonly trafficIpLists!: pulumi.Output<string[]>;
    /**
     * ID type of vertices. This parameter is mandatory only for database edition graphs.
     */
    public readonly vertexIdType!: pulumi.Output<outputs.GesGraphVertexIdType>;
    /**
     * The VPC ID.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a GesGraph resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GesGraphArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GesGraphArgs | GesGraphState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GesGraphState | undefined;
            resourceInputs["azCode"] = state ? state.azCode : undefined;
            resourceInputs["cpuArch"] = state ? state.cpuArch : undefined;
            resourceInputs["cryptAlgorithm"] = state ? state.cryptAlgorithm : undefined;
            resourceInputs["enableFullTextIndex"] = state ? state.enableFullTextIndex : undefined;
            resourceInputs["enableHttps"] = state ? state.enableHttps : undefined;
            resourceInputs["enableHyg"] = state ? state.enableHyg : undefined;
            resourceInputs["enableMultiAz"] = state ? state.enableMultiAz : undefined;
            resourceInputs["enableRbac"] = state ? state.enableRbac : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["graphSizeTypeIndex"] = state ? state.graphSizeTypeIndex : undefined;
            resourceInputs["keepBackup"] = state ? state.keepBackup : undefined;
            resourceInputs["ltsOperationTrace"] = state ? state.ltsOperationTrace : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["productType"] = state ? state.productType : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficIpLists"] = state ? state.trafficIpLists : undefined;
            resourceInputs["vertexIdType"] = state ? state.vertexIdType : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as GesGraphArgs | undefined;
            if ((!args || args.cryptAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cryptAlgorithm'");
            }
            if ((!args || args.enableHttps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableHttps'");
            }
            if ((!args || args.graphSizeTypeIndex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'graphSizeTypeIndex'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["cpuArch"] = args ? args.cpuArch : undefined;
            resourceInputs["cryptAlgorithm"] = args ? args.cryptAlgorithm : undefined;
            resourceInputs["enableFullTextIndex"] = args ? args.enableFullTextIndex : undefined;
            resourceInputs["enableHttps"] = args ? args.enableHttps : undefined;
            resourceInputs["enableHyg"] = args ? args.enableHyg : undefined;
            resourceInputs["enableMultiAz"] = args ? args.enableMultiAz : undefined;
            resourceInputs["enableRbac"] = args ? args.enableRbac : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["graphSizeTypeIndex"] = args ? args.graphSizeTypeIndex : undefined;
            resourceInputs["keepBackup"] = args ? args.keepBackup : undefined;
            resourceInputs["ltsOperationTrace"] = args ? args.ltsOperationTrace : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productType"] = args ? args.productType : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vertexIdType"] = args ? args.vertexIdType : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["azCode"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trafficIpLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GesGraph.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GesGraph resources.
 */
export interface GesGraphState {
    /**
     * AZ code
     */
    azCode?: pulumi.Input<string>;
    /**
     * Graph instance's CPU architecture type.
     */
    cpuArch?: pulumi.Input<string>;
    /**
     * Graph instance cryptography algorithm.
     */
    cryptAlgorithm?: pulumi.Input<string>;
    /**
     * Whether to enable full-text index control for the created graph.
     */
    enableFullTextIndex?: pulumi.Input<boolean>;
    /**
     * Whether to enable the security mode. This mode may damage GES performance greatly.
     */
    enableHttps?: pulumi.Input<boolean>;
    /**
     * Whether to enable HyG for the graph. This parameter is available for database edition graphs only.
     */
    enableHyg?: pulumi.Input<boolean>;
    /**
     * Whether the created graph supports the cross-AZ mode. The default value is false.
     */
    enableMultiAz?: pulumi.Input<boolean>;
    /**
     * Whether to enable granular permission control for the created graph.
     */
    enableRbac?: pulumi.Input<boolean>;
    /**
     * Whether to enable data encryption The value can be true or false.
     */
    encryption?: pulumi.Input<inputs.GesGraphEncryption>;
    /**
     * The enterprise project ID.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Graph size type index.
     */
    graphSizeTypeIndex?: pulumi.Input<string>;
    /**
     * Whether to retain the backups of a graph after it is deleted.
     */
    keepBackup?: pulumi.Input<boolean>;
    ltsOperationTrace?: pulumi.Input<inputs.GesGraphLtsOperationTrace>;
    /**
     * The graph name.
     */
    name?: pulumi.Input<string>;
    /**
     * Floating IP address of a graph instance.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Graph product type
     */
    productType?: pulumi.Input<string>;
    /**
     * The information about public IP.
     */
    publicIp?: pulumi.Input<inputs.GesGraphPublicIp>;
    region?: pulumi.Input<string>;
    replication?: pulumi.Input<number>;
    /**
     * The security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Status of a graph.
     */
    status?: pulumi.Input<string>;
    /**
     * The subnet ID.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the graph.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Physical addresses of a graph instance for access from private networks.
     */
    trafficIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID type of vertices. This parameter is mandatory only for database edition graphs.
     */
    vertexIdType?: pulumi.Input<inputs.GesGraphVertexIdType>;
    /**
     * The VPC ID.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GesGraph resource.
 */
export interface GesGraphArgs {
    /**
     * Graph instance's CPU architecture type.
     */
    cpuArch?: pulumi.Input<string>;
    /**
     * Graph instance cryptography algorithm.
     */
    cryptAlgorithm: pulumi.Input<string>;
    /**
     * Whether to enable full-text index control for the created graph.
     */
    enableFullTextIndex?: pulumi.Input<boolean>;
    /**
     * Whether to enable the security mode. This mode may damage GES performance greatly.
     */
    enableHttps: pulumi.Input<boolean>;
    /**
     * Whether to enable HyG for the graph. This parameter is available for database edition graphs only.
     */
    enableHyg?: pulumi.Input<boolean>;
    /**
     * Whether the created graph supports the cross-AZ mode. The default value is false.
     */
    enableMultiAz?: pulumi.Input<boolean>;
    /**
     * Whether to enable granular permission control for the created graph.
     */
    enableRbac?: pulumi.Input<boolean>;
    /**
     * Whether to enable data encryption The value can be true or false.
     */
    encryption?: pulumi.Input<inputs.GesGraphEncryption>;
    /**
     * The enterprise project ID.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Graph size type index.
     */
    graphSizeTypeIndex: pulumi.Input<string>;
    /**
     * Whether to retain the backups of a graph after it is deleted.
     */
    keepBackup?: pulumi.Input<boolean>;
    ltsOperationTrace?: pulumi.Input<inputs.GesGraphLtsOperationTrace>;
    /**
     * The graph name.
     */
    name?: pulumi.Input<string>;
    /**
     * Graph product type
     */
    productType?: pulumi.Input<string>;
    /**
     * The information about public IP.
     */
    publicIp?: pulumi.Input<inputs.GesGraphPublicIp>;
    region?: pulumi.Input<string>;
    replication?: pulumi.Input<number>;
    /**
     * The security group ID.
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * The subnet ID.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the graph.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID type of vertices. This parameter is mandatory only for database edition graphs.
     */
    vertexIdType?: pulumi.Input<inputs.GesGraphVertexIdType>;
    /**
     * The VPC ID.
     */
    vpcId: pulumi.Input<string>;
}
