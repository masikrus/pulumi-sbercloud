// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CssCluster extends pulumi.CustomResource {
    /**
     * Get an existing CssCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CssClusterState, opts?: pulumi.CustomResourceOptions): CssCluster {
        return new CssCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cssCluster:CssCluster';

    /**
     * Returns true if the given object is an instance of CssCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CssCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CssCluster.__pulumiType;
    }

    public readonly backupStrategy!: pulumi.Output<outputs.CssClusterBackupStrategy | undefined>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly engineType!: pulumi.Output<string | undefined>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly expectNodeNum!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeConfig!: pulumi.Output<outputs.CssClusterNodeConfig>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.CssClusterNode[]>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a CssCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CssClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CssClusterArgs | CssClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CssClusterState | undefined;
            resourceInputs["backupStrategy"] = state ? state.backupStrategy : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engineType"] = state ? state.engineType : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["expectNodeNum"] = state ? state.expectNodeNum : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CssClusterArgs | undefined;
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.nodeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeConfig'");
            }
            resourceInputs["backupStrategy"] = args ? args.backupStrategy : undefined;
            resourceInputs["engineType"] = args ? args.engineType : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["expectNodeNum"] = args ? args.expectNodeNum : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CssCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CssCluster resources.
 */
export interface CssClusterState {
    backupStrategy?: pulumi.Input<inputs.CssClusterBackupStrategy>;
    created?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    engineType?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    expectNodeNum?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeConfig?: pulumi.Input<inputs.CssClusterNodeConfig>;
    nodes?: pulumi.Input<pulumi.Input<inputs.CssClusterNode>[]>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityMode?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CssCluster resource.
 */
export interface CssClusterArgs {
    backupStrategy?: pulumi.Input<inputs.CssClusterBackupStrategy>;
    engineType?: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    expectNodeNum?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeConfig: pulumi.Input<inputs.CssClusterNodeConfig>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityMode?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
