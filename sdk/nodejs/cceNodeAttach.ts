// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CceNodeAttach extends pulumi.CustomResource {
    /**
     * Get an existing CceNodeAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CceNodeAttachState, opts?: pulumi.CustomResourceOptions): CceNodeAttach {
        return new CceNodeAttach(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cceNodeAttach:CceNodeAttach';

    /**
     * Returns true if the given object is an instance of CceNodeAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CceNodeAttach {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CceNodeAttach.__pulumiType;
    }

    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly chargingMode!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly dataVolumes!: pulumi.Output<outputs.CceNodeAttachDataVolume[]>;
    public readonly dockerBaseSize!: pulumi.Output<number | undefined>;
    public /*out*/ readonly ecsGroupId!: pulumi.Output<string>;
    public /*out*/ readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly flavorId!: pulumi.Output<string>;
    public readonly hostnameConfig!: pulumi.Output<outputs.CceNodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly initializedConditions!: pulumi.Output<string[]>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lvmConfig!: pulumi.Output<string | undefined>;
    public readonly maxPods!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    public readonly nicMultiQueue!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly nicThreshold!: pulumi.Output<string | undefined>;
    public readonly os!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly postinstall!: pulumi.Output<string | undefined>;
    public readonly preinstall!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly rootVolumes!: pulumi.Output<outputs.CceNodeAttachRootVolume[]>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly serverId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<outputs.CceNodeAttachStorage | undefined>;
    public /*out*/ readonly subnetId!: pulumi.Output<string>;
    public readonly systemDiskKmsKeyId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taints!: pulumi.Output<outputs.CceNodeAttachTaint[] | undefined>;

    /**
     * Create a CceNodeAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CceNodeAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CceNodeAttachArgs | CceNodeAttachState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CceNodeAttachState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["dockerBaseSize"] = state ? state.dockerBaseSize : undefined;
            resourceInputs["ecsGroupId"] = state ? state.ecsGroupId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hostnameConfig"] = state ? state.hostnameConfig : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initializedConditions"] = state ? state.initializedConditions : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lvmConfig"] = state ? state.lvmConfig : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nicMultiQueue"] = state ? state.nicMultiQueue : undefined;
            resourceInputs["nicThreshold"] = state ? state.nicThreshold : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["postinstall"] = state ? state.postinstall : undefined;
            resourceInputs["preinstall"] = state ? state.preinstall : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolumes"] = state ? state.rootVolumes : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemDiskKmsKeyId"] = state ? state.systemDiskKmsKeyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as CceNodeAttachArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.os === undefined) && !opts.urn) {
                throw new Error("Missing required property 'os'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dockerBaseSize"] = args ? args.dockerBaseSize : undefined;
            resourceInputs["hostnameConfig"] = args ? args.hostnameConfig : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initializedConditions"] = args ? args.initializedConditions : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lvmConfig"] = args ? args.lvmConfig : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nicMultiQueue"] = args ? args.nicMultiQueue : undefined;
            resourceInputs["nicThreshold"] = args ? args.nicThreshold : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["postinstall"] = args ? args.postinstall : undefined;
            resourceInputs["preinstall"] = args ? args.preinstall : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["systemDiskKmsKeyId"] = args ? args.systemDiskKmsKeyId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["chargingMode"] = undefined /*out*/;
            resourceInputs["dataVolumes"] = undefined /*out*/;
            resourceInputs["ecsGroupId"] = undefined /*out*/;
            resourceInputs["enterpriseProjectId"] = undefined /*out*/;
            resourceInputs["flavorId"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["rootVolumes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CceNodeAttach.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CceNodeAttach resources.
 */
export interface CceNodeAttachState {
    availabilityZone?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.CceNodeAttachDataVolume>[]>;
    dockerBaseSize?: pulumi.Input<number>;
    ecsGroupId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.CceNodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    imageId?: pulumi.Input<string>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lvmConfig?: pulumi.Input<string>;
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicMultiQueue?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicThreshold?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postinstall?: pulumi.Input<string>;
    preinstall?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rootVolumes?: pulumi.Input<pulumi.Input<inputs.CceNodeAttachRootVolume>[]>;
    runtime?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.CceNodeAttachStorage>;
    subnetId?: pulumi.Input<string>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CceNodeAttachTaint>[]>;
}

/**
 * The set of arguments for constructing a CceNodeAttach resource.
 */
export interface CceNodeAttachArgs {
    clusterId: pulumi.Input<string>;
    dockerBaseSize?: pulumi.Input<number>;
    hostnameConfig?: pulumi.Input<inputs.CceNodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    imageId?: pulumi.Input<string>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lvmConfig?: pulumi.Input<string>;
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicMultiQueue?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicThreshold?: pulumi.Input<string>;
    os: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postinstall?: pulumi.Input<string>;
    preinstall?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.CceNodeAttachStorage>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CceNodeAttachTaint>[]>;
}
