// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CceNodePool extends pulumi.CustomResource {
    /**
     * Get an existing CceNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CceNodePoolState, opts?: pulumi.CustomResourceOptions): CceNodePool {
        return new CceNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cceNodePool:CceNodePool';

    /**
     * Returns true if the given object is an instance of CceNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CceNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CceNodePool.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    public /*out*/ readonly billingMode!: pulumi.Output<number>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly currentNodeCount!: pulumi.Output<number>;
    public readonly dataVolumes!: pulumi.Output<outputs.CceNodePoolDataVolume[]>;
    public readonly ecsGroupId!: pulumi.Output<string | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
     */
    public readonly extendParam!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly extendParams!: pulumi.Output<outputs.CceNodePoolExtendParams | undefined>;
    public readonly extensionScaleGroups!: pulumi.Output<outputs.CceNodePoolExtensionScaleGroup[] | undefined>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly hostnameConfig!: pulumi.Output<outputs.CceNodePoolHostnameConfig>;
    public readonly initialNodeCount!: pulumi.Output<number>;
    public readonly initializedConditions!: pulumi.Output<string[]>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly labelPolicyOnExistingNodes!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly maxNodeCount!: pulumi.Output<number | undefined>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    public readonly maxPods!: pulumi.Output<number>;
    public readonly minNodeCount!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly os!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly podSecurityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    public readonly postinstall!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    public readonly preinstall!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly rootVolume!: pulumi.Output<outputs.CceNodePoolRootVolume>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly scaleDownCooldownTime!: pulumi.Output<number | undefined>;
    public readonly scallEnable!: pulumi.Output<boolean | undefined>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<outputs.CceNodePoolStorage | undefined>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly subnetLists!: pulumi.Output<string[] | undefined>;
    public readonly tagPolicyOnExistingNodes!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taintPolicyOnExistingNodes!: pulumi.Output<string>;
    public readonly taints!: pulumi.Output<outputs.CceNodePoolTaint[] | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CceNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CceNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CceNodePoolArgs | CceNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CceNodePoolState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["currentNodeCount"] = state ? state.currentNodeCount : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["ecsGroupId"] = state ? state.ecsGroupId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = state ? state.extendParam : undefined;
            resourceInputs["extendParams"] = state ? state.extendParams : undefined;
            resourceInputs["extensionScaleGroups"] = state ? state.extensionScaleGroups : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hostnameConfig"] = state ? state.hostnameConfig : undefined;
            resourceInputs["initialNodeCount"] = state ? state.initialNodeCount : undefined;
            resourceInputs["initializedConditions"] = state ? state.initializedConditions : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["labelPolicyOnExistingNodes"] = state ? state.labelPolicyOnExistingNodes : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["podSecurityGroups"] = state ? state.podSecurityGroups : undefined;
            resourceInputs["postinstall"] = state ? state.postinstall : undefined;
            resourceInputs["preinstall"] = state ? state.preinstall : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolume"] = state ? state.rootVolume : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["scaleDownCooldownTime"] = state ? state.scaleDownCooldownTime : undefined;
            resourceInputs["scallEnable"] = state ? state.scallEnable : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["subnetLists"] = state ? state.subnetLists : undefined;
            resourceInputs["tagPolicyOnExistingNodes"] = state ? state.tagPolicyOnExistingNodes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taintPolicyOnExistingNodes"] = state ? state.taintPolicyOnExistingNodes : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CceNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.initialNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initialNodeCount'");
            }
            if ((!args || args.rootVolume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolume'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataVolumes"] = args ? args.dataVolumes : undefined;
            resourceInputs["ecsGroupId"] = args ? args.ecsGroupId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = args ? args.extendParam : undefined;
            resourceInputs["extendParams"] = args ? args.extendParams : undefined;
            resourceInputs["extensionScaleGroups"] = args ? args.extensionScaleGroups : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["hostnameConfig"] = args ? args.hostnameConfig : undefined;
            resourceInputs["initialNodeCount"] = args ? args.initialNodeCount : undefined;
            resourceInputs["initializedConditions"] = args ? args.initializedConditions : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["labelPolicyOnExistingNodes"] = args ? args.labelPolicyOnExistingNodes : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["podSecurityGroups"] = args ? args.podSecurityGroups : undefined;
            resourceInputs["postinstall"] = args ? args.postinstall : undefined;
            resourceInputs["preinstall"] = args ? args.preinstall : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rootVolume"] = args ? args.rootVolume : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["scaleDownCooldownTime"] = args ? args.scaleDownCooldownTime : undefined;
            resourceInputs["scallEnable"] = args ? args.scallEnable : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["subnetLists"] = args ? args.subnetLists : undefined;
            resourceInputs["tagPolicyOnExistingNodes"] = args ? args.tagPolicyOnExistingNodes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taintPolicyOnExistingNodes"] = args ? args.taintPolicyOnExistingNodes : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["billingMode"] = undefined /*out*/;
            resourceInputs["currentNodeCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CceNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CceNodePool resources.
 */
export interface CceNodePoolState {
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    currentNodeCount?: pulumi.Input<number>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.CceNodePoolDataVolume>[]>;
    ecsGroupId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extendParams?: pulumi.Input<inputs.CceNodePoolExtendParams>;
    extensionScaleGroups?: pulumi.Input<pulumi.Input<inputs.CceNodePoolExtensionScaleGroup>[]>;
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.CceNodePoolHostnameConfig>;
    initialNodeCount?: pulumi.Input<number>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    keyPair?: pulumi.Input<string>;
    labelPolicyOnExistingNodes?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxNodeCount?: pulumi.Input<number>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    maxPods?: pulumi.Input<number>;
    minNodeCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    podSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    preinstall?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    rootVolume?: pulumi.Input<inputs.CceNodePoolRootVolume>;
    runtime?: pulumi.Input<string>;
    scaleDownCooldownTime?: pulumi.Input<number>;
    scallEnable?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.CceNodePoolStorage>;
    subnetId?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<string>[]>;
    tagPolicyOnExistingNodes?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taintPolicyOnExistingNodes?: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.CceNodePoolTaint>[]>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CceNodePool resource.
 */
export interface CceNodePoolArgs {
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.CceNodePoolDataVolume>[]>;
    ecsGroupId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extendParams?: pulumi.Input<inputs.CceNodePoolExtendParams>;
    extensionScaleGroups?: pulumi.Input<pulumi.Input<inputs.CceNodePoolExtensionScaleGroup>[]>;
    flavorId: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.CceNodePoolHostnameConfig>;
    initialNodeCount: pulumi.Input<number>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    keyPair?: pulumi.Input<string>;
    labelPolicyOnExistingNodes?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxNodeCount?: pulumi.Input<number>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    maxPods?: pulumi.Input<number>;
    minNodeCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    podSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    preinstall?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    rootVolume: pulumi.Input<inputs.CceNodePoolRootVolume>;
    runtime?: pulumi.Input<string>;
    scaleDownCooldownTime?: pulumi.Input<number>;
    scallEnable?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    storage?: pulumi.Input<inputs.CceNodePoolStorage>;
    subnetId?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<string>[]>;
    tagPolicyOnExistingNodes?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taintPolicyOnExistingNodes?: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.CceNodePoolTaint>[]>;
    type?: pulumi.Input<string>;
}
