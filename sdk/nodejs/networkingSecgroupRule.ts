// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkingSecgroupRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingSecgroupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingSecgroupRuleState, opts?: pulumi.CustomResourceOptions): NetworkingSecgroupRule {
        return new NetworkingSecgroupRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/networkingSecgroupRule:NetworkingSecgroupRule';

    /**
     * Returns true if the given object is an instance of NetworkingSecgroupRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingSecgroupRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingSecgroupRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly direction!: pulumi.Output<string>;
    public readonly ethertype!: pulumi.Output<string>;
    public readonly portRangeMax!: pulumi.Output<number>;
    public readonly portRangeMin!: pulumi.Output<number>;
    public readonly ports!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly remoteAddressGroupId!: pulumi.Output<string>;
    public readonly remoteGroupId!: pulumi.Output<string>;
    public readonly remoteIpPrefix!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;

    /**
     * Create a NetworkingSecgroupRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingSecgroupRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingSecgroupRuleArgs | NetworkingSecgroupRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingSecgroupRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["ethertype"] = state ? state.ethertype : undefined;
            resourceInputs["portRangeMax"] = state ? state.portRangeMax : undefined;
            resourceInputs["portRangeMin"] = state ? state.portRangeMin : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["remoteAddressGroupId"] = state ? state.remoteAddressGroupId : undefined;
            resourceInputs["remoteGroupId"] = state ? state.remoteGroupId : undefined;
            resourceInputs["remoteIpPrefix"] = state ? state.remoteIpPrefix : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
        } else {
            const args = argsOrState as NetworkingSecgroupRuleArgs | undefined;
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.ethertype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ethertype'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["ethertype"] = args ? args.ethertype : undefined;
            resourceInputs["portRangeMax"] = args ? args.portRangeMax : undefined;
            resourceInputs["portRangeMin"] = args ? args.portRangeMin : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["remoteAddressGroupId"] = args ? args.remoteAddressGroupId : undefined;
            resourceInputs["remoteGroupId"] = args ? args.remoteGroupId : undefined;
            resourceInputs["remoteIpPrefix"] = args ? args.remoteIpPrefix : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingSecgroupRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkingSecgroupRule resources.
 */
export interface NetworkingSecgroupRuleState {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    ethertype?: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    ports?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteAddressGroupId?: pulumi.Input<string>;
    remoteGroupId?: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkingSecgroupRule resource.
 */
export interface NetworkingSecgroupRuleArgs {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    direction: pulumi.Input<string>;
    ethertype: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    ports?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteAddressGroupId?: pulumi.Input<string>;
    remoteGroupId?: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
}
