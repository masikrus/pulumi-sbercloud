// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CesAlarmrule extends pulumi.CustomResource {
    /**
     * Get an existing CesAlarmrule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CesAlarmruleState, opts?: pulumi.CustomResourceOptions): CesAlarmrule {
        return new CesAlarmrule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cesAlarmrule:CesAlarmrule';

    /**
     * Returns true if the given object is an instance of CesAlarmrule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CesAlarmrule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CesAlarmrule.__pulumiType;
    }

    public readonly alarmActionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly alarmActions!: pulumi.Output<outputs.CesAlarmruleAlarmAction[] | undefined>;
    public readonly alarmDescription!: pulumi.Output<string | undefined>;
    public readonly alarmEnabled!: pulumi.Output<boolean | undefined>;
    public readonly alarmLevel!: pulumi.Output<number | undefined>;
    public readonly alarmName!: pulumi.Output<string>;
    public /*out*/ readonly alarmState!: pulumi.Output<string>;
    public readonly alarmType!: pulumi.Output<string>;
    public readonly condition!: pulumi.Output<outputs.CesAlarmruleCondition>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * @deprecated insufficientdata_actions is deprecated
     */
    public readonly insufficientdataActions!: pulumi.Output<outputs.CesAlarmruleInsufficientdataAction[] | undefined>;
    public readonly metric!: pulumi.Output<outputs.CesAlarmruleMetric>;
    public readonly okActions!: pulumi.Output<outputs.CesAlarmruleOkAction[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly updateTime!: pulumi.Output<number>;

    /**
     * Create a CesAlarmrule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CesAlarmruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CesAlarmruleArgs | CesAlarmruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CesAlarmruleState | undefined;
            resourceInputs["alarmActionEnabled"] = state ? state.alarmActionEnabled : undefined;
            resourceInputs["alarmActions"] = state ? state.alarmActions : undefined;
            resourceInputs["alarmDescription"] = state ? state.alarmDescription : undefined;
            resourceInputs["alarmEnabled"] = state ? state.alarmEnabled : undefined;
            resourceInputs["alarmLevel"] = state ? state.alarmLevel : undefined;
            resourceInputs["alarmName"] = state ? state.alarmName : undefined;
            resourceInputs["alarmState"] = state ? state.alarmState : undefined;
            resourceInputs["alarmType"] = state ? state.alarmType : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["insufficientdataActions"] = state ? state.insufficientdataActions : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["okActions"] = state ? state.okActions : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CesAlarmruleArgs | undefined;
            if ((!args || args.alarmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmName'");
            }
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            resourceInputs["alarmActionEnabled"] = args ? args.alarmActionEnabled : undefined;
            resourceInputs["alarmActions"] = args ? args.alarmActions : undefined;
            resourceInputs["alarmDescription"] = args ? args.alarmDescription : undefined;
            resourceInputs["alarmEnabled"] = args ? args.alarmEnabled : undefined;
            resourceInputs["alarmLevel"] = args ? args.alarmLevel : undefined;
            resourceInputs["alarmName"] = args ? args.alarmName : undefined;
            resourceInputs["alarmType"] = args ? args.alarmType : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["insufficientdataActions"] = args ? args.insufficientdataActions : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["okActions"] = args ? args.okActions : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["alarmState"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CesAlarmrule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CesAlarmrule resources.
 */
export interface CesAlarmruleState {
    alarmActionEnabled?: pulumi.Input<boolean>;
    alarmActions?: pulumi.Input<pulumi.Input<inputs.CesAlarmruleAlarmAction>[]>;
    alarmDescription?: pulumi.Input<string>;
    alarmEnabled?: pulumi.Input<boolean>;
    alarmLevel?: pulumi.Input<number>;
    alarmName?: pulumi.Input<string>;
    alarmState?: pulumi.Input<string>;
    alarmType?: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.CesAlarmruleCondition>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * @deprecated insufficientdata_actions is deprecated
     */
    insufficientdataActions?: pulumi.Input<pulumi.Input<inputs.CesAlarmruleInsufficientdataAction>[]>;
    metric?: pulumi.Input<inputs.CesAlarmruleMetric>;
    okActions?: pulumi.Input<pulumi.Input<inputs.CesAlarmruleOkAction>[]>;
    region?: pulumi.Input<string>;
    updateTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CesAlarmrule resource.
 */
export interface CesAlarmruleArgs {
    alarmActionEnabled?: pulumi.Input<boolean>;
    alarmActions?: pulumi.Input<pulumi.Input<inputs.CesAlarmruleAlarmAction>[]>;
    alarmDescription?: pulumi.Input<string>;
    alarmEnabled?: pulumi.Input<boolean>;
    alarmLevel?: pulumi.Input<number>;
    alarmName: pulumi.Input<string>;
    alarmType?: pulumi.Input<string>;
    condition: pulumi.Input<inputs.CesAlarmruleCondition>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * @deprecated insufficientdata_actions is deprecated
     */
    insufficientdataActions?: pulumi.Input<pulumi.Input<inputs.CesAlarmruleInsufficientdataAction>[]>;
    metric: pulumi.Input<inputs.CesAlarmruleMetric>;
    okActions?: pulumi.Input<pulumi.Input<inputs.CesAlarmruleOkAction>[]>;
    region?: pulumi.Input<string>;
}
