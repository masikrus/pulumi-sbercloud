// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KmsKey extends pulumi.CustomResource {
    /**
     * Get an existing KmsKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsKeyState, opts?: pulumi.CustomResourceOptions): KmsKey {
        return new KmsKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/kmsKey:KmsKey';

    /**
     * Returns true if the given object is an instance of KmsKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsKey.__pulumiType;
    }

    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public /*out*/ readonly defaultKeyFlag!: pulumi.Output<string>;
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly expirationTime!: pulumi.Output<string>;
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    public readonly keyAlgorithm!: pulumi.Output<string>;
    public readonly keyAlias!: pulumi.Output<string>;
    public readonly keyDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    public /*out*/ readonly keyState!: pulumi.Output<string>;
    public readonly keyUsage!: pulumi.Output<string>;
    public readonly keystoreId!: pulumi.Output<string>;
    public readonly origin!: pulumi.Output<string>;
    public readonly pendingDays!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly rotationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly rotationInterval!: pulumi.Output<number>;
    public /*out*/ readonly rotationNumber!: pulumi.Output<number>;
    public /*out*/ readonly scheduledDeletionDate!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a KmsKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsKeyArgs | KmsKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsKeyState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["defaultKeyFlag"] = state ? state.defaultKeyFlag : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["keyAlias"] = state ? state.keyAlias : undefined;
            resourceInputs["keyDescription"] = state ? state.keyDescription : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyState"] = state ? state.keyState : undefined;
            resourceInputs["keyUsage"] = state ? state.keyUsage : undefined;
            resourceInputs["keystoreId"] = state ? state.keystoreId : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["pendingDays"] = state ? state.pendingDays : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rotationEnabled"] = state ? state.rotationEnabled : undefined;
            resourceInputs["rotationInterval"] = state ? state.rotationInterval : undefined;
            resourceInputs["rotationNumber"] = state ? state.rotationNumber : undefined;
            resourceInputs["scheduledDeletionDate"] = state ? state.scheduledDeletionDate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KmsKeyArgs | undefined;
            if ((!args || args.keyAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyAlias'");
            }
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["keyAlias"] = args ? args.keyAlias : undefined;
            resourceInputs["keyDescription"] = args ? args.keyDescription : undefined;
            resourceInputs["keyUsage"] = args ? args.keyUsage : undefined;
            resourceInputs["keystoreId"] = args ? args.keystoreId : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["pendingDays"] = args ? args.pendingDays : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rotationEnabled"] = args ? args.rotationEnabled : undefined;
            resourceInputs["rotationInterval"] = args ? args.rotationInterval : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["defaultKeyFlag"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["expirationTime"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["keyState"] = undefined /*out*/;
            resourceInputs["rotationNumber"] = undefined /*out*/;
            resourceInputs["scheduledDeletionDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KmsKey resources.
 */
export interface KmsKeyState {
    creationDate?: pulumi.Input<string>;
    defaultKeyFlag?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    expirationTime?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    keyAlgorithm?: pulumi.Input<string>;
    keyAlias?: pulumi.Input<string>;
    keyDescription?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    keyState?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    keystoreId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    pendingDays?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rotationEnabled?: pulumi.Input<boolean>;
    rotationInterval?: pulumi.Input<number>;
    rotationNumber?: pulumi.Input<number>;
    scheduledDeletionDate?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a KmsKey resource.
 */
export interface KmsKeyArgs {
    enterpriseProjectId?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    keyAlgorithm?: pulumi.Input<string>;
    keyAlias: pulumi.Input<string>;
    keyDescription?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    keystoreId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    pendingDays?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rotationEnabled?: pulumi.Input<boolean>;
    rotationInterval?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
