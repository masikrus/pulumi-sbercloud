// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EvsVolume extends pulumi.CustomResource {
    /**
     * Get an existing EvsVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EvsVolumeState, opts?: pulumi.CustomResourceOptions): EvsVolume {
        return new EvsVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/evsVolume:EvsVolume';

    /**
     * Returns true if the given object is an instance of EvsVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EvsVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EvsVolume.__pulumiType;
    }

    public /*out*/ readonly attachments!: pulumi.Output<outputs.EvsVolumeAttachment[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly backupId!: pulumi.Output<string | undefined>;
    public readonly cascade!: pulumi.Output<boolean | undefined>;
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly dedicatedStorageId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dedicatedStorageName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceType!: pulumi.Output<string | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly iops!: pulumi.Output<number>;
    public readonly kmsId!: pulumi.Output<string | undefined>;
    public readonly multiattach!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly serverId!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly throughput!: pulumi.Output<number>;
    public readonly volumeType!: pulumi.Output<string>;
    public /*out*/ readonly wwn!: pulumi.Output<string>;

    /**
     * Create a EvsVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EvsVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EvsVolumeArgs | EvsVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EvsVolumeState | undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["cascade"] = state ? state.cascade : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["dedicatedStorageId"] = state ? state.dedicatedStorageId : undefined;
            resourceInputs["dedicatedStorageName"] = state ? state.dedicatedStorageName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsId"] = state ? state.kmsId : undefined;
            resourceInputs["multiattach"] = state ? state.multiattach : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
            resourceInputs["wwn"] = state ? state.wwn : undefined;
        } else {
            const args = argsOrState as EvsVolumeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.volumeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeType'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["cascade"] = args ? args.cascade : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["dedicatedStorageId"] = args ? args.dedicatedStorageId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsId"] = args ? args.kmsId : undefined;
            resourceInputs["multiattach"] = args ? args.multiattach : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["attachments"] = undefined /*out*/;
            resourceInputs["dedicatedStorageName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EvsVolume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EvsVolume resources.
 */
export interface EvsVolumeState {
    attachments?: pulumi.Input<pulumi.Input<inputs.EvsVolumeAttachment>[]>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    cascade?: pulumi.Input<boolean>;
    chargingMode?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    dedicatedStorageName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    kmsId?: pulumi.Input<string>;
    multiattach?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughput?: pulumi.Input<number>;
    volumeType?: pulumi.Input<string>;
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EvsVolume resource.
 */
export interface EvsVolumeArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    cascade?: pulumi.Input<boolean>;
    chargingMode?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    kmsId?: pulumi.Input<string>;
    multiattach?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughput?: pulumi.Input<number>;
    volumeType: pulumi.Input<string>;
}
