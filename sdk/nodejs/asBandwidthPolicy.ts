// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AsBandwidthPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AsBandwidthPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AsBandwidthPolicyState, opts?: pulumi.CustomResourceOptions): AsBandwidthPolicy {
        return new AsBandwidthPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/asBandwidthPolicy:AsBandwidthPolicy';

    /**
     * Returns true if the given object is an instance of AsBandwidthPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AsBandwidthPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AsBandwidthPolicy.__pulumiType;
    }

    /**
     * Specifies the alarm rule ID.
     */
    public readonly alarmId!: pulumi.Output<string>;
    /**
     * Specifies the scaling bandwidth ID.
     */
    public readonly bandwidthId!: pulumi.Output<string>;
    /**
     * Specifies the cooldown period (in seconds).
     */
    public readonly coolDownTime!: pulumi.Output<number>;
    /**
     * Specifies the description of the AS policy.
     */
    public readonly description!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly scalingPolicyAction!: pulumi.Output<outputs.AsBandwidthPolicyScalingPolicyAction>;
    /**
     * Specifies the AS policy name.
     */
    public readonly scalingPolicyName!: pulumi.Output<string>;
    /**
     * Specifies the AS policy type.
     */
    public readonly scalingPolicyType!: pulumi.Output<string>;
    /**
     * the scaling resource type.
     */
    public /*out*/ readonly scalingResourceType!: pulumi.Output<string>;
    public readonly scheduledPolicy!: pulumi.Output<outputs.AsBandwidthPolicyScheduledPolicy>;
    /**
     * the AS policy status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AsBandwidthPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AsBandwidthPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AsBandwidthPolicyArgs | AsBandwidthPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AsBandwidthPolicyState | undefined;
            resourceInputs["alarmId"] = state ? state.alarmId : undefined;
            resourceInputs["bandwidthId"] = state ? state.bandwidthId : undefined;
            resourceInputs["coolDownTime"] = state ? state.coolDownTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scalingPolicyAction"] = state ? state.scalingPolicyAction : undefined;
            resourceInputs["scalingPolicyName"] = state ? state.scalingPolicyName : undefined;
            resourceInputs["scalingPolicyType"] = state ? state.scalingPolicyType : undefined;
            resourceInputs["scalingResourceType"] = state ? state.scalingResourceType : undefined;
            resourceInputs["scheduledPolicy"] = state ? state.scheduledPolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AsBandwidthPolicyArgs | undefined;
            if ((!args || args.bandwidthId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidthId'");
            }
            if ((!args || args.scalingPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyName'");
            }
            if ((!args || args.scalingPolicyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyType'");
            }
            resourceInputs["alarmId"] = args ? args.alarmId : undefined;
            resourceInputs["bandwidthId"] = args ? args.bandwidthId : undefined;
            resourceInputs["coolDownTime"] = args ? args.coolDownTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scalingPolicyAction"] = args ? args.scalingPolicyAction : undefined;
            resourceInputs["scalingPolicyName"] = args ? args.scalingPolicyName : undefined;
            resourceInputs["scalingPolicyType"] = args ? args.scalingPolicyType : undefined;
            resourceInputs["scheduledPolicy"] = args ? args.scheduledPolicy : undefined;
            resourceInputs["scalingResourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AsBandwidthPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AsBandwidthPolicy resources.
 */
export interface AsBandwidthPolicyState {
    /**
     * Specifies the alarm rule ID.
     */
    alarmId?: pulumi.Input<string>;
    /**
     * Specifies the scaling bandwidth ID.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * Specifies the cooldown period (in seconds).
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * Specifies the description of the AS policy.
     */
    description?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    scalingPolicyAction?: pulumi.Input<inputs.AsBandwidthPolicyScalingPolicyAction>;
    /**
     * Specifies the AS policy name.
     */
    scalingPolicyName?: pulumi.Input<string>;
    /**
     * Specifies the AS policy type.
     */
    scalingPolicyType?: pulumi.Input<string>;
    /**
     * the scaling resource type.
     */
    scalingResourceType?: pulumi.Input<string>;
    scheduledPolicy?: pulumi.Input<inputs.AsBandwidthPolicyScheduledPolicy>;
    /**
     * the AS policy status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AsBandwidthPolicy resource.
 */
export interface AsBandwidthPolicyArgs {
    /**
     * Specifies the alarm rule ID.
     */
    alarmId?: pulumi.Input<string>;
    /**
     * Specifies the scaling bandwidth ID.
     */
    bandwidthId: pulumi.Input<string>;
    /**
     * Specifies the cooldown period (in seconds).
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * Specifies the description of the AS policy.
     */
    description?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    scalingPolicyAction?: pulumi.Input<inputs.AsBandwidthPolicyScalingPolicyAction>;
    /**
     * Specifies the AS policy name.
     */
    scalingPolicyName: pulumi.Input<string>;
    /**
     * Specifies the AS policy type.
     */
    scalingPolicyType: pulumi.Input<string>;
    scheduledPolicy?: pulumi.Input<inputs.AsBandwidthPolicyScheduledPolicy>;
}
