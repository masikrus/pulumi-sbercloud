// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ElbMember extends pulumi.CustomResource {
    /**
     * Get an existing ElbMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbMemberState, opts?: pulumi.CustomResourceOptions): ElbMember {
        return new ElbMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/elbMember:ElbMember';

    /**
     * Returns true if the given object is an instance of ElbMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbMember.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly poolId!: pulumi.Output<string>;
    public readonly protocolPort!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    /**
     * The IPv4 or IPv6 subnet ID of the subnet in which to access the member
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a ElbMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbMemberArgs | ElbMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbMemberState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["protocolPort"] = state ? state.protocolPort : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ElbMemberArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["protocolPort"] = args ? args.protocolPort : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbMember resources.
 */
export interface ElbMemberState {
    address?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    protocolPort?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    /**
     * The IPv4 or IPv6 subnet ID of the subnet in which to access the member
     */
    subnetId?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ElbMember resource.
 */
export interface ElbMemberArgs {
    address: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    poolId: pulumi.Input<string>;
    protocolPort?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    /**
     * The IPv4 or IPv6 subnet ID of the subnet in which to access the member
     */
    subnetId?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
