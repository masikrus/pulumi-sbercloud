// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AsConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AsConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AsConfigurationState, opts?: pulumi.CustomResourceOptions): AsConfiguration {
        return new AsConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/asConfiguration:AsConfiguration';

    /**
     * Returns true if the given object is an instance of AsConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AsConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AsConfiguration.__pulumiType;
    }

    public readonly instanceConfig!: pulumi.Output<outputs.AsConfigurationInstanceConfig>;
    public readonly region!: pulumi.Output<string>;
    public readonly scalingConfigurationName!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AsConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AsConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AsConfigurationArgs | AsConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AsConfigurationState | undefined;
            resourceInputs["instanceConfig"] = state ? state.instanceConfig : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scalingConfigurationName"] = state ? state.scalingConfigurationName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AsConfigurationArgs | undefined;
            if ((!args || args.instanceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceConfig'");
            }
            if ((!args || args.scalingConfigurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingConfigurationName'");
            }
            resourceInputs["instanceConfig"] = args ? args.instanceConfig : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scalingConfigurationName"] = args ? args.scalingConfigurationName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AsConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AsConfiguration resources.
 */
export interface AsConfigurationState {
    instanceConfig?: pulumi.Input<inputs.AsConfigurationInstanceConfig>;
    region?: pulumi.Input<string>;
    scalingConfigurationName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AsConfiguration resource.
 */
export interface AsConfigurationArgs {
    instanceConfig: pulumi.Input<inputs.AsConfigurationInstanceConfig>;
    region?: pulumi.Input<string>;
    scalingConfigurationName: pulumi.Input<string>;
}
