// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DliPackage extends pulumi.CustomResource {
    /**
     * Get an existing DliPackage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DliPackageState, opts?: pulumi.CustomResourceOptions): DliPackage {
        return new DliPackage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dliPackage:DliPackage';

    /**
     * Returns true if the given object is an instance of DliPackage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DliPackage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DliPackage.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly isAsync!: pulumi.Output<boolean>;
    public /*out*/ readonly objectName!: pulumi.Output<string>;
    public readonly objectPath!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a DliPackage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DliPackageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DliPackageArgs | DliPackageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DliPackageState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["isAsync"] = state ? state.isAsync : undefined;
            resourceInputs["objectName"] = state ? state.objectName : undefined;
            resourceInputs["objectPath"] = state ? state.objectPath : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as DliPackageArgs | undefined;
            if ((!args || args.objectPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectPath'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["isAsync"] = args ? args.isAsync : undefined;
            resourceInputs["objectPath"] = args ? args.objectPath : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["objectName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DliPackage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DliPackage resources.
 */
export interface DliPackageState {
    createdAt?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    isAsync?: pulumi.Input<boolean>;
    objectName?: pulumi.Input<string>;
    objectPath?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DliPackage resource.
 */
export interface DliPackageArgs {
    groupName?: pulumi.Input<string>;
    isAsync?: pulumi.Input<boolean>;
    objectPath: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}
