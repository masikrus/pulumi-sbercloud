// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CtsDataTracker extends pulumi.CustomResource {
    /**
     * Get an existing CtsDataTracker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CtsDataTrackerState, opts?: pulumi.CustomResourceOptions): CtsDataTracker {
        return new CtsDataTracker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/ctsDataTracker:CtsDataTracker';

    /**
     * Returns true if the given object is an instance of CtsDataTracker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CtsDataTracker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CtsDataTracker.__pulumiType;
    }

    public /*out*/ readonly agencyName!: pulumi.Output<string>;
    public readonly bucketName!: pulumi.Output<string | undefined>;
    public readonly compressType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public readonly dataBucket!: pulumi.Output<string>;
    public readonly dataOperations!: pulumi.Output<string[]>;
    public /*out*/ readonly detail!: pulumi.Output<string>;
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly filePrefix!: pulumi.Output<string | undefined>;
    public /*out*/ readonly groupId!: pulumi.Output<string>;
    public /*out*/ readonly isAuthorizedBucket!: pulumi.Output<boolean>;
    public readonly isSortByService!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly logGroupName!: pulumi.Output<string>;
    public /*out*/ readonly logTopicName!: pulumi.Output<string>;
    public readonly ltsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly obsRetentionPeriod!: pulumi.Output<number | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly streamId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly transferEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly validateFile!: pulumi.Output<boolean | undefined>;

    /**
     * Create a CtsDataTracker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CtsDataTrackerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CtsDataTrackerArgs | CtsDataTrackerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CtsDataTrackerState | undefined;
            resourceInputs["agencyName"] = state ? state.agencyName : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["compressType"] = state ? state.compressType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataBucket"] = state ? state.dataBucket : undefined;
            resourceInputs["dataOperations"] = state ? state.dataOperations : undefined;
            resourceInputs["detail"] = state ? state.detail : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filePrefix"] = state ? state.filePrefix : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["isAuthorizedBucket"] = state ? state.isAuthorizedBucket : undefined;
            resourceInputs["isSortByService"] = state ? state.isSortByService : undefined;
            resourceInputs["logGroupName"] = state ? state.logGroupName : undefined;
            resourceInputs["logTopicName"] = state ? state.logTopicName : undefined;
            resourceInputs["ltsEnabled"] = state ? state.ltsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["obsRetentionPeriod"] = state ? state.obsRetentionPeriod : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transferEnabled"] = state ? state.transferEnabled : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validateFile"] = state ? state.validateFile : undefined;
        } else {
            const args = argsOrState as CtsDataTrackerArgs | undefined;
            if ((!args || args.dataBucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataBucket'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["compressType"] = args ? args.compressType : undefined;
            resourceInputs["dataBucket"] = args ? args.dataBucket : undefined;
            resourceInputs["dataOperations"] = args ? args.dataOperations : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filePrefix"] = args ? args.filePrefix : undefined;
            resourceInputs["isSortByService"] = args ? args.isSortByService : undefined;
            resourceInputs["ltsEnabled"] = args ? args.ltsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["obsRetentionPeriod"] = args ? args.obsRetentionPeriod : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["validateFile"] = args ? args.validateFile : undefined;
            resourceInputs["agencyName"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["detail"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["isAuthorizedBucket"] = undefined /*out*/;
            resourceInputs["logGroupName"] = undefined /*out*/;
            resourceInputs["logTopicName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["streamId"] = undefined /*out*/;
            resourceInputs["transferEnabled"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CtsDataTracker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CtsDataTracker resources.
 */
export interface CtsDataTrackerState {
    agencyName?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    compressType?: pulumi.Input<string>;
    createTime?: pulumi.Input<number>;
    dataBucket?: pulumi.Input<string>;
    dataOperations?: pulumi.Input<pulumi.Input<string>[]>;
    detail?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    filePrefix?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    isAuthorizedBucket?: pulumi.Input<boolean>;
    isSortByService?: pulumi.Input<boolean>;
    logGroupName?: pulumi.Input<string>;
    logTopicName?: pulumi.Input<string>;
    ltsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    obsRetentionPeriod?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transferEnabled?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    validateFile?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CtsDataTracker resource.
 */
export interface CtsDataTrackerArgs {
    bucketName?: pulumi.Input<string>;
    compressType?: pulumi.Input<string>;
    dataBucket: pulumi.Input<string>;
    dataOperations?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    filePrefix?: pulumi.Input<string>;
    isSortByService?: pulumi.Input<boolean>;
    ltsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    obsRetentionPeriod?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    validateFile?: pulumi.Input<boolean>;
}
