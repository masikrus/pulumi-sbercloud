// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsParametergroup extends pulumi.CustomResource {
    /**
     * Get an existing RdsParametergroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsParametergroupState, opts?: pulumi.CustomResourceOptions): RdsParametergroup {
        return new RdsParametergroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/rdsParametergroup:RdsParametergroup';

    /**
     * Returns true if the given object is an instance of RdsParametergroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsParametergroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsParametergroup.__pulumiType;
    }

    public /*out*/ readonly configurationParameters!: pulumi.Output<outputs.RdsParametergroupConfigurationParameter[]>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly datastore!: pulumi.Output<outputs.RdsParametergroupDatastore>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly values!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a RdsParametergroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsParametergroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsParametergroupArgs | RdsParametergroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsParametergroupState | undefined;
            resourceInputs["configurationParameters"] = state ? state.configurationParameters : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["datastore"] = state ? state.datastore : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as RdsParametergroupArgs | undefined;
            if ((!args || args.datastore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            resourceInputs["datastore"] = args ? args.datastore : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["configurationParameters"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsParametergroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RdsParametergroup resources.
 */
export interface RdsParametergroupState {
    configurationParameters?: pulumi.Input<pulumi.Input<inputs.RdsParametergroupConfigurationParameter>[]>;
    createdAt?: pulumi.Input<string>;
    datastore?: pulumi.Input<inputs.RdsParametergroupDatastore>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RdsParametergroup resource.
 */
export interface RdsParametergroupArgs {
    datastore: pulumi.Input<inputs.RdsParametergroupDatastore>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
