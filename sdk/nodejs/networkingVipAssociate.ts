// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkingVipAssociate extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingVipAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingVipAssociateState, opts?: pulumi.CustomResourceOptions): NetworkingVipAssociate {
        return new NetworkingVipAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/networkingVipAssociate:NetworkingVipAssociate';

    /**
     * Returns true if the given object is an instance of NetworkingVipAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingVipAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingVipAssociate.__pulumiType;
    }

    public /*out*/ readonly ipAddresses!: pulumi.Output<string[]>;
    public readonly portIds!: pulumi.Output<string[]>;
    public readonly region!: pulumi.Output<string>;
    public readonly vipId!: pulumi.Output<string>;
    public /*out*/ readonly vipIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly vipSubnetId!: pulumi.Output<string>;

    /**
     * Create a NetworkingVipAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingVipAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingVipAssociateArgs | NetworkingVipAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingVipAssociateState | undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["portIds"] = state ? state.portIds : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["vipId"] = state ? state.vipId : undefined;
            resourceInputs["vipIpAddress"] = state ? state.vipIpAddress : undefined;
            resourceInputs["vipSubnetId"] = state ? state.vipSubnetId : undefined;
        } else {
            const args = argsOrState as NetworkingVipAssociateArgs | undefined;
            if ((!args || args.portIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portIds'");
            }
            if ((!args || args.vipId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vipId'");
            }
            resourceInputs["portIds"] = args ? args.portIds : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["vipId"] = args ? args.vipId : undefined;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["vipIpAddress"] = undefined /*out*/;
            resourceInputs["vipSubnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingVipAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkingVipAssociate resources.
 */
export interface NetworkingVipAssociateState {
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    portIds?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    vipId?: pulumi.Input<string>;
    vipIpAddress?: pulumi.Input<string>;
    vipSubnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkingVipAssociate resource.
 */
export interface NetworkingVipAssociateArgs {
    portIds: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    vipId: pulumi.Input<string>;
}
