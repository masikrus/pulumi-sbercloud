// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KpsKeypair extends pulumi.CustomResource {
    /**
     * Get an existing KpsKeypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KpsKeypairState, opts?: pulumi.CustomResourceOptions): KpsKeypair {
        return new KpsKeypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/kpsKeypair:KpsKeypair';

    /**
     * Returns true if the given object is an instance of KpsKeypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KpsKeypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KpsKeypair.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly encryptionType!: pulumi.Output<string>;
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    public /*out*/ readonly isManaged!: pulumi.Output<boolean>;
    public readonly keyFile!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly kmsKeyName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public readonly publicKey!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a KpsKeypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KpsKeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KpsKeypairArgs | KpsKeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KpsKeypairState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["isManaged"] = state ? state.isManaged : undefined;
            resourceInputs["keyFile"] = state ? state.keyFile : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["kmsKeyName"] = state ? state.kmsKeyName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as KpsKeypairArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["keyFile"] = args ? args.keyFile : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["kmsKeyName"] = args ? args.kmsKeyName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["isManaged"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KpsKeypair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KpsKeypair resources.
 */
export interface KpsKeypairState {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    isManaged?: pulumi.Input<boolean>;
    keyFile?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KpsKeypair resource.
 */
export interface KpsKeypairArgs {
    description?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    keyFile?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}
