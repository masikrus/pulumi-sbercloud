// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DisStream extends pulumi.CustomResource {
    /**
     * Get an existing DisStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DisStreamState, opts?: pulumi.CustomResourceOptions): DisStream {
        return new DisStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/disStream:DisStream';

    /**
     * Returns true if the given object is an instance of DisStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DisStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DisStream.__pulumiType;
    }

    public readonly autoScaleMaxPartitionCount!: pulumi.Output<number>;
    public readonly autoScaleMinPartitionCount!: pulumi.Output<number>;
    public readonly compressionFormat!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<number>;
    public readonly csvDelimiter!: pulumi.Output<string>;
    public readonly dataSchema!: pulumi.Output<string>;
    public readonly dataType!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly partitionCount!: pulumi.Output<number>;
    public /*out*/ readonly partitions!: pulumi.Output<outputs.DisStreamPartition[]>;
    public /*out*/ readonly readablePartitionCount!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly retentionPeriod!: pulumi.Output<number | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly streamId!: pulumi.Output<string>;
    public readonly streamName!: pulumi.Output<string>;
    public readonly streamType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly writablePartitionCount!: pulumi.Output<number>;

    /**
     * Create a DisStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DisStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DisStreamArgs | DisStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DisStreamState | undefined;
            resourceInputs["autoScaleMaxPartitionCount"] = state ? state.autoScaleMaxPartitionCount : undefined;
            resourceInputs["autoScaleMinPartitionCount"] = state ? state.autoScaleMinPartitionCount : undefined;
            resourceInputs["compressionFormat"] = state ? state.compressionFormat : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["csvDelimiter"] = state ? state.csvDelimiter : undefined;
            resourceInputs["dataSchema"] = state ? state.dataSchema : undefined;
            resourceInputs["dataType"] = state ? state.dataType : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["partitionCount"] = state ? state.partitionCount : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["readablePartitionCount"] = state ? state.readablePartitionCount : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
            resourceInputs["streamName"] = state ? state.streamName : undefined;
            resourceInputs["streamType"] = state ? state.streamType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["writablePartitionCount"] = state ? state.writablePartitionCount : undefined;
        } else {
            const args = argsOrState as DisStreamArgs | undefined;
            if ((!args || args.partitionCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionCount'");
            }
            if ((!args || args.streamName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamName'");
            }
            resourceInputs["autoScaleMaxPartitionCount"] = args ? args.autoScaleMaxPartitionCount : undefined;
            resourceInputs["autoScaleMinPartitionCount"] = args ? args.autoScaleMinPartitionCount : undefined;
            resourceInputs["compressionFormat"] = args ? args.compressionFormat : undefined;
            resourceInputs["csvDelimiter"] = args ? args.csvDelimiter : undefined;
            resourceInputs["dataSchema"] = args ? args.dataSchema : undefined;
            resourceInputs["dataType"] = args ? args.dataType : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["partitionCount"] = args ? args.partitionCount : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["streamName"] = args ? args.streamName : undefined;
            resourceInputs["streamType"] = args ? args.streamType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["partitions"] = undefined /*out*/;
            resourceInputs["readablePartitionCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["streamId"] = undefined /*out*/;
            resourceInputs["writablePartitionCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DisStream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DisStream resources.
 */
export interface DisStreamState {
    autoScaleMaxPartitionCount?: pulumi.Input<number>;
    autoScaleMinPartitionCount?: pulumi.Input<number>;
    compressionFormat?: pulumi.Input<string>;
    created?: pulumi.Input<number>;
    csvDelimiter?: pulumi.Input<string>;
    dataSchema?: pulumi.Input<string>;
    dataType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    partitionCount?: pulumi.Input<number>;
    partitions?: pulumi.Input<pulumi.Input<inputs.DisStreamPartition>[]>;
    readablePartitionCount?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    streamId?: pulumi.Input<string>;
    streamName?: pulumi.Input<string>;
    streamType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    writablePartitionCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DisStream resource.
 */
export interface DisStreamArgs {
    autoScaleMaxPartitionCount?: pulumi.Input<number>;
    autoScaleMinPartitionCount?: pulumi.Input<number>;
    compressionFormat?: pulumi.Input<string>;
    csvDelimiter?: pulumi.Input<string>;
    dataSchema?: pulumi.Input<string>;
    dataType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    partitionCount: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    streamName: pulumi.Input<string>;
    streamType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
