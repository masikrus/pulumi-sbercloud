// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/natGateway:NatGateway")]
    public partial class NatGateway : global::Pulumi.CustomResource
    {
        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The order information of the NAT gateway.
        /// </summary>
        [Output("billingInfo")]
        public Output<string> BillingInfo { get; private set; } = null!;

        /// <summary>
        /// The bandwidth that the NAT gateway can receive or send per second.
        /// </summary>
        [Output("bpsMax")]
        public Output<int> BpsMax { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        /// <summary>
        /// The creation time of the NAT gateway.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the NAT gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The maximum number of DNAT rules on the NAT gateway.
        /// </summary>
        [Output("dnatRulesLimit")]
        public Output<int> DnatRulesLimit { get; private set; } = null!;

        /// <summary>
        /// The enterprise project ID of the NAT gateway.
        /// </summary>
        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        /// <summary>
        /// The NAT gateway name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The IP address used for the NG port of the NAT gateway.
        /// </summary>
        [Output("ngportIpAddress")]
        public Output<string> NgportIpAddress { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// The number of packets that the NAT gateway can receive or send per second.
        /// </summary>
        [Output("ppsMax")]
        public Output<int> PpsMax { get; private set; } = null!;

        /// <summary>
        /// The region where the NAT gateway is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The session configuration of the NAT gateway.
        /// </summary>
        [Output("sessionConf")]
        public Output<Outputs.NatGatewaySessionConf> SessionConf { get; private set; } = null!;

        /// <summary>
        /// The maximum number of SNAT rules on the NAT gateway.
        /// </summary>
        [Output("snatRulePublicIpLimit")]
        public Output<int> SnatRulePublicIpLimit { get; private set; } = null!;

        /// <summary>
        /// The specification of the NAT gateway.
        /// </summary>
        [Output("spec")]
        public Output<string> Spec { get; private set; } = null!;

        /// <summary>
        /// The current status of the NAT gateway.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC to which the NAT gateway belongs.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a NatGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatGateway(string name, NatGatewayArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/natGateway:NatGateway", name, args ?? new NatGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatGateway(string name, Input<string> id, NatGatewayState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/natGateway:NatGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatGateway Get(string name, Input<string> id, NatGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new NatGateway(name, id, state, options);
        }
    }

    public sealed class NatGatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        /// <summary>
        /// The description of the NAT gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The enterprise project ID of the NAT gateway.
        /// </summary>
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        /// <summary>
        /// The NAT gateway name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IP address used for the NG port of the NAT gateway.
        /// </summary>
        [Input("ngportIpAddress")]
        public Input<string>? NgportIpAddress { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// The region where the NAT gateway is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The session configuration of the NAT gateway.
        /// </summary>
        [Input("sessionConf")]
        public Input<Inputs.NatGatewaySessionConfArgs>? SessionConf { get; set; }

        /// <summary>
        /// The specification of the NAT gateway.
        /// </summary>
        [Input("spec", required: true)]
        public Input<string> Spec { get; set; } = null!;

        /// <summary>
        /// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC to which the NAT gateway belongs.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public NatGatewayArgs()
        {
        }
        public static new NatGatewayArgs Empty => new NatGatewayArgs();
    }

    public sealed class NatGatewayState : global::Pulumi.ResourceArgs
    {
        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        /// <summary>
        /// The order information of the NAT gateway.
        /// </summary>
        [Input("billingInfo")]
        public Input<string>? BillingInfo { get; set; }

        /// <summary>
        /// The bandwidth that the NAT gateway can receive or send per second.
        /// </summary>
        [Input("bpsMax")]
        public Input<int>? BpsMax { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        /// <summary>
        /// The creation time of the NAT gateway.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the NAT gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The maximum number of DNAT rules on the NAT gateway.
        /// </summary>
        [Input("dnatRulesLimit")]
        public Input<int>? DnatRulesLimit { get; set; }

        /// <summary>
        /// The enterprise project ID of the NAT gateway.
        /// </summary>
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        /// <summary>
        /// The NAT gateway name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IP address used for the NG port of the NAT gateway.
        /// </summary>
        [Input("ngportIpAddress")]
        public Input<string>? NgportIpAddress { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// The number of packets that the NAT gateway can receive or send per second.
        /// </summary>
        [Input("ppsMax")]
        public Input<int>? PpsMax { get; set; }

        /// <summary>
        /// The region where the NAT gateway is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The session configuration of the NAT gateway.
        /// </summary>
        [Input("sessionConf")]
        public Input<Inputs.NatGatewaySessionConfGetArgs>? SessionConf { get; set; }

        /// <summary>
        /// The maximum number of SNAT rules on the NAT gateway.
        /// </summary>
        [Input("snatRulePublicIpLimit")]
        public Input<int>? SnatRulePublicIpLimit { get; set; }

        /// <summary>
        /// The specification of the NAT gateway.
        /// </summary>
        [Input("spec")]
        public Input<string>? Spec { get; set; }

        /// <summary>
        /// The current status of the NAT gateway.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC to which the NAT gateway belongs.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public NatGatewayState()
        {
        }
        public static new NatGatewayState Empty => new NatGatewayState();
    }
}
