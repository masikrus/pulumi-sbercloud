// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/mapreduceCluster:MapreduceCluster")]
    public partial class MapreduceCluster : global::Pulumi.CustomResource
    {
        [Output("analysisCoreNodes")]
        public Output<Outputs.MapreduceClusterAnalysisCoreNodes?> AnalysisCoreNodes { get; private set; } = null!;

        [Output("analysisTaskNodes")]
        public Output<Outputs.MapreduceClusterAnalysisTaskNodes?> AnalysisTaskNodes { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("bootstrapScripts")]
        public Output<ImmutableArray<Outputs.MapreduceClusterBootstrapScript>> BootstrapScripts { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("chargingStartTime")]
        public Output<string> ChargingStartTime { get; private set; } = null!;

        [Output("componentConfigs")]
        public Output<ImmutableArray<Outputs.MapreduceClusterComponentConfig>> ComponentConfigs { get; private set; } = null!;

        [Output("componentLists")]
        public Output<ImmutableArray<string>> ComponentLists { get; private set; } = null!;

        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        [Output("customNodes")]
        public Output<ImmutableArray<Outputs.MapreduceClusterCustomNode>> CustomNodes { get; private set; } = null!;

        [Output("eipId")]
        public Output<string> EipId { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("externalDatasources")]
        public Output<ImmutableArray<Outputs.MapreduceClusterExternalDatasource>> ExternalDatasources { get; private set; } = null!;

        [Output("logCollection")]
        public Output<bool?> LogCollection { get; private set; } = null!;

        [Output("managerAdminPass")]
        public Output<string> ManagerAdminPass { get; private set; } = null!;

        [Output("masterNodeIp")]
        public Output<string> MasterNodeIp { get; private set; } = null!;

        [Output("masterNodes")]
        public Output<Outputs.MapreduceClusterMasterNodes> MasterNodes { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nodeAdminPass")]
        public Output<string?> NodeAdminPass { get; private set; } = null!;

        [Output("nodeKeyPair")]
        public Output<string?> NodeKeyPair { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("safeMode")]
        public Output<bool?> SafeMode { get; private set; } = null!;

        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        [Output("smnNotify")]
        public Output<Outputs.MapreduceClusterSmnNotify?> SmnNotify { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("streamingCoreNodes")]
        public Output<Outputs.MapreduceClusterStreamingCoreNodes?> StreamingCoreNodes { get; private set; } = null!;

        [Output("streamingTaskNodes")]
        public Output<Outputs.MapreduceClusterStreamingTaskNodes?> StreamingTaskNodes { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("templateId")]
        public Output<string?> TemplateId { get; private set; } = null!;

        [Output("totalNodeNumber")]
        public Output<int> TotalNodeNumber { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a MapreduceCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MapreduceCluster(string name, MapreduceClusterArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/mapreduceCluster:MapreduceCluster", name, args ?? new MapreduceClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MapreduceCluster(string name, Input<string> id, MapreduceClusterState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/mapreduceCluster:MapreduceCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "managerAdminPass",
                    "nodeAdminPass",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MapreduceCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MapreduceCluster Get(string name, Input<string> id, MapreduceClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MapreduceCluster(name, id, state, options);
        }
    }

    public sealed class MapreduceClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("analysisCoreNodes")]
        public Input<Inputs.MapreduceClusterAnalysisCoreNodesArgs>? AnalysisCoreNodes { get; set; }

        [Input("analysisTaskNodes")]
        public Input<Inputs.MapreduceClusterAnalysisTaskNodesArgs>? AnalysisTaskNodes { get; set; }

        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        [Input("bootstrapScripts")]
        private InputList<Inputs.MapreduceClusterBootstrapScriptArgs>? _bootstrapScripts;
        public InputList<Inputs.MapreduceClusterBootstrapScriptArgs> BootstrapScripts
        {
            get => _bootstrapScripts ?? (_bootstrapScripts = new InputList<Inputs.MapreduceClusterBootstrapScriptArgs>());
            set => _bootstrapScripts = value;
        }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("componentConfigs")]
        private InputList<Inputs.MapreduceClusterComponentConfigArgs>? _componentConfigs;
        public InputList<Inputs.MapreduceClusterComponentConfigArgs> ComponentConfigs
        {
            get => _componentConfigs ?? (_componentConfigs = new InputList<Inputs.MapreduceClusterComponentConfigArgs>());
            set => _componentConfigs = value;
        }

        [Input("componentLists", required: true)]
        private InputList<string>? _componentLists;
        public InputList<string> ComponentLists
        {
            get => _componentLists ?? (_componentLists = new InputList<string>());
            set => _componentLists = value;
        }

        [Input("customNodes")]
        private InputList<Inputs.MapreduceClusterCustomNodeArgs>? _customNodes;
        public InputList<Inputs.MapreduceClusterCustomNodeArgs> CustomNodes
        {
            get => _customNodes ?? (_customNodes = new InputList<Inputs.MapreduceClusterCustomNodeArgs>());
            set => _customNodes = value;
        }

        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("externalDatasources")]
        private InputList<Inputs.MapreduceClusterExternalDatasourceArgs>? _externalDatasources;
        public InputList<Inputs.MapreduceClusterExternalDatasourceArgs> ExternalDatasources
        {
            get => _externalDatasources ?? (_externalDatasources = new InputList<Inputs.MapreduceClusterExternalDatasourceArgs>());
            set => _externalDatasources = value;
        }

        [Input("logCollection")]
        public Input<bool>? LogCollection { get; set; }

        [Input("managerAdminPass", required: true)]
        private Input<string>? _managerAdminPass;
        public Input<string>? ManagerAdminPass
        {
            get => _managerAdminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _managerAdminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("masterNodes", required: true)]
        public Input<Inputs.MapreduceClusterMasterNodesArgs> MasterNodes { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeAdminPass")]
        private Input<string>? _nodeAdminPass;
        public Input<string>? NodeAdminPass
        {
            get => _nodeAdminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _nodeAdminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("nodeKeyPair")]
        public Input<string>? NodeKeyPair { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("safeMode")]
        public Input<bool>? SafeMode { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("smnNotify")]
        public Input<Inputs.MapreduceClusterSmnNotifyArgs>? SmnNotify { get; set; }

        [Input("streamingCoreNodes")]
        public Input<Inputs.MapreduceClusterStreamingCoreNodesArgs>? StreamingCoreNodes { get; set; }

        [Input("streamingTaskNodes")]
        public Input<Inputs.MapreduceClusterStreamingTaskNodesArgs>? StreamingTaskNodes { get; set; }

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public MapreduceClusterArgs()
        {
        }
        public static new MapreduceClusterArgs Empty => new MapreduceClusterArgs();
    }

    public sealed class MapreduceClusterState : global::Pulumi.ResourceArgs
    {
        [Input("analysisCoreNodes")]
        public Input<Inputs.MapreduceClusterAnalysisCoreNodesGetArgs>? AnalysisCoreNodes { get; set; }

        [Input("analysisTaskNodes")]
        public Input<Inputs.MapreduceClusterAnalysisTaskNodesGetArgs>? AnalysisTaskNodes { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bootstrapScripts")]
        private InputList<Inputs.MapreduceClusterBootstrapScriptGetArgs>? _bootstrapScripts;
        public InputList<Inputs.MapreduceClusterBootstrapScriptGetArgs> BootstrapScripts
        {
            get => _bootstrapScripts ?? (_bootstrapScripts = new InputList<Inputs.MapreduceClusterBootstrapScriptGetArgs>());
            set => _bootstrapScripts = value;
        }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("chargingStartTime")]
        public Input<string>? ChargingStartTime { get; set; }

        [Input("componentConfigs")]
        private InputList<Inputs.MapreduceClusterComponentConfigGetArgs>? _componentConfigs;
        public InputList<Inputs.MapreduceClusterComponentConfigGetArgs> ComponentConfigs
        {
            get => _componentConfigs ?? (_componentConfigs = new InputList<Inputs.MapreduceClusterComponentConfigGetArgs>());
            set => _componentConfigs = value;
        }

        [Input("componentLists")]
        private InputList<string>? _componentLists;
        public InputList<string> ComponentLists
        {
            get => _componentLists ?? (_componentLists = new InputList<string>());
            set => _componentLists = value;
        }

        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("customNodes")]
        private InputList<Inputs.MapreduceClusterCustomNodeGetArgs>? _customNodes;
        public InputList<Inputs.MapreduceClusterCustomNodeGetArgs> CustomNodes
        {
            get => _customNodes ?? (_customNodes = new InputList<Inputs.MapreduceClusterCustomNodeGetArgs>());
            set => _customNodes = value;
        }

        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("externalDatasources")]
        private InputList<Inputs.MapreduceClusterExternalDatasourceGetArgs>? _externalDatasources;
        public InputList<Inputs.MapreduceClusterExternalDatasourceGetArgs> ExternalDatasources
        {
            get => _externalDatasources ?? (_externalDatasources = new InputList<Inputs.MapreduceClusterExternalDatasourceGetArgs>());
            set => _externalDatasources = value;
        }

        [Input("logCollection")]
        public Input<bool>? LogCollection { get; set; }

        [Input("managerAdminPass")]
        private Input<string>? _managerAdminPass;
        public Input<string>? ManagerAdminPass
        {
            get => _managerAdminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _managerAdminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("masterNodeIp")]
        public Input<string>? MasterNodeIp { get; set; }

        [Input("masterNodes")]
        public Input<Inputs.MapreduceClusterMasterNodesGetArgs>? MasterNodes { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeAdminPass")]
        private Input<string>? _nodeAdminPass;
        public Input<string>? NodeAdminPass
        {
            get => _nodeAdminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _nodeAdminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("nodeKeyPair")]
        public Input<string>? NodeKeyPair { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("safeMode")]
        public Input<bool>? SafeMode { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("smnNotify")]
        public Input<Inputs.MapreduceClusterSmnNotifyGetArgs>? SmnNotify { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("streamingCoreNodes")]
        public Input<Inputs.MapreduceClusterStreamingCoreNodesGetArgs>? StreamingCoreNodes { get; set; }

        [Input("streamingTaskNodes")]
        public Input<Inputs.MapreduceClusterStreamingTaskNodesGetArgs>? StreamingTaskNodes { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("totalNodeNumber")]
        public Input<int>? TotalNodeNumber { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public MapreduceClusterState()
        {
        }
        public static new MapreduceClusterState Empty => new MapreduceClusterState();
    }
}
