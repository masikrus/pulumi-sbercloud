// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/natDnatRule:NatDnatRule")]
    public partial class NatDnatRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the DNAT rule.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the DNAT rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The port range used by Floating IP provide services for external systems.
        /// </summary>
        [Output("externalServicePort")]
        public Output<int?> ExternalServicePort { get; private set; } = null!;

        /// <summary>
        /// The port range used by ECSs or BMSs to provide services for external systems.
        /// </summary>
        [Output("externalServicePortRange")]
        public Output<string?> ExternalServicePortRange { get; private set; } = null!;

        /// <summary>
        /// The floating IP address of the DNAT rule.
        /// </summary>
        [Output("floatingIpAddress")]
        public Output<string> FloatingIpAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the floating IP address.
        /// </summary>
        [Output("floatingIpId")]
        public Output<string?> FloatingIpId { get; private set; } = null!;

        /// <summary>
        /// The global EIP address connected by the DNAT rule.
        /// </summary>
        [Output("globalEipAddress")]
        public Output<string> GlobalEipAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the global EIP connected by the DNAT rule.
        /// </summary>
        [Output("globalEipId")]
        public Output<string?> GlobalEipId { get; private set; } = null!;

        /// <summary>
        /// The port used by Floating IP provide services for external systems.
        /// </summary>
        [Output("internalServicePort")]
        public Output<int?> InternalServicePort { get; private set; } = null!;

        /// <summary>
        /// The port used by ECSs or BMSs to provide services for external systems.
        /// </summary>
        [Output("internalServicePortRange")]
        public Output<string?> InternalServicePortRange { get; private set; } = null!;

        /// <summary>
        /// The ID of the NAT gateway to which the DNAT rule belongs.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        /// <summary>
        /// The port ID of network.
        /// </summary>
        [Output("portId")]
        public Output<string> PortId { get; private set; } = null!;

        /// <summary>
        /// The private IP address of a user.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// The protocol type.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The region where the DNAT rule is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The current status of the DNAT rule.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a NatDnatRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatDnatRule(string name, NatDnatRuleArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/natDnatRule:NatDnatRule", name, args ?? new NatDnatRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatDnatRule(string name, Input<string> id, NatDnatRuleState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/natDnatRule:NatDnatRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatDnatRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatDnatRule Get(string name, Input<string> id, NatDnatRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NatDnatRule(name, id, state, options);
        }
    }

    public sealed class NatDnatRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the DNAT rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The port range used by Floating IP provide services for external systems.
        /// </summary>
        [Input("externalServicePort")]
        public Input<int>? ExternalServicePort { get; set; }

        /// <summary>
        /// The port range used by ECSs or BMSs to provide services for external systems.
        /// </summary>
        [Input("externalServicePortRange")]
        public Input<string>? ExternalServicePortRange { get; set; }

        /// <summary>
        /// The ID of the floating IP address.
        /// </summary>
        [Input("floatingIpId")]
        public Input<string>? FloatingIpId { get; set; }

        /// <summary>
        /// The ID of the global EIP connected by the DNAT rule.
        /// </summary>
        [Input("globalEipId")]
        public Input<string>? GlobalEipId { get; set; }

        /// <summary>
        /// The port used by Floating IP provide services for external systems.
        /// </summary>
        [Input("internalServicePort")]
        public Input<int>? InternalServicePort { get; set; }

        /// <summary>
        /// The port used by ECSs or BMSs to provide services for external systems.
        /// </summary>
        [Input("internalServicePortRange")]
        public Input<string>? InternalServicePortRange { get; set; }

        /// <summary>
        /// The ID of the NAT gateway to which the DNAT rule belongs.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        /// <summary>
        /// The port ID of network.
        /// </summary>
        [Input("portId")]
        public Input<string>? PortId { get; set; }

        /// <summary>
        /// The private IP address of a user.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// The protocol type.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The region where the DNAT rule is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public NatDnatRuleArgs()
        {
        }
        public static new NatDnatRuleArgs Empty => new NatDnatRuleArgs();
    }

    public sealed class NatDnatRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the DNAT rule.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the DNAT rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The port range used by Floating IP provide services for external systems.
        /// </summary>
        [Input("externalServicePort")]
        public Input<int>? ExternalServicePort { get; set; }

        /// <summary>
        /// The port range used by ECSs or BMSs to provide services for external systems.
        /// </summary>
        [Input("externalServicePortRange")]
        public Input<string>? ExternalServicePortRange { get; set; }

        /// <summary>
        /// The floating IP address of the DNAT rule.
        /// </summary>
        [Input("floatingIpAddress")]
        public Input<string>? FloatingIpAddress { get; set; }

        /// <summary>
        /// The ID of the floating IP address.
        /// </summary>
        [Input("floatingIpId")]
        public Input<string>? FloatingIpId { get; set; }

        /// <summary>
        /// The global EIP address connected by the DNAT rule.
        /// </summary>
        [Input("globalEipAddress")]
        public Input<string>? GlobalEipAddress { get; set; }

        /// <summary>
        /// The ID of the global EIP connected by the DNAT rule.
        /// </summary>
        [Input("globalEipId")]
        public Input<string>? GlobalEipId { get; set; }

        /// <summary>
        /// The port used by Floating IP provide services for external systems.
        /// </summary>
        [Input("internalServicePort")]
        public Input<int>? InternalServicePort { get; set; }

        /// <summary>
        /// The port used by ECSs or BMSs to provide services for external systems.
        /// </summary>
        [Input("internalServicePortRange")]
        public Input<string>? InternalServicePortRange { get; set; }

        /// <summary>
        /// The ID of the NAT gateway to which the DNAT rule belongs.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        /// <summary>
        /// The port ID of network.
        /// </summary>
        [Input("portId")]
        public Input<string>? PortId { get; set; }

        /// <summary>
        /// The private IP address of a user.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// The protocol type.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The region where the DNAT rule is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The current status of the DNAT rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public NatDnatRuleState()
        {
        }
        public static new NatDnatRuleState Empty => new NatDnatRuleState();
    }
}
