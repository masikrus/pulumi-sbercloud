// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/rdsSqlAudit:RdsSqlAudit")]
    public partial class RdsSqlAudit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the list of audit types.
        /// </summary>
        [Output("auditTypes")]
        public Output<ImmutableArray<string>> AuditTypes { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the RDS instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of days for storing audit logs.
        /// </summary>
        [Output("keepDays")]
        public Output<int> KeepDays { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        /// </summary>
        [Output("reserveAuditlogs")]
        public Output<bool?> ReserveAuditlogs { get; private set; } = null!;


        /// <summary>
        /// Create a RdsSqlAudit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdsSqlAudit(string name, RdsSqlAuditArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/rdsSqlAudit:RdsSqlAudit", name, args ?? new RdsSqlAuditArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdsSqlAudit(string name, Input<string> id, RdsSqlAuditState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/rdsSqlAudit:RdsSqlAudit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdsSqlAudit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdsSqlAudit Get(string name, Input<string> id, RdsSqlAuditState? state = null, CustomResourceOptions? options = null)
        {
            return new RdsSqlAudit(name, id, state, options);
        }
    }

    public sealed class RdsSqlAuditArgs : global::Pulumi.ResourceArgs
    {
        [Input("auditTypes")]
        private InputList<string>? _auditTypes;

        /// <summary>
        /// Specifies the list of audit types.
        /// </summary>
        public InputList<string> AuditTypes
        {
            get => _auditTypes ?? (_auditTypes = new InputList<string>());
            set => _auditTypes = value;
        }

        /// <summary>
        /// Specifies the ID of the RDS instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specifies the number of days for storing audit logs.
        /// </summary>
        [Input("keepDays", required: true)]
        public Input<int> KeepDays { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        /// </summary>
        [Input("reserveAuditlogs")]
        public Input<bool>? ReserveAuditlogs { get; set; }

        public RdsSqlAuditArgs()
        {
        }
        public static new RdsSqlAuditArgs Empty => new RdsSqlAuditArgs();
    }

    public sealed class RdsSqlAuditState : global::Pulumi.ResourceArgs
    {
        [Input("auditTypes")]
        private InputList<string>? _auditTypes;

        /// <summary>
        /// Specifies the list of audit types.
        /// </summary>
        public InputList<string> AuditTypes
        {
            get => _auditTypes ?? (_auditTypes = new InputList<string>());
            set => _auditTypes = value;
        }

        /// <summary>
        /// Specifies the ID of the RDS instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Specifies the number of days for storing audit logs.
        /// </summary>
        [Input("keepDays")]
        public Input<int>? KeepDays { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies whether the historical audit logs will be reserved for some time when SQL audit is disabled.
        /// </summary>
        [Input("reserveAuditlogs")]
        public Input<bool>? ReserveAuditlogs { get; set; }

        public RdsSqlAuditState()
        {
        }
        public static new RdsSqlAuditState Empty => new RdsSqlAuditState();
    }
}
