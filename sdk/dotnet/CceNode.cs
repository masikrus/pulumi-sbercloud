// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cceNode:CceNode")]
    public partial class CceNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        [Output("autoPay")]
        public Output<string?> AutoPay { get; private set; } = null!;

        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("bandwidthChargeMode")]
        public Output<string?> BandwidthChargeMode { get; private set; } = null!;

        [Output("bandwidthSize")]
        public Output<int?> BandwidthSize { get; private set; } = null!;

        [Output("billingMode")]
        public Output<int> BillingMode { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("dataVolumes")]
        public Output<ImmutableArray<Outputs.CceNodeDataVolume>> DataVolumes { get; private set; } = null!;

        [Output("dedicatedHostId")]
        public Output<string?> DedicatedHostId { get; private set; } = null!;

        [Output("ecsGroupId")]
        public Output<string?> EcsGroupId { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("ecsPerformanceType")]
        public Output<string?> EcsPerformanceType { get; private set; } = null!;

        [Output("eipId")]
        public Output<string?> EipId { get; private set; } = null!;

        [Output("eipIds")]
        public Output<ImmutableArray<string>> EipIds { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("extendParam")]
        public Output<ImmutableDictionary<string, string>?> ExtendParam { get; private set; } = null!;

        [Output("extendParamChargingMode")]
        public Output<int?> ExtendParamChargingMode { get; private set; } = null!;

        [Output("extendParams")]
        public Output<Outputs.CceNodeExtendParams?> ExtendParams { get; private set; } = null!;

        [Output("extensionNics")]
        public Output<ImmutableArray<Outputs.CceNodeExtensionNic>> ExtensionNics { get; private set; } = null!;

        [Output("fixedIp")]
        public Output<string?> FixedIp { get; private set; } = null!;

        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        [Output("hostnameConfig")]
        public Output<Outputs.CceNodeHostnameConfig> HostnameConfig { get; private set; } = null!;

        [Output("initializedConditions")]
        public Output<ImmutableArray<string>> InitializedConditions { get; private set; } = null!;

        [Output("iptype")]
        public Output<string?> Iptype { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("keepEcs")]
        public Output<bool?> KeepEcs { get; private set; } = null!;

        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("maxPods")]
        public Output<int?> MaxPods { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("orderId")]
        public Output<string?> OrderId { get; private set; } = null!;

        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("postinstall")]
        public Output<string?> Postinstall { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("preinstall")]
        public Output<string?> Preinstall { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("productId")]
        public Output<string?> ProductId { get; private set; } = null!;

        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Output("publicKey")]
        public Output<string?> PublicKey { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("rootVolume")]
        public Output<Outputs.CceNodeRootVolume> RootVolume { get; private set; } = null!;

        [Output("runtime")]
        public Output<string> Runtime { get; private set; } = null!;

        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        [Output("sharetype")]
        public Output<string?> Sharetype { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("storage")]
        public Output<Outputs.CceNodeStorage?> Storage { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("taints")]
        public Output<ImmutableArray<Outputs.CceNodeTaint>> Taints { get; private set; } = null!;


        /// <summary>
        /// Create a CceNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CceNode(string name, CceNodeArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceNode:CceNode", name, args ?? new CceNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CceNode(string name, Input<string> id, CceNodeState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceNode:CceNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CceNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CceNode Get(string name, Input<string> id, CceNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new CceNode(name, id, state, options);
        }
    }

    public sealed class CceNodeArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        [Input("bandwidthChargeMode")]
        public Input<string>? BandwidthChargeMode { get; set; }

        [Input("bandwidthSize")]
        public Input<int>? BandwidthSize { get; set; }

        [Input("billingMode")]
        public Input<int>? BillingMode { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("dataVolumes")]
        private InputList<Inputs.CceNodeDataVolumeArgs>? _dataVolumes;
        public InputList<Inputs.CceNodeDataVolumeArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.CceNodeDataVolumeArgs>());
            set => _dataVolumes = value;
        }

        [Input("dedicatedHostId")]
        public Input<string>? DedicatedHostId { get; set; }

        [Input("ecsGroupId")]
        public Input<string>? EcsGroupId { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("ecsPerformanceType")]
        public Input<string>? EcsPerformanceType { get; set; }

        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("eipIds")]
        private InputList<string>? _eipIds;
        [Obsolete(@"use eip_id instead")]
        public InputList<string> EipIds
        {
            get => _eipIds ?? (_eipIds = new InputList<string>());
            set => _eipIds = value;
        }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("extendParam")]
        private InputMap<string>? _extendParam;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        public InputMap<string> ExtendParam
        {
            get => _extendParam ?? (_extendParam = new InputMap<string>());
            set => _extendParam = value;
        }

        [Input("extendParamChargingMode")]
        public Input<int>? ExtendParamChargingMode { get; set; }

        [Input("extendParams")]
        public Input<Inputs.CceNodeExtendParamsArgs>? ExtendParams { get; set; }

        [Input("extensionNics")]
        private InputList<Inputs.CceNodeExtensionNicArgs>? _extensionNics;
        public InputList<Inputs.CceNodeExtensionNicArgs> ExtensionNics
        {
            get => _extensionNics ?? (_extensionNics = new InputList<Inputs.CceNodeExtensionNicArgs>());
            set => _extensionNics = value;
        }

        [Input("fixedIp")]
        public Input<string>? FixedIp { get; set; }

        [Input("flavorId", required: true)]
        public Input<string> FlavorId { get; set; } = null!;

        [Input("hostnameConfig")]
        public Input<Inputs.CceNodeHostnameConfigArgs>? HostnameConfig { get; set; }

        [Input("initializedConditions")]
        private InputList<string>? _initializedConditions;
        public InputList<string> InitializedConditions
        {
            get => _initializedConditions ?? (_initializedConditions = new InputList<string>());
            set => _initializedConditions = value;
        }

        [Input("iptype")]
        public Input<string>? Iptype { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("keepEcs")]
        public Input<bool>? KeepEcs { get; set; }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orderId")]
        public Input<string>? OrderId { get; set; }

        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("postinstall")]
        public Input<string>? Postinstall { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("preinstall")]
        public Input<string>? Preinstall { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootVolume", required: true)]
        public Input<Inputs.CceNodeRootVolumeArgs> RootVolume { get; set; } = null!;

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("sharetype")]
        public Input<string>? Sharetype { get; set; }

        [Input("storage")]
        public Input<Inputs.CceNodeStorageArgs>? Storage { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.CceNodeTaintArgs>? _taints;
        public InputList<Inputs.CceNodeTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.CceNodeTaintArgs>());
            set => _taints = value;
        }

        public CceNodeArgs()
        {
        }
        public static new CceNodeArgs Empty => new CceNodeArgs();
    }

    public sealed class CceNodeState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bandwidthChargeMode")]
        public Input<string>? BandwidthChargeMode { get; set; }

        [Input("bandwidthSize")]
        public Input<int>? BandwidthSize { get; set; }

        [Input("billingMode")]
        public Input<int>? BillingMode { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.CceNodeDataVolumeGetArgs>? _dataVolumes;
        public InputList<Inputs.CceNodeDataVolumeGetArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.CceNodeDataVolumeGetArgs>());
            set => _dataVolumes = value;
        }

        [Input("dedicatedHostId")]
        public Input<string>? DedicatedHostId { get; set; }

        [Input("ecsGroupId")]
        public Input<string>? EcsGroupId { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("ecsPerformanceType")]
        public Input<string>? EcsPerformanceType { get; set; }

        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("eipIds")]
        private InputList<string>? _eipIds;
        [Obsolete(@"use eip_id instead")]
        public InputList<string> EipIds
        {
            get => _eipIds ?? (_eipIds = new InputList<string>());
            set => _eipIds = value;
        }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("extendParam")]
        private InputMap<string>? _extendParam;

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        public InputMap<string> ExtendParam
        {
            get => _extendParam ?? (_extendParam = new InputMap<string>());
            set => _extendParam = value;
        }

        [Input("extendParamChargingMode")]
        public Input<int>? ExtendParamChargingMode { get; set; }

        [Input("extendParams")]
        public Input<Inputs.CceNodeExtendParamsGetArgs>? ExtendParams { get; set; }

        [Input("extensionNics")]
        private InputList<Inputs.CceNodeExtensionNicGetArgs>? _extensionNics;
        public InputList<Inputs.CceNodeExtensionNicGetArgs> ExtensionNics
        {
            get => _extensionNics ?? (_extensionNics = new InputList<Inputs.CceNodeExtensionNicGetArgs>());
            set => _extensionNics = value;
        }

        [Input("fixedIp")]
        public Input<string>? FixedIp { get; set; }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("hostnameConfig")]
        public Input<Inputs.CceNodeHostnameConfigGetArgs>? HostnameConfig { get; set; }

        [Input("initializedConditions")]
        private InputList<string>? _initializedConditions;
        public InputList<string> InitializedConditions
        {
            get => _initializedConditions ?? (_initializedConditions = new InputList<string>());
            set => _initializedConditions = value;
        }

        [Input("iptype")]
        public Input<string>? Iptype { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("keepEcs")]
        public Input<bool>? KeepEcs { get; set; }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orderId")]
        public Input<string>? OrderId { get; set; }

        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("postinstall")]
        public Input<string>? Postinstall { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("preinstall")]
        public Input<string>? Preinstall { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// schema: Deprecated
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootVolume")]
        public Input<Inputs.CceNodeRootVolumeGetArgs>? RootVolume { get; set; }

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        [Input("sharetype")]
        public Input<string>? Sharetype { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("storage")]
        public Input<Inputs.CceNodeStorageGetArgs>? Storage { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.CceNodeTaintGetArgs>? _taints;
        public InputList<Inputs.CceNodeTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.CceNodeTaintGetArgs>());
            set => _taints = value;
        }

        public CceNodeState()
        {
        }
        public static new CceNodeState Empty => new CceNodeState();
    }
}
