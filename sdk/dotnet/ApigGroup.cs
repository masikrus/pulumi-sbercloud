// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/apigGroup:ApigGroup")]
    public partial class ApigGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the group, in RFC3339 format.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The group description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to use the debugging domain name to access the APIs within the group.
        /// </summary>
        [Output("domainAccessEnabled")]
        public Output<bool> DomainAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The array of one or more environments of the associated group.
        /// </summary>
        [Output("environments")]
        public Output<ImmutableArray<Outputs.ApigGroupEnvironment>> Environments { get; private set; } = null!;

        /// <summary>
        /// Whether to delete all sub-resources (for API) from this group.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// The ID of the dedicated instance to which the group belongs.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The group name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region where the dedicated instance is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The registration time.
        /// </summary>
        [Output("registrationTime")]
        public Output<string> RegistrationTime { get; private set; } = null!;

        /// <summary>
        /// The latest update time of the group.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The latest update time of the group, in RFC3339 format.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        [Output("urlDomains")]
        public Output<ImmutableArray<Outputs.ApigGroupUrlDomain>> UrlDomains { get; private set; } = null!;


        /// <summary>
        /// Create a ApigGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApigGroup(string name, ApigGroupArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/apigGroup:ApigGroup", name, args ?? new ApigGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApigGroup(string name, Input<string> id, ApigGroupState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/apigGroup:ApigGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApigGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApigGroup Get(string name, Input<string> id, ApigGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ApigGroup(name, id, state, options);
        }
    }

    public sealed class ApigGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether to use the debugging domain name to access the APIs within the group.
        /// </summary>
        [Input("domainAccessEnabled")]
        public Input<bool>? DomainAccessEnabled { get; set; }

        [Input("environments")]
        private InputList<Inputs.ApigGroupEnvironmentArgs>? _environments;

        /// <summary>
        /// The array of one or more environments of the associated group.
        /// </summary>
        public InputList<Inputs.ApigGroupEnvironmentArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.ApigGroupEnvironmentArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// Whether to delete all sub-resources (for API) from this group.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// The ID of the dedicated instance to which the group belongs.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the dedicated instance is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("urlDomains")]
        private InputList<Inputs.ApigGroupUrlDomainArgs>? _urlDomains;
        public InputList<Inputs.ApigGroupUrlDomainArgs> UrlDomains
        {
            get => _urlDomains ?? (_urlDomains = new InputList<Inputs.ApigGroupUrlDomainArgs>());
            set => _urlDomains = value;
        }

        public ApigGroupArgs()
        {
        }
        public static new ApigGroupArgs Empty => new ApigGroupArgs();
    }

    public sealed class ApigGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the group, in RFC3339 format.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The group description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether to use the debugging domain name to access the APIs within the group.
        /// </summary>
        [Input("domainAccessEnabled")]
        public Input<bool>? DomainAccessEnabled { get; set; }

        [Input("environments")]
        private InputList<Inputs.ApigGroupEnvironmentGetArgs>? _environments;

        /// <summary>
        /// The array of one or more environments of the associated group.
        /// </summary>
        public InputList<Inputs.ApigGroupEnvironmentGetArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.ApigGroupEnvironmentGetArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// Whether to delete all sub-resources (for API) from this group.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// The ID of the dedicated instance to which the group belongs.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the dedicated instance is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The registration time.
        /// </summary>
        [Input("registrationTime")]
        public Input<string>? RegistrationTime { get; set; }

        /// <summary>
        /// The latest update time of the group.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The latest update time of the group, in RFC3339 format.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("urlDomains")]
        private InputList<Inputs.ApigGroupUrlDomainGetArgs>? _urlDomains;
        public InputList<Inputs.ApigGroupUrlDomainGetArgs> UrlDomains
        {
            get => _urlDomains ?? (_urlDomains = new InputList<Inputs.ApigGroupUrlDomainGetArgs>());
            set => _urlDomains = value;
        }

        public ApigGroupState()
        {
        }
        public static new ApigGroupState Empty => new ApigGroupState();
    }
}
