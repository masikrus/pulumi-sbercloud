// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/elbListener:ElbListener")]
    public partial class ElbListener : global::Pulumi.CustomResource
    {
        [Output("accessPolicy")]
        public Output<string?> AccessPolicy { get; private set; } = null!;

        [Output("advancedForwardingEnabled")]
        public Output<bool> AdvancedForwardingEnabled { get; private set; } = null!;

        [Output("caCertificate")]
        public Output<string?> CaCertificate { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("defaultPoolId")]
        public Output<string> DefaultPoolId { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("enableMemberRetry")]
        public Output<bool> EnableMemberRetry { get; private set; } = null!;

        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        [Output("forwardEip")]
        public Output<bool> ForwardEip { get; private set; } = null!;

        [Output("forwardElb")]
        public Output<bool> ForwardElb { get; private set; } = null!;

        [Output("forwardHost")]
        public Output<bool?> ForwardHost { get; private set; } = null!;

        [Output("forwardPort")]
        public Output<bool> ForwardPort { get; private set; } = null!;

        [Output("forwardProto")]
        public Output<bool> ForwardProto { get; private set; } = null!;

        [Output("forwardRequestPort")]
        public Output<bool> ForwardRequestPort { get; private set; } = null!;

        [Output("forwardTlsCertificate")]
        public Output<bool> ForwardTlsCertificate { get; private set; } = null!;

        [Output("forwardTlsCipher")]
        public Output<bool> ForwardTlsCipher { get; private set; } = null!;

        [Output("forwardTlsProtocol")]
        public Output<bool> ForwardTlsProtocol { get; private set; } = null!;

        [Output("gzipEnable")]
        public Output<bool> GzipEnable { get; private set; } = null!;

        [Output("http2Enable")]
        public Output<bool> Http2Enable { get; private set; } = null!;

        [Output("idleTimeout")]
        public Output<int> IdleTimeout { get; private set; } = null!;

        [Output("ipGroup")]
        public Output<string?> IpGroup { get; private set; } = null!;

        [Output("loadbalancerId")]
        public Output<string> LoadbalancerId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("portRanges")]
        public Output<ImmutableArray<Outputs.ElbListenerPortRange>> PortRanges { get; private set; } = null!;

        [Output("protectionReason")]
        public Output<string?> ProtectionReason { get; private set; } = null!;

        [Output("protectionStatus")]
        public Output<string> ProtectionStatus { get; private set; } = null!;

        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        [Output("protocolPort")]
        public Output<int> ProtocolPort { get; private set; } = null!;

        [Output("proxyProtocolEnable")]
        public Output<bool> ProxyProtocolEnable { get; private set; } = null!;

        [Output("quicListenerId")]
        public Output<string?> QuicListenerId { get; private set; } = null!;

        [Output("realIp")]
        public Output<bool> RealIp { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("requestTimeout")]
        public Output<int> RequestTimeout { get; private set; } = null!;

        [Output("responseTimeout")]
        public Output<int> ResponseTimeout { get; private set; } = null!;

        [Output("securityPolicyId")]
        public Output<string?> SecurityPolicyId { get; private set; } = null!;

        [Output("serverCertificate")]
        public Output<string?> ServerCertificate { get; private set; } = null!;

        [Output("sniCertificates")]
        public Output<ImmutableArray<string>> SniCertificates { get; private set; } = null!;

        [Output("sniMatchAlgo")]
        public Output<string> SniMatchAlgo { get; private set; } = null!;

        [Output("sslEarlyDataEnable")]
        public Output<bool?> SslEarlyDataEnable { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tlsCiphersPolicy")]
        public Output<string> TlsCiphersPolicy { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a ElbListener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElbListener(string name, ElbListenerArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/elbListener:ElbListener", name, args ?? new ElbListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ElbListener(string name, Input<string> id, ElbListenerState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/elbListener:ElbListener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElbListener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElbListener Get(string name, Input<string> id, ElbListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new ElbListener(name, id, state, options);
        }
    }

    public sealed class ElbListenerArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicy")]
        public Input<string>? AccessPolicy { get; set; }

        [Input("advancedForwardingEnabled")]
        public Input<bool>? AdvancedForwardingEnabled { get; set; }

        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        [Input("defaultPoolId")]
        public Input<string>? DefaultPoolId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enableMemberRetry")]
        public Input<bool>? EnableMemberRetry { get; set; }

        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("forwardEip")]
        public Input<bool>? ForwardEip { get; set; }

        [Input("forwardElb")]
        public Input<bool>? ForwardElb { get; set; }

        [Input("forwardHost")]
        public Input<bool>? ForwardHost { get; set; }

        [Input("forwardPort")]
        public Input<bool>? ForwardPort { get; set; }

        [Input("forwardProto")]
        public Input<bool>? ForwardProto { get; set; }

        [Input("forwardRequestPort")]
        public Input<bool>? ForwardRequestPort { get; set; }

        [Input("forwardTlsCertificate")]
        public Input<bool>? ForwardTlsCertificate { get; set; }

        [Input("forwardTlsCipher")]
        public Input<bool>? ForwardTlsCipher { get; set; }

        [Input("forwardTlsProtocol")]
        public Input<bool>? ForwardTlsProtocol { get; set; }

        [Input("gzipEnable")]
        public Input<bool>? GzipEnable { get; set; }

        [Input("http2Enable")]
        public Input<bool>? Http2Enable { get; set; }

        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        [Input("ipGroup")]
        public Input<string>? IpGroup { get; set; }

        [Input("loadbalancerId", required: true)]
        public Input<string> LoadbalancerId { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portRanges")]
        private InputList<Inputs.ElbListenerPortRangeArgs>? _portRanges;
        public InputList<Inputs.ElbListenerPortRangeArgs> PortRanges
        {
            get => _portRanges ?? (_portRanges = new InputList<Inputs.ElbListenerPortRangeArgs>());
            set => _portRanges = value;
        }

        [Input("protectionReason")]
        public Input<string>? ProtectionReason { get; set; }

        [Input("protectionStatus")]
        public Input<string>? ProtectionStatus { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("protocolPort")]
        public Input<int>? ProtocolPort { get; set; }

        [Input("proxyProtocolEnable")]
        public Input<bool>? ProxyProtocolEnable { get; set; }

        [Input("quicListenerId")]
        public Input<string>? QuicListenerId { get; set; }

        [Input("realIp")]
        public Input<bool>? RealIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        [Input("responseTimeout")]
        public Input<int>? ResponseTimeout { get; set; }

        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        [Input("serverCertificate")]
        public Input<string>? ServerCertificate { get; set; }

        [Input("sniCertificates")]
        private InputList<string>? _sniCertificates;
        public InputList<string> SniCertificates
        {
            get => _sniCertificates ?? (_sniCertificates = new InputList<string>());
            set => _sniCertificates = value;
        }

        [Input("sniMatchAlgo")]
        public Input<string>? SniMatchAlgo { get; set; }

        [Input("sslEarlyDataEnable")]
        public Input<bool>? SslEarlyDataEnable { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tlsCiphersPolicy")]
        public Input<string>? TlsCiphersPolicy { get; set; }

        public ElbListenerArgs()
        {
        }
        public static new ElbListenerArgs Empty => new ElbListenerArgs();
    }

    public sealed class ElbListenerState : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicy")]
        public Input<string>? AccessPolicy { get; set; }

        [Input("advancedForwardingEnabled")]
        public Input<bool>? AdvancedForwardingEnabled { get; set; }

        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("defaultPoolId")]
        public Input<string>? DefaultPoolId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enableMemberRetry")]
        public Input<bool>? EnableMemberRetry { get; set; }

        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("forwardEip")]
        public Input<bool>? ForwardEip { get; set; }

        [Input("forwardElb")]
        public Input<bool>? ForwardElb { get; set; }

        [Input("forwardHost")]
        public Input<bool>? ForwardHost { get; set; }

        [Input("forwardPort")]
        public Input<bool>? ForwardPort { get; set; }

        [Input("forwardProto")]
        public Input<bool>? ForwardProto { get; set; }

        [Input("forwardRequestPort")]
        public Input<bool>? ForwardRequestPort { get; set; }

        [Input("forwardTlsCertificate")]
        public Input<bool>? ForwardTlsCertificate { get; set; }

        [Input("forwardTlsCipher")]
        public Input<bool>? ForwardTlsCipher { get; set; }

        [Input("forwardTlsProtocol")]
        public Input<bool>? ForwardTlsProtocol { get; set; }

        [Input("gzipEnable")]
        public Input<bool>? GzipEnable { get; set; }

        [Input("http2Enable")]
        public Input<bool>? Http2Enable { get; set; }

        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        [Input("ipGroup")]
        public Input<string>? IpGroup { get; set; }

        [Input("loadbalancerId")]
        public Input<string>? LoadbalancerId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portRanges")]
        private InputList<Inputs.ElbListenerPortRangeGetArgs>? _portRanges;
        public InputList<Inputs.ElbListenerPortRangeGetArgs> PortRanges
        {
            get => _portRanges ?? (_portRanges = new InputList<Inputs.ElbListenerPortRangeGetArgs>());
            set => _portRanges = value;
        }

        [Input("protectionReason")]
        public Input<string>? ProtectionReason { get; set; }

        [Input("protectionStatus")]
        public Input<string>? ProtectionStatus { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("protocolPort")]
        public Input<int>? ProtocolPort { get; set; }

        [Input("proxyProtocolEnable")]
        public Input<bool>? ProxyProtocolEnable { get; set; }

        [Input("quicListenerId")]
        public Input<string>? QuicListenerId { get; set; }

        [Input("realIp")]
        public Input<bool>? RealIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        [Input("responseTimeout")]
        public Input<int>? ResponseTimeout { get; set; }

        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        [Input("serverCertificate")]
        public Input<string>? ServerCertificate { get; set; }

        [Input("sniCertificates")]
        private InputList<string>? _sniCertificates;
        public InputList<string> SniCertificates
        {
            get => _sniCertificates ?? (_sniCertificates = new InputList<string>());
            set => _sniCertificates = value;
        }

        [Input("sniMatchAlgo")]
        public Input<string>? SniMatchAlgo { get; set; }

        [Input("sslEarlyDataEnable")]
        public Input<bool>? SslEarlyDataEnable { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tlsCiphersPolicy")]
        public Input<string>? TlsCiphersPolicy { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ElbListenerState()
        {
        }
        public static new ElbListenerState Empty => new ElbListenerState();
    }
}
