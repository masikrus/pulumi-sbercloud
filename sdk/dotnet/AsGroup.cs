// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/asGroup:AsGroup")]
    public partial class AsGroup : global::Pulumi.CustomResource
    {
        [Output("agencyName")]
        public Output<string> AgencyName { get; private set; } = null!;

        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated; use availability_zones instead
        /// </summary>
        [Output("availableZones")]
        public Output<ImmutableArray<string>> AvailableZones { get; private set; } = null!;

        /// <summary>
        /// The cooling duration, in seconds.
        /// </summary>
        [Output("coolDownTime")]
        public Output<int?> CoolDownTime { get; private set; } = null!;

        [Output("currentInstanceNumber")]
        public Output<int> CurrentInstanceNumber { get; private set; } = null!;

        /// <summary>
        /// Whether to delete instances when they are removed from the AS group.
        /// </summary>
        [Output("deleteInstances")]
        public Output<string?> DeleteInstances { get; private set; } = null!;

        [Output("deletePublicip")]
        public Output<bool?> DeletePublicip { get; private set; } = null!;

        [Output("deleteVolume")]
        public Output<bool> DeleteVolume { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("desireInstanceNumber")]
        public Output<int> DesireInstanceNumber { get; private set; } = null!;

        [Output("enable")]
        public Output<bool?> Enable { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// The health check grace period for instances, in seconds.
        /// </summary>
        [Output("healthPeriodicAuditGracePeriod")]
        public Output<int> HealthPeriodicAuditGracePeriod { get; private set; } = null!;

        [Output("healthPeriodicAuditMethod")]
        public Output<string?> HealthPeriodicAuditMethod { get; private set; } = null!;

        /// <summary>
        /// The health check period for instances, in minutes.
        /// </summary>
        [Output("healthPeriodicAuditTime")]
        public Output<int?> HealthPeriodicAuditTime { get; private set; } = null!;

        [Output("instanceTerminatePolicy")]
        public Output<string?> InstanceTerminatePolicy { get; private set; } = null!;

        /// <summary>
        /// The instances id list in the as group.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<string>> Instances { get; private set; } = null!;

        /// <summary>
        /// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        /// </summary>
        [Output("lbListenerId")]
        public Output<string?> LbListenerId { get; private set; } = null!;

        [Output("lbaasListeners")]
        public Output<ImmutableArray<Outputs.AsGroupLbaasListener>> LbaasListeners { get; private set; } = null!;

        [Output("maxInstanceNumber")]
        public Output<int?> MaxInstanceNumber { get; private set; } = null!;

        [Output("minInstanceNumber")]
        public Output<int?> MinInstanceNumber { get; private set; } = null!;

        [Output("multiAzScalingPolicy")]
        public Output<string> MultiAzScalingPolicy { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<Outputs.AsGroupNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated; The notification mode has been canceled
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<string>> Notifications { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// schema: Required
        /// </summary>
        [Output("scalingConfigurationId")]
        public Output<string> ScalingConfigurationId { get; private set; } = null!;

        [Output("scalingGroupName")]
        public Output<string> ScalingGroupName { get; private set; } = null!;

        [Output("securityGroups")]
        public Output<ImmutableArray<Outputs.AsGroupSecurityGroup>> SecurityGroups { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a AsGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AsGroup(string name, AsGroupArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/asGroup:AsGroup", name, args ?? new AsGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AsGroup(string name, Input<string> id, AsGroupState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/asGroup:AsGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AsGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AsGroup Get(string name, Input<string> id, AsGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AsGroup(name, id, state, options);
        }
    }

    public sealed class AsGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("availableZones")]
        private InputList<string>? _availableZones;

        /// <summary>
        /// schema: Deprecated; use availability_zones instead
        /// </summary>
        public InputList<string> AvailableZones
        {
            get => _availableZones ?? (_availableZones = new InputList<string>());
            set => _availableZones = value;
        }

        /// <summary>
        /// The cooling duration, in seconds.
        /// </summary>
        [Input("coolDownTime")]
        public Input<int>? CoolDownTime { get; set; }

        /// <summary>
        /// Whether to delete instances when they are removed from the AS group.
        /// </summary>
        [Input("deleteInstances")]
        public Input<string>? DeleteInstances { get; set; }

        [Input("deletePublicip")]
        public Input<bool>? DeletePublicip { get; set; }

        [Input("deleteVolume")]
        public Input<bool>? DeleteVolume { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("desireInstanceNumber")]
        public Input<int>? DesireInstanceNumber { get; set; }

        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// The health check grace period for instances, in seconds.
        /// </summary>
        [Input("healthPeriodicAuditGracePeriod")]
        public Input<int>? HealthPeriodicAuditGracePeriod { get; set; }

        [Input("healthPeriodicAuditMethod")]
        public Input<string>? HealthPeriodicAuditMethod { get; set; }

        /// <summary>
        /// The health check period for instances, in minutes.
        /// </summary>
        [Input("healthPeriodicAuditTime")]
        public Input<int>? HealthPeriodicAuditTime { get; set; }

        [Input("instanceTerminatePolicy")]
        public Input<string>? InstanceTerminatePolicy { get; set; }

        /// <summary>
        /// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        /// </summary>
        [Input("lbListenerId")]
        public Input<string>? LbListenerId { get; set; }

        [Input("lbaasListeners")]
        private InputList<Inputs.AsGroupLbaasListenerArgs>? _lbaasListeners;
        public InputList<Inputs.AsGroupLbaasListenerArgs> LbaasListeners
        {
            get => _lbaasListeners ?? (_lbaasListeners = new InputList<Inputs.AsGroupLbaasListenerArgs>());
            set => _lbaasListeners = value;
        }

        [Input("maxInstanceNumber")]
        public Input<int>? MaxInstanceNumber { get; set; }

        [Input("minInstanceNumber")]
        public Input<int>? MinInstanceNumber { get; set; }

        [Input("multiAzScalingPolicy")]
        public Input<string>? MultiAzScalingPolicy { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.AsGroupNetworkArgs>? _networks;
        public InputList<Inputs.AsGroupNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.AsGroupNetworkArgs>());
            set => _networks = value;
        }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// schema: Deprecated; The notification mode has been canceled
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// schema: Required
        /// </summary>
        [Input("scalingConfigurationId")]
        public Input<string>? ScalingConfigurationId { get; set; }

        [Input("scalingGroupName", required: true)]
        public Input<string> ScalingGroupName { get; set; } = null!;

        [Input("securityGroups")]
        private InputList<Inputs.AsGroupSecurityGroupArgs>? _securityGroups;
        public InputList<Inputs.AsGroupSecurityGroupArgs> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<Inputs.AsGroupSecurityGroupArgs>());
            set => _securityGroups = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public AsGroupArgs()
        {
        }
        public static new AsGroupArgs Empty => new AsGroupArgs();
    }

    public sealed class AsGroupState : global::Pulumi.ResourceArgs
    {
        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("availableZones")]
        private InputList<string>? _availableZones;

        /// <summary>
        /// schema: Deprecated; use availability_zones instead
        /// </summary>
        public InputList<string> AvailableZones
        {
            get => _availableZones ?? (_availableZones = new InputList<string>());
            set => _availableZones = value;
        }

        /// <summary>
        /// The cooling duration, in seconds.
        /// </summary>
        [Input("coolDownTime")]
        public Input<int>? CoolDownTime { get; set; }

        [Input("currentInstanceNumber")]
        public Input<int>? CurrentInstanceNumber { get; set; }

        /// <summary>
        /// Whether to delete instances when they are removed from the AS group.
        /// </summary>
        [Input("deleteInstances")]
        public Input<string>? DeleteInstances { get; set; }

        [Input("deletePublicip")]
        public Input<bool>? DeletePublicip { get; set; }

        [Input("deleteVolume")]
        public Input<bool>? DeleteVolume { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("desireInstanceNumber")]
        public Input<int>? DesireInstanceNumber { get; set; }

        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// The health check grace period for instances, in seconds.
        /// </summary>
        [Input("healthPeriodicAuditGracePeriod")]
        public Input<int>? HealthPeriodicAuditGracePeriod { get; set; }

        [Input("healthPeriodicAuditMethod")]
        public Input<string>? HealthPeriodicAuditMethod { get; set; }

        /// <summary>
        /// The health check period for instances, in minutes.
        /// </summary>
        [Input("healthPeriodicAuditTime")]
        public Input<int>? HealthPeriodicAuditTime { get; set; }

        [Input("instanceTerminatePolicy")]
        public Input<string>? InstanceTerminatePolicy { get; set; }

        [Input("instances")]
        private InputList<string>? _instances;

        /// <summary>
        /// The instances id list in the as group.
        /// </summary>
        public InputList<string> Instances
        {
            get => _instances ?? (_instances = new InputList<string>());
            set => _instances = value;
        }

        /// <summary>
        /// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
        /// </summary>
        [Input("lbListenerId")]
        public Input<string>? LbListenerId { get; set; }

        [Input("lbaasListeners")]
        private InputList<Inputs.AsGroupLbaasListenerGetArgs>? _lbaasListeners;
        public InputList<Inputs.AsGroupLbaasListenerGetArgs> LbaasListeners
        {
            get => _lbaasListeners ?? (_lbaasListeners = new InputList<Inputs.AsGroupLbaasListenerGetArgs>());
            set => _lbaasListeners = value;
        }

        [Input("maxInstanceNumber")]
        public Input<int>? MaxInstanceNumber { get; set; }

        [Input("minInstanceNumber")]
        public Input<int>? MinInstanceNumber { get; set; }

        [Input("multiAzScalingPolicy")]
        public Input<string>? MultiAzScalingPolicy { get; set; }

        [Input("networks")]
        private InputList<Inputs.AsGroupNetworkGetArgs>? _networks;
        public InputList<Inputs.AsGroupNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.AsGroupNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("notifications")]
        private InputList<string>? _notifications;

        /// <summary>
        /// schema: Deprecated; The notification mode has been canceled
        /// </summary>
        public InputList<string> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<string>());
            set => _notifications = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// schema: Required
        /// </summary>
        [Input("scalingConfigurationId")]
        public Input<string>? ScalingConfigurationId { get; set; }

        [Input("scalingGroupName")]
        public Input<string>? ScalingGroupName { get; set; }

        [Input("securityGroups")]
        private InputList<Inputs.AsGroupSecurityGroupGetArgs>? _securityGroups;
        public InputList<Inputs.AsGroupSecurityGroupGetArgs> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<Inputs.AsGroupSecurityGroupGetArgs>());
            set => _securityGroups = value;
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public AsGroupState()
        {
        }
        public static new AsGroupState Empty => new AsGroupState();
    }
}
