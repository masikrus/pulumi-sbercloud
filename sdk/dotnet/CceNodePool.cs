// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cceNodePool:CceNodePool")]
    public partial class CceNodePool : global::Pulumi.CustomResource
    {
        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        [Output("billingMode")]
        public Output<int> BillingMode { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("currentNodeCount")]
        public Output<int> CurrentNodeCount { get; private set; } = null!;

        [Output("dataVolumes")]
        public Output<ImmutableArray<Outputs.CceNodePoolDataVolume>> DataVolumes { get; private set; } = null!;

        [Output("ecsGroupId")]
        public Output<string?> EcsGroupId { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
        /// </summary>
        [Output("extendParam")]
        public Output<ImmutableDictionary<string, string>?> ExtendParam { get; private set; } = null!;

        [Output("extendParams")]
        public Output<Outputs.CceNodePoolExtendParams?> ExtendParams { get; private set; } = null!;

        [Output("extensionScaleGroups")]
        public Output<ImmutableArray<Outputs.CceNodePoolExtensionScaleGroup>> ExtensionScaleGroups { get; private set; } = null!;

        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        [Output("hostnameConfig")]
        public Output<Outputs.CceNodePoolHostnameConfig> HostnameConfig { get; private set; } = null!;

        [Output("initialNodeCount")]
        public Output<int> InitialNodeCount { get; private set; } = null!;

        [Output("initializedConditions")]
        public Output<ImmutableArray<string>> InitializedConditions { get; private set; } = null!;

        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        [Output("labelPolicyOnExistingNodes")]
        public Output<string> LabelPolicyOnExistingNodes { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("maxNodeCount")]
        public Output<int?> MaxNodeCount { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Output("maxPods")]
        public Output<int> MaxPods { get; private set; } = null!;

        [Output("minNodeCount")]
        public Output<int?> MinNodeCount { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        [Output("podSecurityGroups")]
        public Output<ImmutableArray<string>> PodSecurityGroups { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Output("postinstall")]
        public Output<string?> Postinstall { get; private set; } = null!;

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Output("preinstall")]
        public Output<string?> Preinstall { get; private set; } = null!;

        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("rootVolume")]
        public Output<Outputs.CceNodePoolRootVolume> RootVolume { get; private set; } = null!;

        [Output("runtime")]
        public Output<string> Runtime { get; private set; } = null!;

        [Output("scaleDownCooldownTime")]
        public Output<int?> ScaleDownCooldownTime { get; private set; } = null!;

        [Output("scallEnable")]
        public Output<bool?> ScallEnable { get; private set; } = null!;

        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("storage")]
        public Output<Outputs.CceNodePoolStorage?> Storage { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("subnetLists")]
        public Output<ImmutableArray<string>> SubnetLists { get; private set; } = null!;

        [Output("tagPolicyOnExistingNodes")]
        public Output<string> TagPolicyOnExistingNodes { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("taintPolicyOnExistingNodes")]
        public Output<string> TaintPolicyOnExistingNodes { get; private set; } = null!;

        [Output("taints")]
        public Output<ImmutableArray<Outputs.CceNodePoolTaint>> Taints { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CceNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CceNodePool(string name, CceNodePoolArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceNodePool:CceNodePool", name, args ?? new CceNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CceNodePool(string name, Input<string> id, CceNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceNodePool:CceNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CceNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CceNodePool Get(string name, Input<string> id, CceNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new CceNodePool(name, id, state, options);
        }
    }

    public sealed class CceNodePoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("dataVolumes")]
        private InputList<Inputs.CceNodePoolDataVolumeArgs>? _dataVolumes;
        public InputList<Inputs.CceNodePoolDataVolumeArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.CceNodePoolDataVolumeArgs>());
            set => _dataVolumes = value;
        }

        [Input("ecsGroupId")]
        public Input<string>? EcsGroupId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("extendParam")]
        private InputMap<string>? _extendParam;

        /// <summary>
        /// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
        /// </summary>
        public InputMap<string> ExtendParam
        {
            get => _extendParam ?? (_extendParam = new InputMap<string>());
            set => _extendParam = value;
        }

        [Input("extendParams")]
        public Input<Inputs.CceNodePoolExtendParamsArgs>? ExtendParams { get; set; }

        [Input("extensionScaleGroups")]
        private InputList<Inputs.CceNodePoolExtensionScaleGroupArgs>? _extensionScaleGroups;
        public InputList<Inputs.CceNodePoolExtensionScaleGroupArgs> ExtensionScaleGroups
        {
            get => _extensionScaleGroups ?? (_extensionScaleGroups = new InputList<Inputs.CceNodePoolExtensionScaleGroupArgs>());
            set => _extensionScaleGroups = value;
        }

        [Input("flavorId", required: true)]
        public Input<string> FlavorId { get; set; } = null!;

        [Input("hostnameConfig")]
        public Input<Inputs.CceNodePoolHostnameConfigArgs>? HostnameConfig { get; set; }

        [Input("initialNodeCount", required: true)]
        public Input<int> InitialNodeCount { get; set; } = null!;

        [Input("initializedConditions")]
        private InputList<string>? _initializedConditions;
        public InputList<string> InitializedConditions
        {
            get => _initializedConditions ?? (_initializedConditions = new InputList<string>());
            set => _initializedConditions = value;
        }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("labelPolicyOnExistingNodes")]
        public Input<string>? LabelPolicyOnExistingNodes { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("podSecurityGroups")]
        private InputList<string>? _podSecurityGroups;
        public InputList<string> PodSecurityGroups
        {
            get => _podSecurityGroups ?? (_podSecurityGroups = new InputList<string>());
            set => _podSecurityGroups = value;
        }

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Input("postinstall")]
        public Input<string>? Postinstall { get; set; }

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Input("preinstall")]
        public Input<string>? Preinstall { get; set; }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootVolume", required: true)]
        public Input<Inputs.CceNodePoolRootVolumeArgs> RootVolume { get; set; } = null!;

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("scaleDownCooldownTime")]
        public Input<int>? ScaleDownCooldownTime { get; set; }

        [Input("scallEnable")]
        public Input<bool>? ScallEnable { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("storage")]
        public Input<Inputs.CceNodePoolStorageArgs>? Storage { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("subnetLists")]
        private InputList<string>? _subnetLists;
        public InputList<string> SubnetLists
        {
            get => _subnetLists ?? (_subnetLists = new InputList<string>());
            set => _subnetLists = value;
        }

        [Input("tagPolicyOnExistingNodes")]
        public Input<string>? TagPolicyOnExistingNodes { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taintPolicyOnExistingNodes")]
        public Input<string>? TaintPolicyOnExistingNodes { get; set; }

        [Input("taints")]
        private InputList<Inputs.CceNodePoolTaintArgs>? _taints;
        public InputList<Inputs.CceNodePoolTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.CceNodePoolTaintArgs>());
            set => _taints = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public CceNodePoolArgs()
        {
        }
        public static new CceNodePoolArgs Empty => new CceNodePoolArgs();
    }

    public sealed class CceNodePoolState : global::Pulumi.ResourceArgs
    {
        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("billingMode")]
        public Input<int>? BillingMode { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("currentNodeCount")]
        public Input<int>? CurrentNodeCount { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.CceNodePoolDataVolumeGetArgs>? _dataVolumes;
        public InputList<Inputs.CceNodePoolDataVolumeGetArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.CceNodePoolDataVolumeGetArgs>());
            set => _dataVolumes = value;
        }

        [Input("ecsGroupId")]
        public Input<string>? EcsGroupId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("extendParam")]
        private InputMap<string>? _extendParam;

        /// <summary>
        /// schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
        /// </summary>
        public InputMap<string> ExtendParam
        {
            get => _extendParam ?? (_extendParam = new InputMap<string>());
            set => _extendParam = value;
        }

        [Input("extendParams")]
        public Input<Inputs.CceNodePoolExtendParamsGetArgs>? ExtendParams { get; set; }

        [Input("extensionScaleGroups")]
        private InputList<Inputs.CceNodePoolExtensionScaleGroupGetArgs>? _extensionScaleGroups;
        public InputList<Inputs.CceNodePoolExtensionScaleGroupGetArgs> ExtensionScaleGroups
        {
            get => _extensionScaleGroups ?? (_extensionScaleGroups = new InputList<Inputs.CceNodePoolExtensionScaleGroupGetArgs>());
            set => _extensionScaleGroups = value;
        }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("hostnameConfig")]
        public Input<Inputs.CceNodePoolHostnameConfigGetArgs>? HostnameConfig { get; set; }

        [Input("initialNodeCount")]
        public Input<int>? InitialNodeCount { get; set; }

        [Input("initializedConditions")]
        private InputList<string>? _initializedConditions;
        public InputList<string> InitializedConditions
        {
            get => _initializedConditions ?? (_initializedConditions = new InputList<string>());
            set => _initializedConditions = value;
        }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("labelPolicyOnExistingNodes")]
        public Input<string>? LabelPolicyOnExistingNodes { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("podSecurityGroups")]
        private InputList<string>? _podSecurityGroups;
        public InputList<string> PodSecurityGroups
        {
            get => _podSecurityGroups ?? (_podSecurityGroups = new InputList<string>());
            set => _podSecurityGroups = value;
        }

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Input("postinstall")]
        public Input<string>? Postinstall { get; set; }

        /// <summary>
        /// schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
        /// </summary>
        [Input("preinstall")]
        public Input<string>? Preinstall { get; set; }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootVolume")]
        public Input<Inputs.CceNodePoolRootVolumeGetArgs>? RootVolume { get; set; }

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("scaleDownCooldownTime")]
        public Input<int>? ScaleDownCooldownTime { get; set; }

        [Input("scallEnable")]
        public Input<bool>? ScallEnable { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("storage")]
        public Input<Inputs.CceNodePoolStorageGetArgs>? Storage { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("subnetLists")]
        private InputList<string>? _subnetLists;
        public InputList<string> SubnetLists
        {
            get => _subnetLists ?? (_subnetLists = new InputList<string>());
            set => _subnetLists = value;
        }

        [Input("tagPolicyOnExistingNodes")]
        public Input<string>? TagPolicyOnExistingNodes { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taintPolicyOnExistingNodes")]
        public Input<string>? TaintPolicyOnExistingNodes { get; set; }

        [Input("taints")]
        private InputList<Inputs.CceNodePoolTaintGetArgs>? _taints;
        public InputList<Inputs.CceNodePoolTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.CceNodePoolTaintGetArgs>());
            set => _taints = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public CceNodePoolState()
        {
        }
        public static new CceNodePoolState Empty => new CceNodePoolState();
    }
}
