// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/obsBucket:ObsBucket")]
    public partial class ObsBucket : global::Pulumi.CustomResource
    {
        [Output("acl")]
        public Output<string?> Acl { get; private set; } = null!;

        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        [Output("bucketDomainName")]
        public Output<string> BucketDomainName { get; private set; } = null!;

        [Output("bucketVersion")]
        public Output<string> BucketVersion { get; private set; } = null!;

        [Output("corsRules")]
        public Output<ImmutableArray<Outputs.ObsBucketCorsRule>> CorsRules { get; private set; } = null!;

        [Output("encryption")]
        public Output<bool?> Encryption { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        [Output("kmsKeyProjectId")]
        public Output<string> KmsKeyProjectId { get; private set; } = null!;

        [Output("lifecycleRules")]
        public Output<ImmutableArray<Outputs.ObsBucketLifecycleRule>> LifecycleRules { get; private set; } = null!;

        [Output("loggings")]
        public Output<ImmutableArray<Outputs.ObsBucketLogging>> Loggings { get; private set; } = null!;

        [Output("multiAz")]
        public Output<bool> MultiAz { get; private set; } = null!;

        [Output("parallelFs")]
        public Output<bool?> ParallelFs { get; private set; } = null!;

        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        [Output("policyFormat")]
        public Output<string?> PolicyFormat { get; private set; } = null!;

        [Output("quota")]
        public Output<int?> Quota { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("sseAlgorithm")]
        public Output<string> SseAlgorithm { get; private set; } = null!;

        [Output("storageClass")]
        public Output<string?> StorageClass { get; private set; } = null!;

        [Output("storageInfos")]
        public Output<ImmutableArray<Outputs.ObsBucketStorageInfo>> StorageInfos { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("userDomainNames")]
        public Output<ImmutableArray<string>> UserDomainNames { get; private set; } = null!;

        [Output("versioning")]
        public Output<bool?> Versioning { get; private set; } = null!;

        [Output("website")]
        public Output<Outputs.ObsBucketWebsite?> Website { get; private set; } = null!;


        /// <summary>
        /// Create a ObsBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObsBucket(string name, ObsBucketArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/obsBucket:ObsBucket", name, args ?? new ObsBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObsBucket(string name, Input<string> id, ObsBucketState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/obsBucket:ObsBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObsBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObsBucket Get(string name, Input<string> id, ObsBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new ObsBucket(name, id, state, options);
        }
    }

    public sealed class ObsBucketArgs : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("corsRules")]
        private InputList<Inputs.ObsBucketCorsRuleArgs>? _corsRules;
        public InputList<Inputs.ObsBucketCorsRuleArgs> CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<Inputs.ObsBucketCorsRuleArgs>());
            set => _corsRules = value;
        }

        [Input("encryption")]
        public Input<bool>? Encryption { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("kmsKeyProjectId")]
        public Input<string>? KmsKeyProjectId { get; set; }

        [Input("lifecycleRules")]
        private InputList<Inputs.ObsBucketLifecycleRuleArgs>? _lifecycleRules;
        public InputList<Inputs.ObsBucketLifecycleRuleArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.ObsBucketLifecycleRuleArgs>());
            set => _lifecycleRules = value;
        }

        [Input("loggings")]
        private InputList<Inputs.ObsBucketLoggingArgs>? _loggings;
        public InputList<Inputs.ObsBucketLoggingArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.ObsBucketLoggingArgs>());
            set => _loggings = value;
        }

        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("parallelFs")]
        public Input<bool>? ParallelFs { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        [Input("policyFormat")]
        public Input<string>? PolicyFormat { get; set; }

        [Input("quota")]
        public Input<int>? Quota { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("sseAlgorithm")]
        public Input<string>? SseAlgorithm { get; set; }

        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userDomainNames")]
        private InputList<string>? _userDomainNames;
        public InputList<string> UserDomainNames
        {
            get => _userDomainNames ?? (_userDomainNames = new InputList<string>());
            set => _userDomainNames = value;
        }

        [Input("versioning")]
        public Input<bool>? Versioning { get; set; }

        [Input("website")]
        public Input<Inputs.ObsBucketWebsiteArgs>? Website { get; set; }

        public ObsBucketArgs()
        {
        }
        public static new ObsBucketArgs Empty => new ObsBucketArgs();
    }

    public sealed class ObsBucketState : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        [Input("bucketDomainName")]
        public Input<string>? BucketDomainName { get; set; }

        [Input("bucketVersion")]
        public Input<string>? BucketVersion { get; set; }

        [Input("corsRules")]
        private InputList<Inputs.ObsBucketCorsRuleGetArgs>? _corsRules;
        public InputList<Inputs.ObsBucketCorsRuleGetArgs> CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<Inputs.ObsBucketCorsRuleGetArgs>());
            set => _corsRules = value;
        }

        [Input("encryption")]
        public Input<bool>? Encryption { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("kmsKeyProjectId")]
        public Input<string>? KmsKeyProjectId { get; set; }

        [Input("lifecycleRules")]
        private InputList<Inputs.ObsBucketLifecycleRuleGetArgs>? _lifecycleRules;
        public InputList<Inputs.ObsBucketLifecycleRuleGetArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.ObsBucketLifecycleRuleGetArgs>());
            set => _lifecycleRules = value;
        }

        [Input("loggings")]
        private InputList<Inputs.ObsBucketLoggingGetArgs>? _loggings;
        public InputList<Inputs.ObsBucketLoggingGetArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.ObsBucketLoggingGetArgs>());
            set => _loggings = value;
        }

        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("parallelFs")]
        public Input<bool>? ParallelFs { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        [Input("policyFormat")]
        public Input<string>? PolicyFormat { get; set; }

        [Input("quota")]
        public Input<int>? Quota { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("sseAlgorithm")]
        public Input<string>? SseAlgorithm { get; set; }

        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        [Input("storageInfos")]
        private InputList<Inputs.ObsBucketStorageInfoGetArgs>? _storageInfos;
        public InputList<Inputs.ObsBucketStorageInfoGetArgs> StorageInfos
        {
            get => _storageInfos ?? (_storageInfos = new InputList<Inputs.ObsBucketStorageInfoGetArgs>());
            set => _storageInfos = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userDomainNames")]
        private InputList<string>? _userDomainNames;
        public InputList<string> UserDomainNames
        {
            get => _userDomainNames ?? (_userDomainNames = new InputList<string>());
            set => _userDomainNames = value;
        }

        [Input("versioning")]
        public Input<bool>? Versioning { get; set; }

        [Input("website")]
        public Input<Inputs.ObsBucketWebsiteGetArgs>? Website { get; set; }

        public ObsBucketState()
        {
        }
        public static new ObsBucketState Empty => new ObsBucketState();
    }
}
