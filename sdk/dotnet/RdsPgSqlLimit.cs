// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/rdsPgSqlLimit:RdsPgSqlLimit")]
    public partial class RdsPgSqlLimit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the database.
        /// </summary>
        [Output("dbName")]
        public Output<string> DbName { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the RDS PostgreSQL instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the SQL limit is effective.
        /// </summary>
        [Output("isEffective")]
        public Output<bool> IsEffective { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of SQL statements executed simultaneously
        /// </summary>
        [Output("maxConcurrency")]
        public Output<int> MaxConcurrency { get; private set; } = null!;

        /// <summary>
        /// Specifies the max waiting time in seconds.
        /// </summary>
        [Output("maxWaiting")]
        public Output<int> MaxWaiting { get; private set; } = null!;

        /// <summary>
        /// Specifies the query ID
        /// </summary>
        [Output("queryId")]
        public Output<string?> QueryId { get; private set; } = null!;

        /// <summary>
        /// Specifies the text form of SQL statement.
        /// </summary>
        [Output("queryString")]
        public Output<string?> QueryString { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Specifies the query order for names that are not schema qualified.
        /// </summary>
        [Output("searchPath")]
        public Output<string?> SearchPath { get; private set; } = null!;

        /// <summary>
        /// Indicates the ID of SQL limit.
        /// </summary>
        [Output("sqlLimitId")]
        public Output<string> SqlLimitId { get; private set; } = null!;

        /// <summary>
        /// Specifies the SQL limit switch.
        /// </summary>
        [Output("switch")]
        public Output<string> Switch { get; private set; } = null!;


        /// <summary>
        /// Create a RdsPgSqlLimit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdsPgSqlLimit(string name, RdsPgSqlLimitArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/rdsPgSqlLimit:RdsPgSqlLimit", name, args ?? new RdsPgSqlLimitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdsPgSqlLimit(string name, Input<string> id, RdsPgSqlLimitState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/rdsPgSqlLimit:RdsPgSqlLimit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdsPgSqlLimit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdsPgSqlLimit Get(string name, Input<string> id, RdsPgSqlLimitState? state = null, CustomResourceOptions? options = null)
        {
            return new RdsPgSqlLimit(name, id, state, options);
        }
    }

    public sealed class RdsPgSqlLimitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the database.
        /// </summary>
        [Input("dbName", required: true)]
        public Input<string> DbName { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specifies the number of SQL statements executed simultaneously
        /// </summary>
        [Input("maxConcurrency", required: true)]
        public Input<int> MaxConcurrency { get; set; } = null!;

        /// <summary>
        /// Specifies the max waiting time in seconds.
        /// </summary>
        [Input("maxWaiting", required: true)]
        public Input<int> MaxWaiting { get; set; } = null!;

        /// <summary>
        /// Specifies the query ID
        /// </summary>
        [Input("queryId")]
        public Input<string>? QueryId { get; set; }

        /// <summary>
        /// Specifies the text form of SQL statement.
        /// </summary>
        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the query order for names that are not schema qualified.
        /// </summary>
        [Input("searchPath")]
        public Input<string>? SearchPath { get; set; }

        /// <summary>
        /// Specifies the SQL limit switch.
        /// </summary>
        [Input("switch")]
        public Input<string>? Switch { get; set; }

        public RdsPgSqlLimitArgs()
        {
        }
        public static new RdsPgSqlLimitArgs Empty => new RdsPgSqlLimitArgs();
    }

    public sealed class RdsPgSqlLimitState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the database.
        /// </summary>
        [Input("dbName")]
        public Input<string>? DbName { get; set; }

        /// <summary>
        /// Specifies the ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Indicates whether the SQL limit is effective.
        /// </summary>
        [Input("isEffective")]
        public Input<bool>? IsEffective { get; set; }

        /// <summary>
        /// Specifies the number of SQL statements executed simultaneously
        /// </summary>
        [Input("maxConcurrency")]
        public Input<int>? MaxConcurrency { get; set; }

        /// <summary>
        /// Specifies the max waiting time in seconds.
        /// </summary>
        [Input("maxWaiting")]
        public Input<int>? MaxWaiting { get; set; }

        /// <summary>
        /// Specifies the query ID
        /// </summary>
        [Input("queryId")]
        public Input<string>? QueryId { get; set; }

        /// <summary>
        /// Specifies the text form of SQL statement.
        /// </summary>
        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the query order for names that are not schema qualified.
        /// </summary>
        [Input("searchPath")]
        public Input<string>? SearchPath { get; set; }

        /// <summary>
        /// Indicates the ID of SQL limit.
        /// </summary>
        [Input("sqlLimitId")]
        public Input<string>? SqlLimitId { get; set; }

        /// <summary>
        /// Specifies the SQL limit switch.
        /// </summary>
        [Input("switch")]
        public Input<string>? Switch { get; set; }

        public RdsPgSqlLimitState()
        {
        }
        public static new RdsPgSqlLimitState Empty => new RdsPgSqlLimitState();
    }
}
