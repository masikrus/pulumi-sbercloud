// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetVpnCustomerGateways
    {
        public static Task<GetVpnCustomerGatewaysResult> InvokeAsync(GetVpnCustomerGatewaysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnCustomerGatewaysResult>("sbercloud:index/getVpnCustomerGateways:getVpnCustomerGateways", args ?? new GetVpnCustomerGatewaysArgs(), options.WithDefaults());

        public static Output<GetVpnCustomerGatewaysResult> Invoke(GetVpnCustomerGatewaysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnCustomerGatewaysResult>("sbercloud:index/getVpnCustomerGateways:getVpnCustomerGateways", args ?? new GetVpnCustomerGatewaysInvokeArgs(), options.WithDefaults());

        public static Output<GetVpnCustomerGatewaysResult> Invoke(GetVpnCustomerGatewaysInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnCustomerGatewaysResult>("sbercloud:index/getVpnCustomerGateways:getVpnCustomerGateways", args ?? new GetVpnCustomerGatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnCustomerGatewaysArgs : global::Pulumi.InvokeArgs
    {
        [Input("asn")]
        public int? Asn { get; set; }

        [Input("customerGatewayId")]
        public string? CustomerGatewayId { get; set; }

        [Input("ip")]
        public string? Ip { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("routeMode")]
        public string? RouteMode { get; set; }

        public GetVpnCustomerGatewaysArgs()
        {
        }
        public static new GetVpnCustomerGatewaysArgs Empty => new GetVpnCustomerGatewaysArgs();
    }

    public sealed class GetVpnCustomerGatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("asn")]
        public Input<int>? Asn { get; set; }

        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("routeMode")]
        public Input<string>? RouteMode { get; set; }

        public GetVpnCustomerGatewaysInvokeArgs()
        {
        }
        public static new GetVpnCustomerGatewaysInvokeArgs Empty => new GetVpnCustomerGatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnCustomerGatewaysResult
    {
        public readonly int? Asn;
        public readonly string? CustomerGatewayId;
        public readonly ImmutableArray<Outputs.GetVpnCustomerGatewaysCustomerGatewayResult> CustomerGateways;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Ip;
        public readonly string? Name;
        public readonly string Region;
        public readonly string? RouteMode;

        [OutputConstructor]
        private GetVpnCustomerGatewaysResult(
            int? asn,

            string? customerGatewayId,

            ImmutableArray<Outputs.GetVpnCustomerGatewaysCustomerGatewayResult> customerGateways,

            string id,

            string? ip,

            string? name,

            string region,

            string? routeMode)
        {
            Asn = asn;
            CustomerGatewayId = customerGatewayId;
            CustomerGateways = customerGateways;
            Id = id;
            Ip = ip;
            Name = name;
            Region = region;
            RouteMode = routeMode;
        }
    }
}
