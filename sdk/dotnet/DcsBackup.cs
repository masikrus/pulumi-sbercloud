// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/dcsBackup:DcsBackup")]
    public partial class DcsBackup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the format of the DCS instance backup.
        /// </summary>
        [Output("backupFormat")]
        public Output<string> BackupFormat { get; private set; } = null!;

        /// <summary>
        /// Indicates the ID of the DCS instance backup.
        /// </summary>
        [Output("backupId")]
        public Output<string> BackupId { get; private set; } = null!;

        /// <summary>
        /// Indicates the time when the backup task is created.
        /// </summary>
        [Output("beginTime")]
        public Output<string> BeginTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the description of DCS instance backup.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates the time at which DCS instance backup is completed.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the DCS instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether restoration is supported. Value Options: **TRUE**, **FALSE**.
        /// </summary>
        [Output("isSupportRestore")]
        public Output<string> IsSupportRestore { get; private set; } = null!;

        /// <summary>
        /// Indicates the backup name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Indicates the size of the backup file (byte).
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Indicates the backup status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Indicates the backup type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DcsBackup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DcsBackup(string name, DcsBackupArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsBackup:DcsBackup", name, args ?? new DcsBackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DcsBackup(string name, Input<string> id, DcsBackupState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsBackup:DcsBackup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DcsBackup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DcsBackup Get(string name, Input<string> id, DcsBackupState? state = null, CustomResourceOptions? options = null)
        {
            return new DcsBackup(name, id, state, options);
        }
    }

    public sealed class DcsBackupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the format of the DCS instance backup.
        /// </summary>
        [Input("backupFormat")]
        public Input<string>? BackupFormat { get; set; }

        /// <summary>
        /// Specifies the description of DCS instance backup.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the DCS instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        public DcsBackupArgs()
        {
        }
        public static new DcsBackupArgs Empty => new DcsBackupArgs();
    }

    public sealed class DcsBackupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the format of the DCS instance backup.
        /// </summary>
        [Input("backupFormat")]
        public Input<string>? BackupFormat { get; set; }

        /// <summary>
        /// Indicates the ID of the DCS instance backup.
        /// </summary>
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        /// <summary>
        /// Indicates the time when the backup task is created.
        /// </summary>
        [Input("beginTime")]
        public Input<string>? BeginTime { get; set; }

        /// <summary>
        /// Specifies the description of DCS instance backup.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates the time at which DCS instance backup is completed.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// Specifies the ID of the DCS instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Indicates whether restoration is supported. Value Options: **TRUE**, **FALSE**.
        /// </summary>
        [Input("isSupportRestore")]
        public Input<string>? IsSupportRestore { get; set; }

        /// <summary>
        /// Indicates the backup name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Indicates the size of the backup file (byte).
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Indicates the backup status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Indicates the backup type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DcsBackupState()
        {
        }
        public static new DcsBackupState Empty => new DcsBackupState();
    }
}
