// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/dnsZone:DnsZone")]
    public partial class DnsZone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the zone.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The email address of the administrator managing the zone.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// The enterprise project ID of the zone.
        /// </summary>
        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        /// <summary>
        /// The list of the masters of the DNS server.
        /// </summary>
        [Output("masters")]
        public Output<ImmutableArray<string>> Masters { get; private set; } = null!;

        /// <summary>
        /// The name of the zone.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The recursive resolution proxy mode for subdomains of the private zone.
        /// </summary>
        [Output("proxyPattern")]
        public Output<string> ProxyPattern { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("routers")]
        public Output<ImmutableArray<Outputs.DnsZoneRouter>> Routers { get; private set; } = null!;

        /// <summary>
        /// The status of the zone.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The key/value pairs to associate with the zone.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The time to live (TTL) of the zone.
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The type of zone.
        /// </summary>
        [Output("zoneType")]
        public Output<string?> ZoneType { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZone(string name, DnsZoneArgs? args = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dnsZone:DnsZone", name, args ?? new DnsZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZone(string name, Input<string> id, DnsZoneState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dnsZone:DnsZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZone Get(string name, Input<string> id, DnsZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZone(name, id, state, options);
        }
    }

    public sealed class DnsZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the zone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The email address of the administrator managing the zone.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The enterprise project ID of the zone.
        /// </summary>
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        /// <summary>
        /// The name of the zone.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The recursive resolution proxy mode for subdomains of the private zone.
        /// </summary>
        [Input("proxyPattern")]
        public Input<string>? ProxyPattern { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("routers")]
        private InputList<Inputs.DnsZoneRouterArgs>? _routers;
        public InputList<Inputs.DnsZoneRouterArgs> Routers
        {
            get => _routers ?? (_routers = new InputList<Inputs.DnsZoneRouterArgs>());
            set => _routers = value;
        }

        /// <summary>
        /// The status of the zone.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The key/value pairs to associate with the zone.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time to live (TTL) of the zone.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The type of zone.
        /// </summary>
        [Input("zoneType")]
        public Input<string>? ZoneType { get; set; }

        public DnsZoneArgs()
        {
        }
        public static new DnsZoneArgs Empty => new DnsZoneArgs();
    }

    public sealed class DnsZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the zone.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The email address of the administrator managing the zone.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The enterprise project ID of the zone.
        /// </summary>
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("masters")]
        private InputList<string>? _masters;

        /// <summary>
        /// The list of the masters of the DNS server.
        /// </summary>
        public InputList<string> Masters
        {
            get => _masters ?? (_masters = new InputList<string>());
            set => _masters = value;
        }

        /// <summary>
        /// The name of the zone.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The recursive resolution proxy mode for subdomains of the private zone.
        /// </summary>
        [Input("proxyPattern")]
        public Input<string>? ProxyPattern { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("routers")]
        private InputList<Inputs.DnsZoneRouterGetArgs>? _routers;
        public InputList<Inputs.DnsZoneRouterGetArgs> Routers
        {
            get => _routers ?? (_routers = new InputList<Inputs.DnsZoneRouterGetArgs>());
            set => _routers = value;
        }

        /// <summary>
        /// The status of the zone.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The key/value pairs to associate with the zone.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time to live (TTL) of the zone.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The type of zone.
        /// </summary>
        [Input("zoneType")]
        public Input<string>? ZoneType { get; set; }

        public DnsZoneState()
        {
        }
        public static new DnsZoneState Empty => new DnsZoneState();
    }
}
