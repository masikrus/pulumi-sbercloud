// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cbrCheckpoint:CbrCheckpoint")]
    public partial class CbrCheckpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of backups configuration.
        /// </summary>
        [Output("backups")]
        public Output<ImmutableArray<Outputs.CbrCheckpointBackup>> Backups { get; private set; } = null!;

        /// <summary>
        /// The creation time of the checkpoint.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the checkpoint.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the backups are incremental backups.
        /// </summary>
        [Output("incremental")]
        public Output<bool?> Incremental { get; private set; } = null!;

        /// <summary>
        /// The name of the checkpoint.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region where the vault and backup resources are located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The status of the checkpoint.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of the vault where the checkpoint to create.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;


        /// <summary>
        /// Create a CbrCheckpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CbrCheckpoint(string name, CbrCheckpointArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cbrCheckpoint:CbrCheckpoint", name, args ?? new CbrCheckpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CbrCheckpoint(string name, Input<string> id, CbrCheckpointState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cbrCheckpoint:CbrCheckpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CbrCheckpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CbrCheckpoint Get(string name, Input<string> id, CbrCheckpointState? state = null, CustomResourceOptions? options = null)
        {
            return new CbrCheckpoint(name, id, state, options);
        }
    }

    public sealed class CbrCheckpointArgs : global::Pulumi.ResourceArgs
    {
        [Input("backups", required: true)]
        private InputList<Inputs.CbrCheckpointBackupArgs>? _backups;

        /// <summary>
        /// The list of backups configuration.
        /// </summary>
        public InputList<Inputs.CbrCheckpointBackupArgs> Backups
        {
            get => _backups ?? (_backups = new InputList<Inputs.CbrCheckpointBackupArgs>());
            set => _backups = value;
        }

        /// <summary>
        /// The description of the checkpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the backups are incremental backups.
        /// </summary>
        [Input("incremental")]
        public Input<bool>? Incremental { get; set; }

        /// <summary>
        /// The name of the checkpoint.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the vault and backup resources are located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the vault where the checkpoint to create.
        /// </summary>
        [Input("vaultId", required: true)]
        public Input<string> VaultId { get; set; } = null!;

        public CbrCheckpointArgs()
        {
        }
        public static new CbrCheckpointArgs Empty => new CbrCheckpointArgs();
    }

    public sealed class CbrCheckpointState : global::Pulumi.ResourceArgs
    {
        [Input("backups")]
        private InputList<Inputs.CbrCheckpointBackupGetArgs>? _backups;

        /// <summary>
        /// The list of backups configuration.
        /// </summary>
        public InputList<Inputs.CbrCheckpointBackupGetArgs> Backups
        {
            get => _backups ?? (_backups = new InputList<Inputs.CbrCheckpointBackupGetArgs>());
            set => _backups = value;
        }

        /// <summary>
        /// The creation time of the checkpoint.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the checkpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the backups are incremental backups.
        /// </summary>
        [Input("incremental")]
        public Input<bool>? Incremental { get; set; }

        /// <summary>
        /// The name of the checkpoint.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the vault and backup resources are located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The status of the checkpoint.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the vault where the checkpoint to create.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public CbrCheckpointState()
        {
        }
        public static new CbrCheckpointState Empty => new CbrCheckpointState();
    }
}
