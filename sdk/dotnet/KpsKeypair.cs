// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/kpsKeypair:KpsKeypair")]
    public partial class KpsKeypair : global::Pulumi.CustomResource
    {
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("encryptionType")]
        public Output<string> EncryptionType { get; private set; } = null!;

        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        [Output("isManaged")]
        public Output<bool> IsManaged { get; private set; } = null!;

        [Output("keyFile")]
        public Output<string> KeyFile { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        [Output("kmsKeyName")]
        public Output<string?> KmsKeyName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a KpsKeypair resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KpsKeypair(string name, KpsKeypairArgs? args = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/kpsKeypair:KpsKeypair", name, args ?? new KpsKeypairArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KpsKeypair(string name, Input<string> id, KpsKeypairState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/kpsKeypair:KpsKeypair", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KpsKeypair resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KpsKeypair Get(string name, Input<string> id, KpsKeypairState? state = null, CustomResourceOptions? options = null)
        {
            return new KpsKeypair(name, id, state, options);
        }
    }

    public sealed class KpsKeypairArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        [Input("keyFile")]
        public Input<string>? KeyFile { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public KpsKeypairArgs()
        {
        }
        public static new KpsKeypairArgs Empty => new KpsKeypairArgs();
    }

    public sealed class KpsKeypairState : global::Pulumi.ResourceArgs
    {
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("isManaged")]
        public Input<bool>? IsManaged { get; set; }

        [Input("keyFile")]
        public Input<string>? KeyFile { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public KpsKeypairState()
        {
        }
        public static new KpsKeypairState Empty => new KpsKeypairState();
    }
}
