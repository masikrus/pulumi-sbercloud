// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cceCluster:CceCluster")]
    public partial class CceCluster : global::Pulumi.CustomResource
    {
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        [Output("authenticatingProxyCa")]
        public Output<string?> AuthenticatingProxyCa { get; private set; } = null!;

        [Output("authenticatingProxyCert")]
        public Output<string?> AuthenticatingProxyCert { get; private set; } = null!;

        [Output("authenticatingProxyPrivateKey")]
        public Output<string?> AuthenticatingProxyPrivateKey { get; private set; } = null!;

        [Output("authenticationMode")]
        public Output<string?> AuthenticationMode { get; private set; } = null!;

        [Output("autoPay")]
        public Output<string?> AutoPay { get; private set; } = null!;

        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        [Output("billingMode")]
        public Output<int> BillingMode { get; private set; } = null!;

        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        [Output("certificateClusters")]
        public Output<ImmutableArray<Outputs.CceClusterCertificateCluster>> CertificateClusters { get; private set; } = null!;

        [Output("certificateUsers")]
        public Output<ImmutableArray<Outputs.CceClusterCertificateUser>> CertificateUsers { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("clusterType")]
        public Output<string?> ClusterType { get; private set; } = null!;

        [Output("clusterVersion")]
        public Output<string> ClusterVersion { get; private set; } = null!;

        [Output("componentConfigurations")]
        public Output<ImmutableArray<Outputs.CceClusterComponentConfiguration>> ComponentConfigurations { get; private set; } = null!;

        [Output("containerNetworkCidr")]
        public Output<string> ContainerNetworkCidr { get; private set; } = null!;

        [Output("containerNetworkType")]
        public Output<string> ContainerNetworkType { get; private set; } = null!;

        [Output("customSans")]
        public Output<ImmutableArray<string>> CustomSans { get; private set; } = null!;

        [Output("deleteAll")]
        public Output<string?> DeleteAll { get; private set; } = null!;

        [Output("deleteEfs")]
        public Output<string?> DeleteEfs { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("deleteEni")]
        public Output<string?> DeleteEni { get; private set; } = null!;

        [Output("deleteEvs")]
        public Output<string?> DeleteEvs { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("deleteNet")]
        public Output<string?> DeleteNet { get; private set; } = null!;

        [Output("deleteObs")]
        public Output<string?> DeleteObs { get; private set; } = null!;

        [Output("deleteSfs")]
        public Output<string?> DeleteSfs { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("eip")]
        public Output<string?> Eip { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("enableDistributeManagement")]
        public Output<bool?> EnableDistributeManagement { get; private set; } = null!;

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Output("eniSubnetCidr")]
        public Output<string> EniSubnetCidr { get; private set; } = null!;

        /// <summary>
        /// the IPv4 subnet ID of the subnet where the ENI resides
        /// </summary>
        [Output("eniSubnetId")]
        public Output<string> EniSubnetId { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("extendParam")]
        public Output<ImmutableDictionary<string, string>?> ExtendParam { get; private set; } = null!;

        [Output("extendParams")]
        public Output<ImmutableArray<Outputs.CceClusterExtendParam>> ExtendParams { get; private set; } = null!;

        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        [Output("hibernate")]
        public Output<bool?> Hibernate { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("highwaySubnetId")]
        public Output<string> HighwaySubnetId { get; private set; } = null!;

        [Output("ipv6Enable")]
        public Output<bool> Ipv6Enable { get; private set; } = null!;

        [Output("kubeConfigRaw")]
        public Output<string> KubeConfigRaw { get; private set; } = null!;

        [Output("kubeProxyMode")]
        public Output<string> KubeProxyMode { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("ltsReclaimPolicy")]
        public Output<string?> LtsReclaimPolicy { get; private set; } = null!;

        [Output("masters")]
        public Output<ImmutableArray<Outputs.CceClusterMaster>> Masters { get; private set; } = null!;

        [Output("multiAz")]
        public Output<bool?> MultiAz { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        [Output("serviceNetworkCidr")]
        public Output<string> ServiceNetworkCidr { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("supportIstio")]
        public Output<bool> SupportIstio { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a CceCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CceCluster(string name, CceClusterArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceCluster:CceCluster", name, args ?? new CceClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CceCluster(string name, Input<string> id, CceClusterState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceCluster:CceCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CceCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CceCluster Get(string name, Input<string> id, CceClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new CceCluster(name, id, state, options);
        }
    }

    public sealed class CceClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("authenticatingProxyCa")]
        public Input<string>? AuthenticatingProxyCa { get; set; }

        [Input("authenticatingProxyCert")]
        public Input<string>? AuthenticatingProxyCert { get; set; }

        [Input("authenticatingProxyPrivateKey")]
        public Input<string>? AuthenticatingProxyPrivateKey { get; set; }

        [Input("authenticationMode")]
        public Input<string>? AuthenticationMode { get; set; }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("billingMode")]
        public Input<int>? BillingMode { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("clusterVersion")]
        public Input<string>? ClusterVersion { get; set; }

        [Input("componentConfigurations")]
        private InputList<Inputs.CceClusterComponentConfigurationArgs>? _componentConfigurations;
        public InputList<Inputs.CceClusterComponentConfigurationArgs> ComponentConfigurations
        {
            get => _componentConfigurations ?? (_componentConfigurations = new InputList<Inputs.CceClusterComponentConfigurationArgs>());
            set => _componentConfigurations = value;
        }

        [Input("containerNetworkCidr")]
        public Input<string>? ContainerNetworkCidr { get; set; }

        [Input("containerNetworkType", required: true)]
        public Input<string> ContainerNetworkType { get; set; } = null!;

        [Input("customSans")]
        private InputList<string>? _customSans;
        public InputList<string> CustomSans
        {
            get => _customSans ?? (_customSans = new InputList<string>());
            set => _customSans = value;
        }

        [Input("deleteAll")]
        public Input<string>? DeleteAll { get; set; }

        [Input("deleteEfs")]
        public Input<string>? DeleteEfs { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("deleteEni")]
        public Input<string>? DeleteEni { get; set; }

        [Input("deleteEvs")]
        public Input<string>? DeleteEvs { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("deleteNet")]
        public Input<string>? DeleteNet { get; set; }

        [Input("deleteObs")]
        public Input<string>? DeleteObs { get; set; }

        [Input("deleteSfs")]
        public Input<string>? DeleteSfs { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("enableDistributeManagement")]
        public Input<bool>? EnableDistributeManagement { get; set; }

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Input("eniSubnetCidr")]
        public Input<string>? EniSubnetCidr { get; set; }

        /// <summary>
        /// the IPv4 subnet ID of the subnet where the ENI resides
        /// </summary>
        [Input("eniSubnetId")]
        public Input<string>? EniSubnetId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("extendParam")]
        private InputMap<string>? _extendParam;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> ExtendParam
        {
            get => _extendParam ?? (_extendParam = new InputMap<string>());
            set => _extendParam = value;
        }

        [Input("extendParams")]
        private InputList<Inputs.CceClusterExtendParamArgs>? _extendParams;
        public InputList<Inputs.CceClusterExtendParamArgs> ExtendParams
        {
            get => _extendParams ?? (_extendParams = new InputList<Inputs.CceClusterExtendParamArgs>());
            set => _extendParams = value;
        }

        [Input("flavorId", required: true)]
        public Input<string> FlavorId { get; set; } = null!;

        [Input("hibernate")]
        public Input<bool>? Hibernate { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("highwaySubnetId")]
        public Input<string>? HighwaySubnetId { get; set; }

        [Input("ipv6Enable")]
        public Input<bool>? Ipv6Enable { get; set; }

        [Input("kubeProxyMode")]
        public Input<string>? KubeProxyMode { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("ltsReclaimPolicy")]
        public Input<string>? LtsReclaimPolicy { get; set; }

        [Input("masters")]
        private InputList<Inputs.CceClusterMasterArgs>? _masters;
        public InputList<Inputs.CceClusterMasterArgs> Masters
        {
            get => _masters ?? (_masters = new InputList<Inputs.CceClusterMasterArgs>());
            set => _masters = value;
        }

        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("serviceNetworkCidr")]
        public Input<string>? ServiceNetworkCidr { get; set; }

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("supportIstio")]
        public Input<bool>? SupportIstio { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public CceClusterArgs()
        {
        }
        public static new CceClusterArgs Empty => new CceClusterArgs();
    }

    public sealed class CceClusterState : global::Pulumi.ResourceArgs
    {
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("authenticatingProxyCa")]
        public Input<string>? AuthenticatingProxyCa { get; set; }

        [Input("authenticatingProxyCert")]
        public Input<string>? AuthenticatingProxyCert { get; set; }

        [Input("authenticatingProxyPrivateKey")]
        public Input<string>? AuthenticatingProxyPrivateKey { get; set; }

        [Input("authenticationMode")]
        public Input<string>? AuthenticationMode { get; set; }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("billingMode")]
        public Input<int>? BillingMode { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("certificateClusters")]
        private InputList<Inputs.CceClusterCertificateClusterGetArgs>? _certificateClusters;
        public InputList<Inputs.CceClusterCertificateClusterGetArgs> CertificateClusters
        {
            get => _certificateClusters ?? (_certificateClusters = new InputList<Inputs.CceClusterCertificateClusterGetArgs>());
            set => _certificateClusters = value;
        }

        [Input("certificateUsers")]
        private InputList<Inputs.CceClusterCertificateUserGetArgs>? _certificateUsers;
        public InputList<Inputs.CceClusterCertificateUserGetArgs> CertificateUsers
        {
            get => _certificateUsers ?? (_certificateUsers = new InputList<Inputs.CceClusterCertificateUserGetArgs>());
            set => _certificateUsers = value;
        }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("clusterVersion")]
        public Input<string>? ClusterVersion { get; set; }

        [Input("componentConfigurations")]
        private InputList<Inputs.CceClusterComponentConfigurationGetArgs>? _componentConfigurations;
        public InputList<Inputs.CceClusterComponentConfigurationGetArgs> ComponentConfigurations
        {
            get => _componentConfigurations ?? (_componentConfigurations = new InputList<Inputs.CceClusterComponentConfigurationGetArgs>());
            set => _componentConfigurations = value;
        }

        [Input("containerNetworkCidr")]
        public Input<string>? ContainerNetworkCidr { get; set; }

        [Input("containerNetworkType")]
        public Input<string>? ContainerNetworkType { get; set; }

        [Input("customSans")]
        private InputList<string>? _customSans;
        public InputList<string> CustomSans
        {
            get => _customSans ?? (_customSans = new InputList<string>());
            set => _customSans = value;
        }

        [Input("deleteAll")]
        public Input<string>? DeleteAll { get; set; }

        [Input("deleteEfs")]
        public Input<string>? DeleteEfs { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("deleteEni")]
        public Input<string>? DeleteEni { get; set; }

        [Input("deleteEvs")]
        public Input<string>? DeleteEvs { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("deleteNet")]
        public Input<string>? DeleteNet { get; set; }

        [Input("deleteObs")]
        public Input<string>? DeleteObs { get; set; }

        [Input("deleteSfs")]
        public Input<string>? DeleteSfs { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eip")]
        public Input<string>? Eip { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("enableDistributeManagement")]
        public Input<bool>? EnableDistributeManagement { get; set; }

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Input("eniSubnetCidr")]
        public Input<string>? EniSubnetCidr { get; set; }

        /// <summary>
        /// the IPv4 subnet ID of the subnet where the ENI resides
        /// </summary>
        [Input("eniSubnetId")]
        public Input<string>? EniSubnetId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("extendParam")]
        private InputMap<string>? _extendParam;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> ExtendParam
        {
            get => _extendParam ?? (_extendParam = new InputMap<string>());
            set => _extendParam = value;
        }

        [Input("extendParams")]
        private InputList<Inputs.CceClusterExtendParamGetArgs>? _extendParams;
        public InputList<Inputs.CceClusterExtendParamGetArgs> ExtendParams
        {
            get => _extendParams ?? (_extendParams = new InputList<Inputs.CceClusterExtendParamGetArgs>());
            set => _extendParams = value;
        }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("hibernate")]
        public Input<bool>? Hibernate { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("highwaySubnetId")]
        public Input<string>? HighwaySubnetId { get; set; }

        [Input("ipv6Enable")]
        public Input<bool>? Ipv6Enable { get; set; }

        [Input("kubeConfigRaw")]
        public Input<string>? KubeConfigRaw { get; set; }

        [Input("kubeProxyMode")]
        public Input<string>? KubeProxyMode { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// schema: Internal
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("ltsReclaimPolicy")]
        public Input<string>? LtsReclaimPolicy { get; set; }

        [Input("masters")]
        private InputList<Inputs.CceClusterMasterGetArgs>? _masters;
        public InputList<Inputs.CceClusterMasterGetArgs> Masters
        {
            get => _masters ?? (_masters = new InputList<Inputs.CceClusterMasterGetArgs>());
            set => _masters = value;
        }

        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("serviceNetworkCidr")]
        public Input<string>? ServiceNetworkCidr { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("supportIstio")]
        public Input<bool>? SupportIstio { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public CceClusterState()
        {
        }
        public static new CceClusterState Empty => new CceClusterState();
    }
}
