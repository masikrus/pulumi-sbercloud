// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetElbFlavors
    {
        public static Task<GetElbFlavorsResult> InvokeAsync(GetElbFlavorsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetElbFlavorsResult>("sbercloud:index/getElbFlavors:getElbFlavors", args ?? new GetElbFlavorsArgs(), options.WithDefaults());

        public static Output<GetElbFlavorsResult> Invoke(GetElbFlavorsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetElbFlavorsResult>("sbercloud:index/getElbFlavors:getElbFlavors", args ?? new GetElbFlavorsInvokeArgs(), options.WithDefaults());

        public static Output<GetElbFlavorsResult> Invoke(GetElbFlavorsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetElbFlavorsResult>("sbercloud:index/getElbFlavors:getElbFlavors", args ?? new GetElbFlavorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetElbFlavorsArgs : global::Pulumi.InvokeArgs
    {
        [Input("bandwidth")]
        public int? Bandwidth { get; set; }

        [Input("cps")]
        public int? Cps { get; set; }

        [Input("maxConnections")]
        public int? MaxConnections { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("qps")]
        public int? Qps { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        public GetElbFlavorsArgs()
        {
        }
        public static new GetElbFlavorsArgs Empty => new GetElbFlavorsArgs();
    }

    public sealed class GetElbFlavorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        [Input("cps")]
        public Input<int>? Cps { get; set; }

        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("qps")]
        public Input<int>? Qps { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetElbFlavorsInvokeArgs()
        {
        }
        public static new GetElbFlavorsInvokeArgs Empty => new GetElbFlavorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetElbFlavorsResult
    {
        public readonly int? Bandwidth;
        public readonly int? Cps;
        public readonly ImmutableArray<Outputs.GetElbFlavorsFlavorResult> Flavors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly int? MaxConnections;
        public readonly string? Name;
        public readonly int? Qps;
        public readonly string Region;
        public readonly string? Type;

        [OutputConstructor]
        private GetElbFlavorsResult(
            int? bandwidth,

            int? cps,

            ImmutableArray<Outputs.GetElbFlavorsFlavorResult> flavors,

            string id,

            ImmutableArray<string> ids,

            int? maxConnections,

            string? name,

            int? qps,

            string region,

            string? type)
        {
            Bandwidth = bandwidth;
            Cps = cps;
            Flavors = flavors;
            Id = id;
            Ids = ids;
            MaxConnections = maxConnections;
            Name = name;
            Qps = qps;
            Region = region;
            Type = type;
        }
    }
}
