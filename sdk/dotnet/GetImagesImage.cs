// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetImagesImage
    {
        public static Task<GetImagesImageResult> InvokeAsync(GetImagesImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesImageResult>("sbercloud:index/getImagesImage:getImagesImage", args ?? new GetImagesImageArgs(), options.WithDefaults());

        public static Output<GetImagesImageResult> Invoke(GetImagesImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesImageResult>("sbercloud:index/getImagesImage:getImagesImage", args ?? new GetImagesImageInvokeArgs(), options.WithDefaults());

        public static Output<GetImagesImageResult> Invoke(GetImagesImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesImageResult>("sbercloud:index/getImagesImage:getImagesImage", args ?? new GetImagesImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesImageArgs : global::Pulumi.InvokeArgs
    {
        [Input("architecture")]
        public string? Architecture { get; set; }

        [Input("enterpriseProjectId")]
        public string? EnterpriseProjectId { get; set; }

        [Input("flavorId")]
        public string? FlavorId { get; set; }

        [Input("imageId")]
        public string? ImageId { get; set; }

        [Input("imageType")]
        public string? ImageType { get; set; }

        [Input("isWholeImage")]
        public bool? IsWholeImage { get; set; }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("os")]
        public string? Os { get; set; }

        [Input("osVersion")]
        public string? OsVersion { get; set; }

        [Input("owner")]
        public string? Owner { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("sizeMax")]
        public int? SizeMax { get; set; }

        [Input("sizeMin")]
        public int? SizeMin { get; set; }

        [Input("sortDirection")]
        public string? SortDirection { get; set; }

        [Input("sortKey")]
        public string? SortKey { get; set; }

        [Input("tag")]
        public string? Tag { get; set; }

        [Input("visibility")]
        public string? Visibility { get; set; }

        public GetImagesImageArgs()
        {
        }
        public static new GetImagesImageArgs Empty => new GetImagesImageArgs();
    }

    public sealed class GetImagesImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        [Input("isWholeImage")]
        public Input<bool>? IsWholeImage { get; set; }

        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("sizeMax")]
        public Input<int>? SizeMax { get; set; }

        [Input("sizeMin")]
        public Input<int>? SizeMin { get; set; }

        [Input("sortDirection")]
        public Input<string>? SortDirection { get; set; }

        [Input("sortKey")]
        public Input<string>? SortKey { get; set; }

        [Input("tag")]
        public Input<string>? Tag { get; set; }

        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public GetImagesImageInvokeArgs()
        {
        }
        public static new GetImagesImageInvokeArgs Empty => new GetImagesImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesImageResult
    {
        public readonly string ActiveAt;
        public readonly string Architecture;
        public readonly string BackupId;
        public readonly string Checksum;
        public readonly string ContainerFormat;
        public readonly string CreatedAt;
        public readonly string DataOrigin;
        public readonly string Description;
        public readonly string DiskFormat;
        public readonly string EnterpriseProjectId;
        public readonly string File;
        public readonly string? FlavorId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        public readonly string ImageType;
        public readonly bool? IsWholeImage;
        public readonly int MaxRamMb;
        public readonly ImmutableDictionary<string, string> Metadata;
        public readonly int MinDiskGb;
        public readonly int MinRamMb;
        public readonly bool? MostRecent;
        public readonly string Name;
        public readonly string? NameRegex;
        public readonly string Os;
        public readonly string OsVersion;
        public readonly string Owner;
        public readonly bool Protected;
        public readonly string Region;
        public readonly string Schema;
        public readonly int SizeBytes;
        public readonly int? SizeMax;
        public readonly int? SizeMin;
        public readonly string? SortDirection;
        public readonly string? SortKey;
        public readonly string Status;
        public readonly string? Tag;
        public readonly string UpdatedAt;
        public readonly string Visibility;

        [OutputConstructor]
        private GetImagesImageResult(
            string activeAt,

            string architecture,

            string backupId,

            string checksum,

            string containerFormat,

            string createdAt,

            string dataOrigin,

            string description,

            string diskFormat,

            string enterpriseProjectId,

            string file,

            string? flavorId,

            string id,

            string imageId,

            string imageType,

            bool? isWholeImage,

            int maxRamMb,

            ImmutableDictionary<string, string> metadata,

            int minDiskGb,

            int minRamMb,

            bool? mostRecent,

            string name,

            string? nameRegex,

            string os,

            string osVersion,

            string owner,

            bool @protected,

            string region,

            string schema,

            int sizeBytes,

            int? sizeMax,

            int? sizeMin,

            string? sortDirection,

            string? sortKey,

            string status,

            string? tag,

            string updatedAt,

            string visibility)
        {
            ActiveAt = activeAt;
            Architecture = architecture;
            BackupId = backupId;
            Checksum = checksum;
            ContainerFormat = containerFormat;
            CreatedAt = createdAt;
            DataOrigin = dataOrigin;
            Description = description;
            DiskFormat = diskFormat;
            EnterpriseProjectId = enterpriseProjectId;
            File = file;
            FlavorId = flavorId;
            Id = id;
            ImageId = imageId;
            ImageType = imageType;
            IsWholeImage = isWholeImage;
            MaxRamMb = maxRamMb;
            Metadata = metadata;
            MinDiskGb = minDiskGb;
            MinRamMb = minRamMb;
            MostRecent = mostRecent;
            Name = name;
            NameRegex = nameRegex;
            Os = os;
            OsVersion = osVersion;
            Owner = owner;
            Protected = @protected;
            Region = region;
            Schema = schema;
            SizeBytes = sizeBytes;
            SizeMax = sizeMax;
            SizeMin = sizeMin;
            SortDirection = sortDirection;
            SortKey = sortKey;
            Status = status;
            Tag = tag;
            UpdatedAt = updatedAt;
            Visibility = visibility;
        }
    }
}
