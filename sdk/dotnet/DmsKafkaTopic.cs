// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/dmsKafkaTopic:DmsKafkaTopic")]
    public partial class DmsKafkaTopic : global::Pulumi.CustomResource
    {
        [Output("agingTime")]
        public Output<int> AgingTime { get; private set; } = null!;

        [Output("configs")]
        public Output<ImmutableArray<Outputs.DmsKafkaTopicConfig>> Configs { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("newPartitionBrokers")]
        public Output<ImmutableArray<int>> NewPartitionBrokers { get; private set; } = null!;

        [Output("partitions")]
        public Output<int> Partitions { get; private set; } = null!;

        [Output("policiesOnly")]
        public Output<bool> PoliciesOnly { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("replicas")]
        public Output<int> Replicas { get; private set; } = null!;

        [Output("syncFlushing")]
        public Output<bool> SyncFlushing { get; private set; } = null!;

        [Output("syncReplication")]
        public Output<bool> SyncReplication { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DmsKafkaTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DmsKafkaTopic(string name, DmsKafkaTopicArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/dmsKafkaTopic:DmsKafkaTopic", name, args ?? new DmsKafkaTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DmsKafkaTopic(string name, Input<string> id, DmsKafkaTopicState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dmsKafkaTopic:DmsKafkaTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DmsKafkaTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DmsKafkaTopic Get(string name, Input<string> id, DmsKafkaTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new DmsKafkaTopic(name, id, state, options);
        }
    }

    public sealed class DmsKafkaTopicArgs : global::Pulumi.ResourceArgs
    {
        [Input("agingTime")]
        public Input<int>? AgingTime { get; set; }

        [Input("configs")]
        private InputList<Inputs.DmsKafkaTopicConfigArgs>? _configs;
        public InputList<Inputs.DmsKafkaTopicConfigArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.DmsKafkaTopicConfigArgs>());
            set => _configs = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("newPartitionBrokers")]
        private InputList<int>? _newPartitionBrokers;
        public InputList<int> NewPartitionBrokers
        {
            get => _newPartitionBrokers ?? (_newPartitionBrokers = new InputList<int>());
            set => _newPartitionBrokers = value;
        }

        [Input("partitions", required: true)]
        public Input<int> Partitions { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        [Input("syncFlushing")]
        public Input<bool>? SyncFlushing { get; set; }

        [Input("syncReplication")]
        public Input<bool>? SyncReplication { get; set; }

        public DmsKafkaTopicArgs()
        {
        }
        public static new DmsKafkaTopicArgs Empty => new DmsKafkaTopicArgs();
    }

    public sealed class DmsKafkaTopicState : global::Pulumi.ResourceArgs
    {
        [Input("agingTime")]
        public Input<int>? AgingTime { get; set; }

        [Input("configs")]
        private InputList<Inputs.DmsKafkaTopicConfigGetArgs>? _configs;
        public InputList<Inputs.DmsKafkaTopicConfigGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.DmsKafkaTopicConfigGetArgs>());
            set => _configs = value;
        }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("newPartitionBrokers")]
        private InputList<int>? _newPartitionBrokers;
        public InputList<int> NewPartitionBrokers
        {
            get => _newPartitionBrokers ?? (_newPartitionBrokers = new InputList<int>());
            set => _newPartitionBrokers = value;
        }

        [Input("partitions")]
        public Input<int>? Partitions { get; set; }

        [Input("policiesOnly")]
        public Input<bool>? PoliciesOnly { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        [Input("syncFlushing")]
        public Input<bool>? SyncFlushing { get; set; }

        [Input("syncReplication")]
        public Input<bool>? SyncReplication { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public DmsKafkaTopicState()
        {
        }
        public static new DmsKafkaTopicState Empty => new DmsKafkaTopicState();
    }
}
