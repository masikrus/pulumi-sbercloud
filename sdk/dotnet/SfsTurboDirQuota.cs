// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota")]
    public partial class SfsTurboDirQuota : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the size of the directory.
        /// </summary>
        [Output("capacity")]
        public Output<int?> Capacity { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of inodes allowed in the directory.
        /// </summary>
        [Output("inode")]
        public Output<int?> Inode { get; private set; } = null!;

        /// <summary>
        /// Specifies the valid full path of an existing directory.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Specifies the SFS Turbo ID.
        /// </summary>
        [Output("shareId")]
        public Output<string> ShareId { get; private set; } = null!;

        /// <summary>
        /// Specifies the size of the used directory.
        /// </summary>
        [Output("usedCapacity")]
        public Output<int> UsedCapacity { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of used inodes in the directory.
        /// </summary>
        [Output("usedInode")]
        public Output<int> UsedInode { get; private set; } = null!;


        /// <summary>
        /// Create a SfsTurboDirQuota resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SfsTurboDirQuota(string name, SfsTurboDirQuotaArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota", name, args ?? new SfsTurboDirQuotaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SfsTurboDirQuota(string name, Input<string> id, SfsTurboDirQuotaState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SfsTurboDirQuota resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SfsTurboDirQuota Get(string name, Input<string> id, SfsTurboDirQuotaState? state = null, CustomResourceOptions? options = null)
        {
            return new SfsTurboDirQuota(name, id, state, options);
        }
    }

    public sealed class SfsTurboDirQuotaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the size of the directory.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// Specifies the maximum number of inodes allowed in the directory.
        /// </summary>
        [Input("inode")]
        public Input<int>? Inode { get; set; }

        /// <summary>
        /// Specifies the valid full path of an existing directory.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the SFS Turbo ID.
        /// </summary>
        [Input("shareId", required: true)]
        public Input<string> ShareId { get; set; } = null!;

        public SfsTurboDirQuotaArgs()
        {
        }
        public static new SfsTurboDirQuotaArgs Empty => new SfsTurboDirQuotaArgs();
    }

    public sealed class SfsTurboDirQuotaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the size of the directory.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// Specifies the maximum number of inodes allowed in the directory.
        /// </summary>
        [Input("inode")]
        public Input<int>? Inode { get; set; }

        /// <summary>
        /// Specifies the valid full path of an existing directory.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the SFS Turbo ID.
        /// </summary>
        [Input("shareId")]
        public Input<string>? ShareId { get; set; }

        /// <summary>
        /// Specifies the size of the used directory.
        /// </summary>
        [Input("usedCapacity")]
        public Input<int>? UsedCapacity { get; set; }

        /// <summary>
        /// Specifies the number of used inodes in the directory.
        /// </summary>
        [Input("usedInode")]
        public Input<int>? UsedInode { get; set; }

        public SfsTurboDirQuotaState()
        {
        }
        public static new SfsTurboDirQuotaState Empty => new SfsTurboDirQuotaState();
    }
}
