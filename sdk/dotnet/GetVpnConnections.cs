// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetVpnConnections
    {
        public static Task<GetVpnConnectionsResult> InvokeAsync(GetVpnConnectionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnConnectionsResult>("sbercloud:index/getVpnConnections:getVpnConnections", args ?? new GetVpnConnectionsArgs(), options.WithDefaults());

        public static Output<GetVpnConnectionsResult> Invoke(GetVpnConnectionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionsResult>("sbercloud:index/getVpnConnections:getVpnConnections", args ?? new GetVpnConnectionsInvokeArgs(), options.WithDefaults());

        public static Output<GetVpnConnectionsResult> Invoke(GetVpnConnectionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionsResult>("sbercloud:index/getVpnConnections:getVpnConnections", args ?? new GetVpnConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnConnectionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId")]
        public string? ConnectionId { get; set; }

        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        [Input("gatewayIp")]
        public string? GatewayIp { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("vpnType")]
        public string? VpnType { get; set; }

        public GetVpnConnectionsArgs()
        {
        }
        public static new GetVpnConnectionsArgs Empty => new GetVpnConnectionsArgs();
    }

    public sealed class GetVpnConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("vpnType")]
        public Input<string>? VpnType { get; set; }

        public GetVpnConnectionsInvokeArgs()
        {
        }
        public static new GetVpnConnectionsInvokeArgs Empty => new GetVpnConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnConnectionsResult
    {
        public readonly string? ConnectionId;
        public readonly ImmutableArray<Outputs.GetVpnConnectionsConnectionResult> Connections;
        public readonly string? GatewayId;
        public readonly string? GatewayIp;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string Region;
        public readonly string? Status;
        public readonly string? VpnType;

        [OutputConstructor]
        private GetVpnConnectionsResult(
            string? connectionId,

            ImmutableArray<Outputs.GetVpnConnectionsConnectionResult> connections,

            string? gatewayId,

            string? gatewayIp,

            string id,

            string? name,

            string region,

            string? status,

            string? vpnType)
        {
            ConnectionId = connectionId;
            Connections = connections;
            GatewayId = gatewayId;
            GatewayIp = gatewayIp;
            Id = id;
            Name = name;
            Region = region;
            Status = status;
            VpnType = vpnType;
        }
    }
}
