// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetNetworkingPort
    {
        public static Task<GetNetworkingPortResult> InvokeAsync(GetNetworkingPortArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkingPortResult>("sbercloud:index/getNetworkingPort:getNetworkingPort", args ?? new GetNetworkingPortArgs(), options.WithDefaults());

        public static Output<GetNetworkingPortResult> Invoke(GetNetworkingPortInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkingPortResult>("sbercloud:index/getNetworkingPort:getNetworkingPort", args ?? new GetNetworkingPortInvokeArgs(), options.WithDefaults());

        public static Output<GetNetworkingPortResult> Invoke(GetNetworkingPortInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkingPortResult>("sbercloud:index/getNetworkingPort:getNetworkingPort", args ?? new GetNetworkingPortInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkingPortArgs : global::Pulumi.InvokeArgs
    {
        [Input("adminStateUp")]
        public bool? AdminStateUp { get; set; }

        [Input("deviceId")]
        public string? DeviceId { get; set; }

        [Input("deviceOwner")]
        public string? DeviceOwner { get; set; }

        [Input("fixedIp")]
        public string? FixedIp { get; set; }

        [Input("macAddress")]
        public string? MacAddress { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("networkId")]
        public string? NetworkId { get; set; }

        [Input("portId")]
        public string? PortId { get; set; }

        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("securityGroupIds")]
        private List<string>? _securityGroupIds;
        public List<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new List<string>());
            set => _securityGroupIds = value;
        }

        [Input("status")]
        public string? Status { get; set; }

        [Input("tenantId")]
        public string? TenantId { get; set; }

        public GetNetworkingPortArgs()
        {
        }
        public static new GetNetworkingPortArgs Empty => new GetNetworkingPortArgs();
    }

    public sealed class GetNetworkingPortInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("adminStateUp")]
        public Input<bool>? AdminStateUp { get; set; }

        [Input("deviceId")]
        public Input<string>? DeviceId { get; set; }

        [Input("deviceOwner")]
        public Input<string>? DeviceOwner { get; set; }

        [Input("fixedIp")]
        public Input<string>? FixedIp { get; set; }

        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("portId")]
        public Input<string>? PortId { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public GetNetworkingPortInvokeArgs()
        {
        }
        public static new GetNetworkingPortInvokeArgs Empty => new GetNetworkingPortInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkingPortResult
    {
        public readonly bool AdminStateUp;
        public readonly ImmutableArray<string> AllAllowedIps;
        public readonly ImmutableArray<string> AllFixedIps;
        public readonly ImmutableArray<string> AllSecurityGroupIds;
        public readonly string DeviceId;
        public readonly string DeviceOwner;
        public readonly string? FixedIp;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MacAddress;
        public readonly string Name;
        public readonly string NetworkId;
        public readonly string PortId;
        public readonly string? ProjectId;
        public readonly string Region;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly string Status;
        public readonly string? TenantId;

        [OutputConstructor]
        private GetNetworkingPortResult(
            bool adminStateUp,

            ImmutableArray<string> allAllowedIps,

            ImmutableArray<string> allFixedIps,

            ImmutableArray<string> allSecurityGroupIds,

            string deviceId,

            string deviceOwner,

            string? fixedIp,

            string id,

            string macAddress,

            string name,

            string networkId,

            string portId,

            string? projectId,

            string region,

            ImmutableArray<string> securityGroupIds,

            string status,

            string? tenantId)
        {
            AdminStateUp = adminStateUp;
            AllAllowedIps = allAllowedIps;
            AllFixedIps = allFixedIps;
            AllSecurityGroupIds = allSecurityGroupIds;
            DeviceId = deviceId;
            DeviceOwner = deviceOwner;
            FixedIp = fixedIp;
            Id = id;
            MacAddress = macAddress;
            Name = name;
            NetworkId = networkId;
            PortId = portId;
            ProjectId = projectId;
            Region = region;
            SecurityGroupIds = securityGroupIds;
            Status = status;
            TenantId = tenantId;
        }
    }
}
