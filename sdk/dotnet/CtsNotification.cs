// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/ctsNotification:CtsNotification")]
    public partial class CtsNotification : global::Pulumi.CustomResource
    {
        [Output("agencyName")]
        public Output<string?> AgencyName { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("filter")]
        public Output<Outputs.CtsNotificationFilter?> Filter { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notificationId")]
        public Output<string> NotificationId { get; private set; } = null!;

        [Output("operationType")]
        public Output<string> OperationType { get; private set; } = null!;

        [Output("operationUsers")]
        public Output<ImmutableArray<Outputs.CtsNotificationOperationUser>> OperationUsers { get; private set; } = null!;

        [Output("operations")]
        public Output<ImmutableArray<Outputs.CtsNotificationOperation>> Operations { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("smnTopic")]
        public Output<string?> SmnTopic { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a CtsNotification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CtsNotification(string name, CtsNotificationArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/ctsNotification:CtsNotification", name, args ?? new CtsNotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CtsNotification(string name, Input<string> id, CtsNotificationState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/ctsNotification:CtsNotification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CtsNotification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CtsNotification Get(string name, Input<string> id, CtsNotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new CtsNotification(name, id, state, options);
        }
    }

    public sealed class CtsNotificationArgs : global::Pulumi.ResourceArgs
    {
        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filter")]
        public Input<Inputs.CtsNotificationFilterArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operationType", required: true)]
        public Input<string> OperationType { get; set; } = null!;

        [Input("operationUsers")]
        private InputList<Inputs.CtsNotificationOperationUserArgs>? _operationUsers;
        public InputList<Inputs.CtsNotificationOperationUserArgs> OperationUsers
        {
            get => _operationUsers ?? (_operationUsers = new InputList<Inputs.CtsNotificationOperationUserArgs>());
            set => _operationUsers = value;
        }

        [Input("operations")]
        private InputList<Inputs.CtsNotificationOperationArgs>? _operations;
        public InputList<Inputs.CtsNotificationOperationArgs> Operations
        {
            get => _operations ?? (_operations = new InputList<Inputs.CtsNotificationOperationArgs>());
            set => _operations = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("smnTopic")]
        public Input<string>? SmnTopic { get; set; }

        public CtsNotificationArgs()
        {
        }
        public static new CtsNotificationArgs Empty => new CtsNotificationArgs();
    }

    public sealed class CtsNotificationState : global::Pulumi.ResourceArgs
    {
        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filter")]
        public Input<Inputs.CtsNotificationFilterGetArgs>? Filter { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationId")]
        public Input<string>? NotificationId { get; set; }

        [Input("operationType")]
        public Input<string>? OperationType { get; set; }

        [Input("operationUsers")]
        private InputList<Inputs.CtsNotificationOperationUserGetArgs>? _operationUsers;
        public InputList<Inputs.CtsNotificationOperationUserGetArgs> OperationUsers
        {
            get => _operationUsers ?? (_operationUsers = new InputList<Inputs.CtsNotificationOperationUserGetArgs>());
            set => _operationUsers = value;
        }

        [Input("operations")]
        private InputList<Inputs.CtsNotificationOperationGetArgs>? _operations;
        public InputList<Inputs.CtsNotificationOperationGetArgs> Operations
        {
            get => _operations ?? (_operations = new InputList<Inputs.CtsNotificationOperationGetArgs>());
            set => _operations = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("smnTopic")]
        public Input<string>? SmnTopic { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public CtsNotificationState()
        {
        }
        public static new CtsNotificationState Empty => new CtsNotificationState();
    }
}
