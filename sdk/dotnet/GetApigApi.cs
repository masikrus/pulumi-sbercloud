// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetApigApi
    {
        public static Task<GetApigApiResult> InvokeAsync(GetApigApiArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApigApiResult>("sbercloud:index/getApigApi:getApigApi", args ?? new GetApigApiArgs(), options.WithDefaults());

        public static Output<GetApigApiResult> Invoke(GetApigApiInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApigApiResult>("sbercloud:index/getApigApi:getApigApi", args ?? new GetApigApiInvokeArgs(), options.WithDefaults());

        public static Output<GetApigApiResult> Invoke(GetApigApiInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApigApiResult>("sbercloud:index/getApigApi:getApigApi", args ?? new GetApigApiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApigApiArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("region")]
        public string? Region { get; set; }

        public GetApigApiArgs()
        {
        }
        public static new GetApigApiArgs Empty => new GetApigApiArgs();
    }

    public sealed class GetApigApiInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetApigApiInvokeArgs()
        {
        }
        public static new GetApigApiInvokeArgs Empty => new GetApigApiInvokeArgs();
    }


    [OutputType]
    public sealed class GetApigApiResult
    {
        public readonly string ApiId;
        public readonly string AuthorizerId;
        public readonly ImmutableArray<Outputs.GetApigApiBackendParamResult> BackendParams;
        public readonly string BackendType;
        public readonly string BodyDescription;
        public readonly bool Cors;
        public readonly string Description;
        public readonly string EnvId;
        public readonly string EnvName;
        public readonly string FailureResponse;
        public readonly ImmutableArray<Outputs.GetApigApiFuncGraphPolicyResult> FuncGraphPolicies;
        public readonly ImmutableArray<Outputs.GetApigApiFuncGraphResult> FuncGraphs;
        public readonly string GroupId;
        public readonly string GroupName;
        public readonly string GroupVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string Matching;
        public readonly ImmutableArray<Outputs.GetApigApiMockPolicyResult> MockPolicies;
        public readonly ImmutableArray<Outputs.GetApigApiMockResult> Mocks;
        public readonly string Name;
        public readonly string PublishId;
        public readonly string PublishedAt;
        public readonly string Region;
        public readonly string RegisteredAt;
        public readonly string RequestMethod;
        public readonly ImmutableArray<Outputs.GetApigApiRequestParamResult> RequestParams;
        public readonly string RequestPath;
        public readonly string RequestProtocol;
        public readonly string ResponseId;
        public readonly string SecurityAuthentication;
        public readonly bool SimpleAuthentication;
        public readonly string SuccessResponse;
        public readonly ImmutableArray<string> Tags;
        public readonly string Type;
        public readonly string UpdatedAt;
        public readonly ImmutableArray<Outputs.GetApigApiWebPolicyResult> WebPolicies;
        public readonly ImmutableArray<Outputs.GetApigApiWebResult> Webs;

        [OutputConstructor]
        private GetApigApiResult(
            string apiId,

            string authorizerId,

            ImmutableArray<Outputs.GetApigApiBackendParamResult> backendParams,

            string backendType,

            string bodyDescription,

            bool cors,

            string description,

            string envId,

            string envName,

            string failureResponse,

            ImmutableArray<Outputs.GetApigApiFuncGraphPolicyResult> funcGraphPolicies,

            ImmutableArray<Outputs.GetApigApiFuncGraphResult> funcGraphs,

            string groupId,

            string groupName,

            string groupVersion,

            string id,

            string instanceId,

            string matching,

            ImmutableArray<Outputs.GetApigApiMockPolicyResult> mockPolicies,

            ImmutableArray<Outputs.GetApigApiMockResult> mocks,

            string name,

            string publishId,

            string publishedAt,

            string region,

            string registeredAt,

            string requestMethod,

            ImmutableArray<Outputs.GetApigApiRequestParamResult> requestParams,

            string requestPath,

            string requestProtocol,

            string responseId,

            string securityAuthentication,

            bool simpleAuthentication,

            string successResponse,

            ImmutableArray<string> tags,

            string type,

            string updatedAt,

            ImmutableArray<Outputs.GetApigApiWebPolicyResult> webPolicies,

            ImmutableArray<Outputs.GetApigApiWebResult> webs)
        {
            ApiId = apiId;
            AuthorizerId = authorizerId;
            BackendParams = backendParams;
            BackendType = backendType;
            BodyDescription = bodyDescription;
            Cors = cors;
            Description = description;
            EnvId = envId;
            EnvName = envName;
            FailureResponse = failureResponse;
            FuncGraphPolicies = funcGraphPolicies;
            FuncGraphs = funcGraphs;
            GroupId = groupId;
            GroupName = groupName;
            GroupVersion = groupVersion;
            Id = id;
            InstanceId = instanceId;
            Matching = matching;
            MockPolicies = mockPolicies;
            Mocks = mocks;
            Name = name;
            PublishId = publishId;
            PublishedAt = publishedAt;
            Region = region;
            RegisteredAt = registeredAt;
            RequestMethod = requestMethod;
            RequestParams = requestParams;
            RequestPath = requestPath;
            RequestProtocol = requestProtocol;
            ResponseId = responseId;
            SecurityAuthentication = securityAuthentication;
            SimpleAuthentication = simpleAuthentication;
            SuccessResponse = successResponse;
            Tags = tags;
            Type = type;
            UpdatedAt = updatedAt;
            WebPolicies = webPolicies;
            Webs = webs;
        }
    }
}
