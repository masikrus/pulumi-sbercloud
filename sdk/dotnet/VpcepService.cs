// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/vpcepService:VpcepService")]
    public partial class VpcepService : global::Pulumi.CustomResource
    {
        [Output("approval")]
        public Output<bool> Approval { get; private set; } = null!;

        [Output("connections")]
        public Output<ImmutableArray<Outputs.VpcepServiceConnection>> Connections { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("enablePolicy")]
        public Output<bool> EnablePolicy { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organizationPermissions")]
        public Output<ImmutableArray<string>> OrganizationPermissions { get; private set; } = null!;

        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;

        [Output("portId")]
        public Output<string> PortId { get; private set; } = null!;

        [Output("portMappings")]
        public Output<ImmutableArray<Outputs.VpcepServicePortMapping>> PortMappings { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("serverType")]
        public Output<string> ServerType { get; private set; } = null!;

        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Output("serviceType")]
        public Output<string?> ServiceType { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a VpcepService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpcepService(string name, VpcepServiceArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/vpcepService:VpcepService", name, args ?? new VpcepServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpcepService(string name, Input<string> id, VpcepServiceState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/vpcepService:VpcepService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpcepService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpcepService Get(string name, Input<string> id, VpcepServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new VpcepService(name, id, state, options);
        }
    }

    public sealed class VpcepServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("approval")]
        public Input<bool>? Approval { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enablePolicy")]
        public Input<bool>? EnablePolicy { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organizationPermissions")]
        private InputList<string>? _organizationPermissions;
        public InputList<string> OrganizationPermissions
        {
            get => _organizationPermissions ?? (_organizationPermissions = new InputList<string>());
            set => _organizationPermissions = value;
        }

        [Input("permissions")]
        private InputList<string>? _permissions;
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("portId", required: true)]
        public Input<string> PortId { get; set; } = null!;

        [Input("portMappings", required: true)]
        private InputList<Inputs.VpcepServicePortMappingArgs>? _portMappings;
        public InputList<Inputs.VpcepServicePortMappingArgs> PortMappings
        {
            get => _portMappings ?? (_portMappings = new InputList<Inputs.VpcepServicePortMappingArgs>());
            set => _portMappings = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("serverType", required: true)]
        public Input<string> ServerType { get; set; } = null!;

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public VpcepServiceArgs()
        {
        }
        public static new VpcepServiceArgs Empty => new VpcepServiceArgs();
    }

    public sealed class VpcepServiceState : global::Pulumi.ResourceArgs
    {
        [Input("approval")]
        public Input<bool>? Approval { get; set; }

        [Input("connections")]
        private InputList<Inputs.VpcepServiceConnectionGetArgs>? _connections;
        public InputList<Inputs.VpcepServiceConnectionGetArgs> Connections
        {
            get => _connections ?? (_connections = new InputList<Inputs.VpcepServiceConnectionGetArgs>());
            set => _connections = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enablePolicy")]
        public Input<bool>? EnablePolicy { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organizationPermissions")]
        private InputList<string>? _organizationPermissions;
        public InputList<string> OrganizationPermissions
        {
            get => _organizationPermissions ?? (_organizationPermissions = new InputList<string>());
            set => _organizationPermissions = value;
        }

        [Input("permissions")]
        private InputList<string>? _permissions;
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("portId")]
        public Input<string>? PortId { get; set; }

        [Input("portMappings")]
        private InputList<Inputs.VpcepServicePortMappingGetArgs>? _portMappings;
        public InputList<Inputs.VpcepServicePortMappingGetArgs> PortMappings
        {
            get => _portMappings ?? (_portMappings = new InputList<Inputs.VpcepServicePortMappingGetArgs>());
            set => _portMappings = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public VpcepServiceState()
        {
        }
        public static new VpcepServiceState Empty => new VpcepServiceState();
    }
}
