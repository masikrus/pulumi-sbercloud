// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cssCluster:CssCluster")]
    public partial class CssCluster : global::Pulumi.CustomResource
    {
        [Output("backupStrategy")]
        public Output<Outputs.CssClusterBackupStrategy?> BackupStrategy { get; private set; } = null!;

        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        [Output("engineType")]
        public Output<string?> EngineType { get; private set; } = null!;

        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("expectNodeNum")]
        public Output<int?> ExpectNodeNum { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nodeConfig")]
        public Output<Outputs.CssClusterNodeConfig> NodeConfig { get; private set; } = null!;

        [Output("nodes")]
        public Output<ImmutableArray<Outputs.CssClusterNode>> Nodes { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("securityMode")]
        public Output<bool?> SecurityMode { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a CssCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CssCluster(string name, CssClusterArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cssCluster:CssCluster", name, args ?? new CssClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CssCluster(string name, Input<string> id, CssClusterState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cssCluster:CssCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CssCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CssCluster Get(string name, Input<string> id, CssClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new CssCluster(name, id, state, options);
        }
    }

    public sealed class CssClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupStrategy")]
        public Input<Inputs.CssClusterBackupStrategyArgs>? BackupStrategy { get; set; }

        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        [Input("engineVersion", required: true)]
        public Input<string> EngineVersion { get; set; } = null!;

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("expectNodeNum")]
        public Input<int>? ExpectNodeNum { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeConfig", required: true)]
        public Input<Inputs.CssClusterNodeConfigArgs> NodeConfig { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityMode")]
        public Input<bool>? SecurityMode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CssClusterArgs()
        {
        }
        public static new CssClusterArgs Empty => new CssClusterArgs();
    }

    public sealed class CssClusterState : global::Pulumi.ResourceArgs
    {
        [Input("backupStrategy")]
        public Input<Inputs.CssClusterBackupStrategyGetArgs>? BackupStrategy { get; set; }

        [Input("created")]
        public Input<string>? Created { get; set; }

        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("expectNodeNum")]
        public Input<int>? ExpectNodeNum { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeConfig")]
        public Input<Inputs.CssClusterNodeConfigGetArgs>? NodeConfig { get; set; }

        [Input("nodes")]
        private InputList<Inputs.CssClusterNodeGetArgs>? _nodes;
        public InputList<Inputs.CssClusterNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.CssClusterNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityMode")]
        public Input<bool>? SecurityMode { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CssClusterState()
        {
        }
        public static new CssClusterState Empty => new CssClusterState();
    }
}
