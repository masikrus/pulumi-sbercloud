// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/dcsAccount:DcsAccount")]
    public partial class DcsAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the account.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// Specifies the password of the account.
        /// </summary>
        [Output("accountPassword")]
        public Output<string> AccountPassword { get; private set; } = null!;

        /// <summary>
        /// Specifies the role of the account.
        /// </summary>
        [Output("accountRole")]
        public Output<string> AccountRole { get; private set; } = null!;

        /// <summary>
        /// Indicates the type of the account.
        /// </summary>
        [Output("accountType")]
        public Output<string> AccountType { get; private set; } = null!;

        /// <summary>
        /// Specifies the description of the account.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the DCS instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Indicates the status of the account.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DcsAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DcsAccount(string name, DcsAccountArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsAccount:DcsAccount", name, args ?? new DcsAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DcsAccount(string name, Input<string> id, DcsAccountState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsAccount:DcsAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accountPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DcsAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DcsAccount Get(string name, Input<string> id, DcsAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new DcsAccount(name, id, state, options);
        }
    }

    public sealed class DcsAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the account.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("accountPassword", required: true)]
        private Input<string>? _accountPassword;

        /// <summary>
        /// Specifies the password of the account.
        /// </summary>
        public Input<string>? AccountPassword
        {
            get => _accountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the role of the account.
        /// </summary>
        [Input("accountRole", required: true)]
        public Input<string> AccountRole { get; set; } = null!;

        /// <summary>
        /// Specifies the description of the account.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the DCS instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        public DcsAccountArgs()
        {
        }
        public static new DcsAccountArgs Empty => new DcsAccountArgs();
    }

    public sealed class DcsAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the account.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("accountPassword")]
        private Input<string>? _accountPassword;

        /// <summary>
        /// Specifies the password of the account.
        /// </summary>
        public Input<string>? AccountPassword
        {
            get => _accountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the role of the account.
        /// </summary>
        [Input("accountRole")]
        public Input<string>? AccountRole { get; set; }

        /// <summary>
        /// Indicates the type of the account.
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        /// <summary>
        /// Specifies the description of the account.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the DCS instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Indicates the status of the account.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DcsAccountState()
        {
        }
        public static new DcsAccountState Empty => new DcsAccountState();
    }
}
