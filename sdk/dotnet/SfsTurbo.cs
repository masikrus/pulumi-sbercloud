// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/sfsTurbo:SfsTurbo")]
    public partial class SfsTurbo : global::Pulumi.CustomResource
    {
        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("availableCapacity")]
        public Output<string> AvailableCapacity { get; private set; } = null!;

        [Output("backupId")]
        public Output<string> BackupId { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("cryptKeyId")]
        public Output<string?> CryptKeyId { get; private set; } = null!;

        [Output("dedicatedFlavor")]
        public Output<string?> DedicatedFlavor { get; private set; } = null!;

        [Output("dedicatedStorageId")]
        public Output<string?> DedicatedStorageId { get; private set; } = null!;

        [Output("enhanced")]
        public Output<bool> Enhanced { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("exportLocation")]
        public Output<string> ExportLocation { get; private set; } = null!;

        [Output("hpcBandwidth")]
        public Output<string> HpcBandwidth { get; private set; } = null!;

        [Output("hpcCacheBandwidth")]
        public Output<string> HpcCacheBandwidth { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        [Output("shareProto")]
        public Output<string?> ShareProto { get; private set; } = null!;

        [Output("shareType")]
        public Output<string?> ShareType { get; private set; } = null!;

        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a SfsTurbo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SfsTurbo(string name, SfsTurboArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/sfsTurbo:SfsTurbo", name, args ?? new SfsTurboArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SfsTurbo(string name, Input<string> id, SfsTurboState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/sfsTurbo:SfsTurbo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SfsTurbo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SfsTurbo Get(string name, Input<string> id, SfsTurboState? state = null, CustomResourceOptions? options = null)
        {
            return new SfsTurbo(name, id, state, options);
        }
    }

    public sealed class SfsTurboArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("cryptKeyId")]
        public Input<string>? CryptKeyId { get; set; }

        [Input("dedicatedFlavor")]
        public Input<string>? DedicatedFlavor { get; set; }

        [Input("dedicatedStorageId")]
        public Input<string>? DedicatedStorageId { get; set; }

        [Input("enhanced")]
        public Input<bool>? Enhanced { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("hpcBandwidth")]
        public Input<string>? HpcBandwidth { get; set; }

        [Input("hpcCacheBandwidth")]
        public Input<string>? HpcCacheBandwidth { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupId", required: true)]
        public Input<string> SecurityGroupId { get; set; } = null!;

        [Input("shareProto")]
        public Input<string>? ShareProto { get; set; }

        [Input("shareType")]
        public Input<string>? ShareType { get; set; }

        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public SfsTurboArgs()
        {
        }
        public static new SfsTurboArgs Empty => new SfsTurboArgs();
    }

    public sealed class SfsTurboState : global::Pulumi.ResourceArgs
    {
        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("availableCapacity")]
        public Input<string>? AvailableCapacity { get; set; }

        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("cryptKeyId")]
        public Input<string>? CryptKeyId { get; set; }

        [Input("dedicatedFlavor")]
        public Input<string>? DedicatedFlavor { get; set; }

        [Input("dedicatedStorageId")]
        public Input<string>? DedicatedStorageId { get; set; }

        [Input("enhanced")]
        public Input<bool>? Enhanced { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("exportLocation")]
        public Input<string>? ExportLocation { get; set; }

        [Input("hpcBandwidth")]
        public Input<string>? HpcBandwidth { get; set; }

        [Input("hpcCacheBandwidth")]
        public Input<string>? HpcCacheBandwidth { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("shareProto")]
        public Input<string>? ShareProto { get; set; }

        [Input("shareType")]
        public Input<string>? ShareType { get; set; }

        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public SfsTurboState()
        {
        }
        public static new SfsTurboState Empty => new SfsTurboState();
    }
}
