// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud.Outputs
{

    [OutputType]
    public sealed class GetDmsKafkaInstancesInstanceResult
    {
        public readonly string AccessUser;
        public readonly ImmutableArray<string> AvailabilityZones;
        public readonly string ConnectAddress;
        public readonly ImmutableArray<Outputs.GetDmsKafkaInstancesInstanceCrossVpcAccessResult> CrossVpcAccesses;
        public readonly string Description;
        public readonly bool Dumping;
        public readonly bool EnableAutoTopic;
        public readonly bool EnablePublicIp;
        public readonly ImmutableArray<string> EnabledMechanisms;
        public readonly string EngineVersion;
        public readonly string EnterpriseProjectId;
        public readonly string Id;
        public readonly string MaintainBegin;
        public readonly string MaintainEnd;
        public readonly string ManagementConnectAddress;
        public readonly string ManagerUser;
        public readonly string ManegementConnectAddress;
        public readonly string Name;
        public readonly string NetworkId;
        public readonly int PartitionNum;
        public readonly int Port;
        public readonly string ProductId;
        public readonly string PublicConnAddresses;
        public readonly ImmutableArray<string> PublicIpIds;
        public readonly string ResourceSpecCode;
        public readonly string RetentionPolicy;
        public readonly string SecurityGroupId;
        public readonly string SecurityProtocol;
        public readonly bool SslEnable;
        public readonly string Status;
        public readonly int StorageSpace;
        public readonly string StorageSpecCode;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Type;
        public readonly int UsedStorageSpace;
        public readonly string UserId;
        public readonly string UserName;
        public readonly string VpcId;

        [OutputConstructor]
        private GetDmsKafkaInstancesInstanceResult(
            string accessUser,

            ImmutableArray<string> availabilityZones,

            string connectAddress,

            ImmutableArray<Outputs.GetDmsKafkaInstancesInstanceCrossVpcAccessResult> crossVpcAccesses,

            string description,

            bool dumping,

            bool enableAutoTopic,

            bool enablePublicIp,

            ImmutableArray<string> enabledMechanisms,

            string engineVersion,

            string enterpriseProjectId,

            string id,

            string maintainBegin,

            string maintainEnd,

            string managementConnectAddress,

            string managerUser,

            string manegementConnectAddress,

            string name,

            string networkId,

            int partitionNum,

            int port,

            string productId,

            string publicConnAddresses,

            ImmutableArray<string> publicIpIds,

            string resourceSpecCode,

            string retentionPolicy,

            string securityGroupId,

            string securityProtocol,

            bool sslEnable,

            string status,

            int storageSpace,

            string storageSpecCode,

            ImmutableDictionary<string, string> tags,

            string type,

            int usedStorageSpace,

            string userId,

            string userName,

            string vpcId)
        {
            AccessUser = accessUser;
            AvailabilityZones = availabilityZones;
            ConnectAddress = connectAddress;
            CrossVpcAccesses = crossVpcAccesses;
            Description = description;
            Dumping = dumping;
            EnableAutoTopic = enableAutoTopic;
            EnablePublicIp = enablePublicIp;
            EnabledMechanisms = enabledMechanisms;
            EngineVersion = engineVersion;
            EnterpriseProjectId = enterpriseProjectId;
            Id = id;
            MaintainBegin = maintainBegin;
            MaintainEnd = maintainEnd;
            ManagementConnectAddress = managementConnectAddress;
            ManagerUser = managerUser;
            ManegementConnectAddress = manegementConnectAddress;
            Name = name;
            NetworkId = networkId;
            PartitionNum = partitionNum;
            Port = port;
            ProductId = productId;
            PublicConnAddresses = publicConnAddresses;
            PublicIpIds = publicIpIds;
            ResourceSpecCode = resourceSpecCode;
            RetentionPolicy = retentionPolicy;
            SecurityGroupId = securityGroupId;
            SecurityProtocol = securityProtocol;
            SslEnable = sslEnable;
            Status = status;
            StorageSpace = storageSpace;
            StorageSpecCode = storageSpecCode;
            Tags = tags;
            Type = type;
            UsedStorageSpace = usedStorageSpace;
            UserId = userId;
            UserName = userName;
            VpcId = vpcId;
        }
    }
}
