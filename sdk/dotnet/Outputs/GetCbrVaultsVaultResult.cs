// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud.Outputs
{

    [OutputType]
    public sealed class GetCbrVaultsVaultResult
    {
        /// <summary>
        /// The allocated capacity of the vault, in GB.
        /// </summary>
        public readonly double Allocated;
        /// <summary>
        /// Whether automatic association is supported.
        /// </summary>
        public readonly bool AutoBind;
        /// <summary>
        /// Whether to enable automatic expansion of the backup protection type vault.
        /// </summary>
        public readonly bool AutoExpandEnabled;
        /// <summary>
        /// The rules for automatic association.
        /// </summary>
        public readonly ImmutableDictionary<string, string> BindRules;
        /// <summary>
        /// The consistent level (specification) of the vault.
        /// </summary>
        public readonly string ConsistentLevel;
        /// <summary>
        /// The enterprise project ID.
        /// </summary>
        public readonly string EnterpriseProjectId;
        /// <summary>
        /// The vault ID in UUID format.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The vault name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the policy associated with the vault.
        /// </summary>
        public readonly string PolicyId;
        /// <summary>
        /// The protection type of the vault.
        /// </summary>
        public readonly string ProtectionType;
        /// <summary>
        /// The array of one or more resources to attach to the vault.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCbrVaultsVaultResourceResult> Resources;
        /// <summary>
        /// The vault capacity, in GB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The specification code.
        /// </summary>
        public readonly string SpecCode;
        /// <summary>
        /// The vault status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The name of the bucket for the vault.
        /// </summary>
        public readonly string Storage;
        /// <summary>
        /// The key/value pairs to associate with the vault.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The object type of the vault.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The used capacity, in GB.
        /// </summary>
        public readonly double Used;

        [OutputConstructor]
        private GetCbrVaultsVaultResult(
            double allocated,

            bool autoBind,

            bool autoExpandEnabled,

            ImmutableDictionary<string, string> bindRules,

            string consistentLevel,

            string enterpriseProjectId,

            string id,

            string name,

            string policyId,

            string protectionType,

            ImmutableArray<Outputs.GetCbrVaultsVaultResourceResult> resources,

            int size,

            string specCode,

            string status,

            string storage,

            ImmutableDictionary<string, string> tags,

            string type,

            double used)
        {
            Allocated = allocated;
            AutoBind = autoBind;
            AutoExpandEnabled = autoExpandEnabled;
            BindRules = bindRules;
            ConsistentLevel = consistentLevel;
            EnterpriseProjectId = enterpriseProjectId;
            Id = id;
            Name = name;
            PolicyId = policyId;
            ProtectionType = protectionType;
            Resources = resources;
            Size = size;
            SpecCode = specCode;
            Status = status;
            Storage = storage;
            Tags = tags;
            Type = type;
            Used = used;
        }
    }
}
