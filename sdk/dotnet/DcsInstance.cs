// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/dcsInstance:DcsInstance")]
    public partial class DcsInstance : global::Pulumi.CustomResource
    {
        [Output("accessUser")]
        public Output<string> AccessUser { get; private set; } = null!;

        [Output("autoPay")]
        public Output<string?> AutoPay { get; private set; } = null!;

        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// schema: Required
        /// </summary>
        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        [Output("availableZones")]
        public Output<ImmutableArray<string>> AvailableZones { get; private set; } = null!;

        [Output("backupAts")]
        public Output<ImmutableArray<int>> BackupAts { get; private set; } = null!;

        [Output("backupPolicy")]
        public Output<Outputs.DcsInstanceBackupPolicy?> BackupPolicy { get; private set; } = null!;

        [Output("backupType")]
        public Output<string?> BackupType { get; private set; } = null!;

        [Output("bandwidthInfos")]
        public Output<ImmutableArray<Outputs.DcsInstanceBandwidthInfo>> BandwidthInfos { get; private set; } = null!;

        [Output("beginAt")]
        public Output<string?> BeginAt { get; private set; } = null!;

        [Output("cacheMode")]
        public Output<string> CacheMode { get; private set; } = null!;

        [Output("capacity")]
        public Output<double> Capacity { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("cpuType")]
        public Output<string> CpuType { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("deletedNodes")]
        public Output<string?> DeletedNodes { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("enterpriseProjectName")]
        public Output<string> EnterpriseProjectName { get; private set; } = null!;

        /// <summary>
        /// schema: Required
        /// </summary>
        [Output("flavor")]
        public Output<string> Flavor { get; private set; } = null!;

        [Output("internalVersion")]
        public Output<string> InternalVersion { get; private set; } = null!;

        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        [Output("launchedAt")]
        public Output<string> LaunchedAt { get; private set; } = null!;

        [Output("maintainBegin")]
        public Output<string> MaintainBegin { get; private set; } = null!;

        [Output("maintainEnd")]
        public Output<string> MaintainEnd { get; private set; } = null!;

        [Output("maxMemory")]
        public Output<int> MaxMemory { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("orderId")]
        public Output<string> OrderId { get; private set; } = null!;

        [Output("parameters")]
        public Output<ImmutableArray<Outputs.DcsInstanceParameter>> Parameters { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodType")]
        public Output<string?> PeriodType { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        [Output("productId")]
        public Output<string> ProductId { get; private set; } = null!;

        [Output("productType")]
        public Output<string> ProductType { get; private set; } = null!;

        [Output("readonlyDomainName")]
        public Output<string> ReadonlyDomainName { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("renameCommands")]
        public Output<ImmutableDictionary<string, string>?> RenameCommands { get; private set; } = null!;

        [Output("replicaCount")]
        public Output<int> ReplicaCount { get; private set; } = null!;

        [Output("reservedIps")]
        public Output<ImmutableArray<string>> ReservedIps { get; private set; } = null!;

        [Output("saveDays")]
        public Output<int?> SaveDays { get; private set; } = null!;

        [Output("securityGroupId")]
        public Output<string?> SecurityGroupId { get; private set; } = null!;

        [Output("securityGroupName")]
        public Output<string> SecurityGroupName { get; private set; } = null!;

        [Output("shardingCount")]
        public Output<int> ShardingCount { get; private set; } = null!;

        [Output("sslEnable")]
        public Output<bool> SslEnable { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("subnetCidr")]
        public Output<string> SubnetCidr { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("subnetName")]
        public Output<string> SubnetName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("templateId")]
        public Output<string?> TemplateId { get; private set; } = null!;

        [Output("transparentClientIpEnable")]
        public Output<bool> TransparentClientIpEnable { get; private set; } = null!;

        [Output("usedMemory")]
        public Output<int> UsedMemory { get; private set; } = null!;

        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;

        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        [Output("vpcName")]
        public Output<string> VpcName { get; private set; } = null!;

        [Output("whitelistEnable")]
        public Output<bool?> WhitelistEnable { get; private set; } = null!;

        [Output("whitelists")]
        public Output<ImmutableArray<Outputs.DcsInstanceWhitelist>> Whitelists { get; private set; } = null!;


        /// <summary>
        /// Create a DcsInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DcsInstance(string name, DcsInstanceArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsInstance:DcsInstance", name, args ?? new DcsInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DcsInstance(string name, Input<string> id, DcsInstanceState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsInstance:DcsInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DcsInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DcsInstance Get(string name, Input<string> id, DcsInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new DcsInstance(name, id, state, options);
        }
    }

    public sealed class DcsInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessUser")]
        public Input<string>? AccessUser { get; set; }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// schema: Required
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("availableZones")]
        private InputList<string>? _availableZones;
        [Obsolete(@"Deprecated, please use `availability_zones` instead")]
        public InputList<string> AvailableZones
        {
            get => _availableZones ?? (_availableZones = new InputList<string>());
            set => _availableZones = value;
        }

        [Input("backupAts")]
        private InputList<int>? _backupAts;
        [Obsolete(@"Deprecated, please use `backup_policy` instead")]
        public InputList<int> BackupAts
        {
            get => _backupAts ?? (_backupAts = new InputList<int>());
            set => _backupAts = value;
        }

        [Input("backupPolicy")]
        public Input<Inputs.DcsInstanceBackupPolicyArgs>? BackupPolicy { get; set; }

        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        [Input("beginAt")]
        public Input<string>? BeginAt { get; set; }

        [Input("capacity", required: true)]
        public Input<double> Capacity { get; set; } = null!;

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("deletedNodes")]
        public Input<string>? DeletedNodes { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("engine", required: true)]
        public Input<string> Engine { get; set; } = null!;

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("enterpriseProjectName")]
        public Input<string>? EnterpriseProjectName { get; set; }

        /// <summary>
        /// schema: Required
        /// </summary>
        [Input("flavor")]
        public Input<string>? Flavor { get; set; }

        [Input("maintainBegin")]
        public Input<string>? MaintainBegin { get; set; }

        [Input("maintainEnd")]
        public Input<string>? MaintainEnd { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputList<Inputs.DcsInstanceParameterArgs>? _parameters;
        public InputList<Inputs.DcsInstanceParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.DcsInstanceParameterArgs>());
            set => _parameters = value;
        }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodType")]
        public Input<string>? PeriodType { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("renameCommands")]
        private InputMap<string>? _renameCommands;
        public InputMap<string> RenameCommands
        {
            get => _renameCommands ?? (_renameCommands = new InputMap<string>());
            set => _renameCommands = value;
        }

        [Input("reservedIps")]
        private InputList<string>? _reservedIps;
        public InputList<string> ReservedIps
        {
            get => _reservedIps ?? (_reservedIps = new InputList<string>());
            set => _reservedIps = value;
        }

        [Input("saveDays")]
        public Input<int>? SaveDays { get; set; }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("sslEnable")]
        public Input<bool>? SslEnable { get; set; }

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        [Input("whitelistEnable")]
        public Input<bool>? WhitelistEnable { get; set; }

        [Input("whitelists")]
        private InputList<Inputs.DcsInstanceWhitelistArgs>? _whitelists;
        public InputList<Inputs.DcsInstanceWhitelistArgs> Whitelists
        {
            get => _whitelists ?? (_whitelists = new InputList<Inputs.DcsInstanceWhitelistArgs>());
            set => _whitelists = value;
        }

        public DcsInstanceArgs()
        {
        }
        public static new DcsInstanceArgs Empty => new DcsInstanceArgs();
    }

    public sealed class DcsInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("accessUser")]
        public Input<string>? AccessUser { get; set; }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// schema: Required
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("availableZones")]
        private InputList<string>? _availableZones;
        [Obsolete(@"Deprecated, please use `availability_zones` instead")]
        public InputList<string> AvailableZones
        {
            get => _availableZones ?? (_availableZones = new InputList<string>());
            set => _availableZones = value;
        }

        [Input("backupAts")]
        private InputList<int>? _backupAts;
        [Obsolete(@"Deprecated, please use `backup_policy` instead")]
        public InputList<int> BackupAts
        {
            get => _backupAts ?? (_backupAts = new InputList<int>());
            set => _backupAts = value;
        }

        [Input("backupPolicy")]
        public Input<Inputs.DcsInstanceBackupPolicyGetArgs>? BackupPolicy { get; set; }

        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        [Input("bandwidthInfos")]
        private InputList<Inputs.DcsInstanceBandwidthInfoGetArgs>? _bandwidthInfos;
        public InputList<Inputs.DcsInstanceBandwidthInfoGetArgs> BandwidthInfos
        {
            get => _bandwidthInfos ?? (_bandwidthInfos = new InputList<Inputs.DcsInstanceBandwidthInfoGetArgs>());
            set => _bandwidthInfos = value;
        }

        [Input("beginAt")]
        public Input<string>? BeginAt { get; set; }

        [Input("cacheMode")]
        public Input<string>? CacheMode { get; set; }

        [Input("capacity")]
        public Input<double>? Capacity { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("cpuType")]
        public Input<string>? CpuType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("deletedNodes")]
        public Input<string>? DeletedNodes { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("engine")]
        public Input<string>? Engine { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("enterpriseProjectName")]
        public Input<string>? EnterpriseProjectName { get; set; }

        /// <summary>
        /// schema: Required
        /// </summary>
        [Input("flavor")]
        public Input<string>? Flavor { get; set; }

        [Input("internalVersion")]
        public Input<string>? InternalVersion { get; set; }

        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("launchedAt")]
        public Input<string>? LaunchedAt { get; set; }

        [Input("maintainBegin")]
        public Input<string>? MaintainBegin { get; set; }

        [Input("maintainEnd")]
        public Input<string>? MaintainEnd { get; set; }

        [Input("maxMemory")]
        public Input<int>? MaxMemory { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orderId")]
        public Input<string>? OrderId { get; set; }

        [Input("parameters")]
        private InputList<Inputs.DcsInstanceParameterGetArgs>? _parameters;
        public InputList<Inputs.DcsInstanceParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.DcsInstanceParameterGetArgs>());
            set => _parameters = value;
        }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodType")]
        public Input<string>? PeriodType { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        [Input("productType")]
        public Input<string>? ProductType { get; set; }

        [Input("readonlyDomainName")]
        public Input<string>? ReadonlyDomainName { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("renameCommands")]
        private InputMap<string>? _renameCommands;
        public InputMap<string> RenameCommands
        {
            get => _renameCommands ?? (_renameCommands = new InputMap<string>());
            set => _renameCommands = value;
        }

        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        [Input("reservedIps")]
        private InputList<string>? _reservedIps;
        public InputList<string> ReservedIps
        {
            get => _reservedIps ?? (_reservedIps = new InputList<string>());
            set => _reservedIps = value;
        }

        [Input("saveDays")]
        public Input<int>? SaveDays { get; set; }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("securityGroupName")]
        public Input<string>? SecurityGroupName { get; set; }

        [Input("shardingCount")]
        public Input<int>? ShardingCount { get; set; }

        [Input("sslEnable")]
        public Input<bool>? SslEnable { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subnetCidr")]
        public Input<string>? SubnetCidr { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("subnetName")]
        public Input<string>? SubnetName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("transparentClientIpEnable")]
        public Input<bool>? TransparentClientIpEnable { get; set; }

        [Input("usedMemory")]
        public Input<int>? UsedMemory { get; set; }

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        [Input("userName")]
        public Input<string>? UserName { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("vpcName")]
        public Input<string>? VpcName { get; set; }

        [Input("whitelistEnable")]
        public Input<bool>? WhitelistEnable { get; set; }

        [Input("whitelists")]
        private InputList<Inputs.DcsInstanceWhitelistGetArgs>? _whitelists;
        public InputList<Inputs.DcsInstanceWhitelistGetArgs> Whitelists
        {
            get => _whitelists ?? (_whitelists = new InputList<Inputs.DcsInstanceWhitelistGetArgs>());
            set => _whitelists = value;
        }

        public DcsInstanceState()
        {
        }
        public static new DcsInstanceState Empty => new DcsInstanceState();
    }
}
