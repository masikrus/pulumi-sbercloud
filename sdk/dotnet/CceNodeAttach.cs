// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cceNodeAttach:CceNodeAttach")]
    public partial class CceNodeAttach : global::Pulumi.CustomResource
    {
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("dataVolumes")]
        public Output<ImmutableArray<Outputs.CceNodeAttachDataVolume>> DataVolumes { get; private set; } = null!;

        [Output("dockerBaseSize")]
        public Output<int?> DockerBaseSize { get; private set; } = null!;

        [Output("ecsGroupId")]
        public Output<string> EcsGroupId { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        [Output("hostnameConfig")]
        public Output<Outputs.CceNodeAttachHostnameConfig> HostnameConfig { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("imageId")]
        public Output<string?> ImageId { get; private set; } = null!;

        [Output("initializedConditions")]
        public Output<ImmutableArray<string>> InitializedConditions { get; private set; } = null!;

        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("lvmConfig")]
        public Output<string?> LvmConfig { get; private set; } = null!;

        [Output("maxPods")]
        public Output<int?> MaxPods { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("nicMultiQueue")]
        public Output<string?> NicMultiQueue { get; private set; } = null!;

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Output("nicThreshold")]
        public Output<string?> NicThreshold { get; private set; } = null!;

        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("postinstall")]
        public Output<string?> Postinstall { get; private set; } = null!;

        [Output("preinstall")]
        public Output<string?> Preinstall { get; private set; } = null!;

        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("rootVolumes")]
        public Output<ImmutableArray<Outputs.CceNodeAttachRootVolume>> RootVolumes { get; private set; } = null!;

        [Output("runtime")]
        public Output<string> Runtime { get; private set; } = null!;

        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("storage")]
        public Output<Outputs.CceNodeAttachStorage?> Storage { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("systemDiskKmsKeyId")]
        public Output<string?> SystemDiskKmsKeyId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("taints")]
        public Output<ImmutableArray<Outputs.CceNodeAttachTaint>> Taints { get; private set; } = null!;


        /// <summary>
        /// Create a CceNodeAttach resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CceNodeAttach(string name, CceNodeAttachArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceNodeAttach:CceNodeAttach", name, args ?? new CceNodeAttachArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CceNodeAttach(string name, Input<string> id, CceNodeAttachState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cceNodeAttach:CceNodeAttach", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CceNodeAttach resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CceNodeAttach Get(string name, Input<string> id, CceNodeAttachState? state = null, CustomResourceOptions? options = null)
        {
            return new CceNodeAttach(name, id, state, options);
        }
    }

    public sealed class CceNodeAttachArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("dockerBaseSize")]
        public Input<int>? DockerBaseSize { get; set; }

        [Input("hostnameConfig")]
        public Input<Inputs.CceNodeAttachHostnameConfigArgs>? HostnameConfig { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("initializedConditions")]
        private InputList<string>? _initializedConditions;
        public InputList<string> InitializedConditions
        {
            get => _initializedConditions ?? (_initializedConditions = new InputList<string>());
            set => _initializedConditions = value;
        }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("lvmConfig")]
        public Input<string>? LvmConfig { get; set; }

        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("nicMultiQueue")]
        public Input<string>? NicMultiQueue { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("nicThreshold")]
        public Input<string>? NicThreshold { get; set; }

        [Input("os", required: true)]
        public Input<string> Os { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("postinstall")]
        public Input<string>? Postinstall { get; set; }

        [Input("preinstall")]
        public Input<string>? Preinstall { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        [Input("storage")]
        public Input<Inputs.CceNodeAttachStorageArgs>? Storage { get; set; }

        [Input("systemDiskKmsKeyId")]
        public Input<string>? SystemDiskKmsKeyId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.CceNodeAttachTaintArgs>? _taints;
        public InputList<Inputs.CceNodeAttachTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.CceNodeAttachTaintArgs>());
            set => _taints = value;
        }

        public CceNodeAttachArgs()
        {
        }
        public static new CceNodeAttachArgs Empty => new CceNodeAttachArgs();
    }

    public sealed class CceNodeAttachState : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.CceNodeAttachDataVolumeGetArgs>? _dataVolumes;
        public InputList<Inputs.CceNodeAttachDataVolumeGetArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.CceNodeAttachDataVolumeGetArgs>());
            set => _dataVolumes = value;
        }

        [Input("dockerBaseSize")]
        public Input<int>? DockerBaseSize { get; set; }

        [Input("ecsGroupId")]
        public Input<string>? EcsGroupId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("hostnameConfig")]
        public Input<Inputs.CceNodeAttachHostnameConfigGetArgs>? HostnameConfig { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("initializedConditions")]
        private InputList<string>? _initializedConditions;
        public InputList<string> InitializedConditions
        {
            get => _initializedConditions ?? (_initializedConditions = new InputList<string>());
            set => _initializedConditions = value;
        }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("lvmConfig")]
        public Input<string>? LvmConfig { get; set; }

        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("nicMultiQueue")]
        public Input<string>? NicMultiQueue { get; set; }

        /// <summary>
        /// schema: Internal
        /// </summary>
        [Input("nicThreshold")]
        public Input<string>? NicThreshold { get; set; }

        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("postinstall")]
        public Input<string>? Postinstall { get; set; }

        [Input("preinstall")]
        public Input<string>? Preinstall { get; set; }

        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootVolumes")]
        private InputList<Inputs.CceNodeAttachRootVolumeGetArgs>? _rootVolumes;
        public InputList<Inputs.CceNodeAttachRootVolumeGetArgs> RootVolumes
        {
            get => _rootVolumes ?? (_rootVolumes = new InputList<Inputs.CceNodeAttachRootVolumeGetArgs>());
            set => _rootVolumes = value;
        }

        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("storage")]
        public Input<Inputs.CceNodeAttachStorageGetArgs>? Storage { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("systemDiskKmsKeyId")]
        public Input<string>? SystemDiskKmsKeyId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.CceNodeAttachTaintGetArgs>? _taints;
        public InputList<Inputs.CceNodeAttachTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.CceNodeAttachTaintGetArgs>());
            set => _taints = value;
        }

        public CceNodeAttachState()
        {
        }
        public static new CceNodeAttachState Empty => new CceNodeAttachState();
    }
}
