// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetKmsKey
    {
        public static Task<GetKmsKeyResult> InvokeAsync(GetKmsKeyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKmsKeyResult>("sbercloud:index/getKmsKey:getKmsKey", args ?? new GetKmsKeyArgs(), options.WithDefaults());

        public static Output<GetKmsKeyResult> Invoke(GetKmsKeyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKmsKeyResult>("sbercloud:index/getKmsKey:getKmsKey", args ?? new GetKmsKeyInvokeArgs(), options.WithDefaults());

        public static Output<GetKmsKeyResult> Invoke(GetKmsKeyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKmsKeyResult>("sbercloud:index/getKmsKey:getKmsKey", args ?? new GetKmsKeyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKmsKeyArgs : global::Pulumi.InvokeArgs
    {
        [Input("defaultKeyFlag")]
        public string? DefaultKeyFlag { get; set; }

        [Input("domainId")]
        public string? DomainId { get; set; }

        [Input("enterpriseProjectId")]
        public string? EnterpriseProjectId { get; set; }

        [Input("keyAlias")]
        public string? KeyAlias { get; set; }

        [Input("keyDescription")]
        public string? KeyDescription { get; set; }

        [Input("keyId")]
        public string? KeyId { get; set; }

        [Input("keyState")]
        public string? KeyState { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetKmsKeyArgs()
        {
        }
        public static new GetKmsKeyArgs Empty => new GetKmsKeyArgs();
    }

    public sealed class GetKmsKeyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("defaultKeyFlag")]
        public Input<string>? DefaultKeyFlag { get; set; }

        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("keyAlias")]
        public Input<string>? KeyAlias { get; set; }

        [Input("keyDescription")]
        public Input<string>? KeyDescription { get; set; }

        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        [Input("keyState")]
        public Input<string>? KeyState { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetKmsKeyInvokeArgs()
        {
        }
        public static new GetKmsKeyInvokeArgs Empty => new GetKmsKeyInvokeArgs();
    }


    [OutputType]
    public sealed class GetKmsKeyResult
    {
        public readonly string CreationDate;
        public readonly string DefaultKeyFlag;
        public readonly string DomainId;
        public readonly string EnterpriseProjectId;
        public readonly string ExpirationTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyAlias;
        public readonly string KeyDescription;
        public readonly string KeyId;
        public readonly string KeyState;
        public readonly string Region;
        public readonly bool RotationEnabled;
        public readonly int RotationInterval;
        public readonly int RotationNumber;
        public readonly string ScheduledDeletionDate;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetKmsKeyResult(
            string creationDate,

            string defaultKeyFlag,

            string domainId,

            string enterpriseProjectId,

            string expirationTime,

            string id,

            string keyAlias,

            string keyDescription,

            string keyId,

            string keyState,

            string region,

            bool rotationEnabled,

            int rotationInterval,

            int rotationNumber,

            string scheduledDeletionDate,

            ImmutableDictionary<string, string> tags)
        {
            CreationDate = creationDate;
            DefaultKeyFlag = defaultKeyFlag;
            DomainId = domainId;
            EnterpriseProjectId = enterpriseProjectId;
            ExpirationTime = expirationTime;
            Id = id;
            KeyAlias = keyAlias;
            KeyDescription = keyDescription;
            KeyId = keyId;
            KeyState = keyState;
            Region = region;
            RotationEnabled = rotationEnabled;
            RotationInterval = rotationInterval;
            RotationNumber = rotationNumber;
            ScheduledDeletionDate = scheduledDeletionDate;
            Tags = tags;
        }
    }
}
