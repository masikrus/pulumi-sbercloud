// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/rdsPgDatabase:RdsPgDatabase")]
    public partial class RdsPgDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the database character set.
        /// </summary>
        [Output("characterSet")]
        public Output<string> CharacterSet { get; private set; } = null!;

        /// <summary>
        /// Specifies the database description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the RDS PostgreSQL instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        /// </summary>
        [Output("isRevokePublicPrivilege")]
        public Output<bool> IsRevokePublicPrivilege { get; private set; } = null!;

        /// <summary>
        /// Specifies the database collocation.
        /// </summary>
        [Output("lcCollate")]
        public Output<string> LcCollate { get; private set; } = null!;

        /// <summary>
        /// Specifies the database classification.
        /// </summary>
        [Output("lcCtype")]
        public Output<string> LcCtype { get; private set; } = null!;

        /// <summary>
        /// Specifies the database name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the database user.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Indicates the database size, in bytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the database template.
        /// </summary>
        [Output("template")]
        public Output<string> Template { get; private set; } = null!;


        /// <summary>
        /// Create a RdsPgDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdsPgDatabase(string name, RdsPgDatabaseArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/rdsPgDatabase:RdsPgDatabase", name, args ?? new RdsPgDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RdsPgDatabase(string name, Input<string> id, RdsPgDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/rdsPgDatabase:RdsPgDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdsPgDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdsPgDatabase Get(string name, Input<string> id, RdsPgDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new RdsPgDatabase(name, id, state, options);
        }
    }

    public sealed class RdsPgDatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the database character set.
        /// </summary>
        [Input("characterSet")]
        public Input<string>? CharacterSet { get; set; }

        /// <summary>
        /// Specifies the database description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        /// </summary>
        [Input("isRevokePublicPrivilege")]
        public Input<bool>? IsRevokePublicPrivilege { get; set; }

        /// <summary>
        /// Specifies the database collocation.
        /// </summary>
        [Input("lcCollate")]
        public Input<string>? LcCollate { get; set; }

        /// <summary>
        /// Specifies the database classification.
        /// </summary>
        [Input("lcCtype")]
        public Input<string>? LcCtype { get; set; }

        /// <summary>
        /// Specifies the database name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the database user.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the name of the database template.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public RdsPgDatabaseArgs()
        {
        }
        public static new RdsPgDatabaseArgs Empty => new RdsPgDatabaseArgs();
    }

    public sealed class RdsPgDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the database character set.
        /// </summary>
        [Input("characterSet")]
        public Input<string>? CharacterSet { get; set; }

        /// <summary>
        /// Specifies the database description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
        /// </summary>
        [Input("isRevokePublicPrivilege")]
        public Input<bool>? IsRevokePublicPrivilege { get; set; }

        /// <summary>
        /// Specifies the database collocation.
        /// </summary>
        [Input("lcCollate")]
        public Input<string>? LcCollate { get; set; }

        /// <summary>
        /// Specifies the database classification.
        /// </summary>
        [Input("lcCtype")]
        public Input<string>? LcCtype { get; set; }

        /// <summary>
        /// Specifies the database name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the database user.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Indicates the database size, in bytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Specifies the name of the database template.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public RdsPgDatabaseState()
        {
        }
        public static new RdsPgDatabaseState Empty => new RdsPgDatabaseState();
    }
}
