// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/vpnGateway:VpnGateway")]
    public partial class VpnGateway : global::Pulumi.CustomResource
    {
        [Output("accessPrivateIp1")]
        public Output<string> AccessPrivateIp1 { get; private set; } = null!;

        [Output("accessPrivateIp2")]
        public Output<string> AccessPrivateIp2 { get; private set; } = null!;

        /// <summary>
        /// The access subnet ID of the VPN gateway.
        /// </summary>
        [Output("accessSubnetId")]
        public Output<string> AccessSubnetId { get; private set; } = null!;

        /// <summary>
        /// The access VPC ID of the VPN gateway.
        /// </summary>
        [Output("accessVpcId")]
        public Output<string> AccessVpcId { get; private set; } = null!;

        /// <summary>
        /// The ASN number of BGP
        /// </summary>
        [Output("asn")]
        public Output<int?> Asn { get; private set; } = null!;

        /// <summary>
        /// The attachment type.
        /// </summary>
        [Output("attachmentType")]
        public Output<string?> AttachmentType { get; private set; } = null!;

        /// <summary>
        /// The availability zone IDs.
        /// </summary>
        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        [Output("certificate")]
        public Output<Outputs.VpnGatewayCertificate> Certificate { get; private set; } = null!;

        /// <summary>
        /// The Network ID of the VPC subnet used by the VPN gateway.
        /// </summary>
        [Output("connectSubnet")]
        public Output<string> ConnectSubnet { get; private set; } = null!;

        /// <summary>
        /// The create time.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Whether to delete the EIP when the VPN gateway is deleted.
        /// </summary>
        [Output("deleteEipOnTermination")]
        public Output<bool?> DeleteEipOnTermination { get; private set; } = null!;

        [Output("eip1")]
        public Output<Outputs.VpnGatewayEip1> Eip1 { get; private set; } = null!;

        [Output("eip2")]
        public Output<Outputs.VpnGatewayEip2> Eip2 { get; private set; } = null!;

        /// <summary>
        /// The enterprise project ID
        /// </summary>
        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        /// <summary>
        /// The ER attachment ID.
        /// </summary>
        [Output("erAttachmentId")]
        public Output<string> ErAttachmentId { get; private set; } = null!;

        /// <summary>
        /// The enterprise router ID to attach with to VPN gateway.
        /// </summary>
        [Output("erId")]
        public Output<string> ErId { get; private set; } = null!;

        /// <summary>
        /// The flavor of the VPN gateway.
        /// </summary>
        [Output("flavor")]
        public Output<string> Flavor { get; private set; } = null!;

        /// <summary>
        /// The HA mode of the VPN gateway.
        /// </summary>
        [Output("haMode")]
        public Output<string> HaMode { get; private set; } = null!;

        /// <summary>
        /// The local subnets.
        /// </summary>
        [Output("localSubnets")]
        public Output<ImmutableArray<string>> LocalSubnets { get; private set; } = null!;

        [Output("masterEip")]
        public Output<Outputs.VpnGatewayMasterEip> MasterEip { get; private set; } = null!;

        /// <summary>
        /// The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network type of the VPN gateway.
        /// </summary>
        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("slaveEip")]
        public Output<Outputs.VpnGatewaySlaveEip> SlaveEip { get; private set; } = null!;

        /// <summary>
        /// The status of VPN gateway.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The update time.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The number of used connection groups.
        /// </summary>
        [Output("usedConnectionGroup")]
        public Output<int> UsedConnectionGroup { get; private set; } = null!;

        /// <summary>
        /// The number of used connections.
        /// </summary>
        [Output("usedConnectionNumber")]
        public Output<int> UsedConnectionNumber { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC to which the VPN gateway is connected.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnGateway(string name, VpnGatewayArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/vpnGateway:VpnGateway", name, args ?? new VpnGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnGateway(string name, Input<string> id, VpnGatewayState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/vpnGateway:VpnGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnGateway Get(string name, Input<string> id, VpnGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnGateway(name, id, state, options);
        }
    }

    public sealed class VpnGatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessPrivateIp1")]
        public Input<string>? AccessPrivateIp1 { get; set; }

        [Input("accessPrivateIp2")]
        public Input<string>? AccessPrivateIp2 { get; set; }

        /// <summary>
        /// The access subnet ID of the VPN gateway.
        /// </summary>
        [Input("accessSubnetId")]
        public Input<string>? AccessSubnetId { get; set; }

        /// <summary>
        /// The access VPC ID of the VPN gateway.
        /// </summary>
        [Input("accessVpcId")]
        public Input<string>? AccessVpcId { get; set; }

        /// <summary>
        /// The ASN number of BGP
        /// </summary>
        [Input("asn")]
        public Input<int>? Asn { get; set; }

        /// <summary>
        /// The attachment type.
        /// </summary>
        [Input("attachmentType")]
        public Input<string>? AttachmentType { get; set; }

        [Input("availabilityZones", required: true)]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// The availability zone IDs.
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("certificate")]
        public Input<Inputs.VpnGatewayCertificateArgs>? Certificate { get; set; }

        /// <summary>
        /// The Network ID of the VPC subnet used by the VPN gateway.
        /// </summary>
        [Input("connectSubnet")]
        public Input<string>? ConnectSubnet { get; set; }

        /// <summary>
        /// Whether to delete the EIP when the VPN gateway is deleted.
        /// </summary>
        [Input("deleteEipOnTermination")]
        public Input<bool>? DeleteEipOnTermination { get; set; }

        [Input("eip1")]
        public Input<Inputs.VpnGatewayEip1Args>? Eip1 { get; set; }

        [Input("eip2")]
        public Input<Inputs.VpnGatewayEip2Args>? Eip2 { get; set; }

        /// <summary>
        /// The enterprise project ID
        /// </summary>
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        /// <summary>
        /// The enterprise router ID to attach with to VPN gateway.
        /// </summary>
        [Input("erId")]
        public Input<string>? ErId { get; set; }

        /// <summary>
        /// The flavor of the VPN gateway.
        /// </summary>
        [Input("flavor")]
        public Input<string>? Flavor { get; set; }

        /// <summary>
        /// The HA mode of the VPN gateway.
        /// </summary>
        [Input("haMode")]
        public Input<string>? HaMode { get; set; }

        [Input("localSubnets")]
        private InputList<string>? _localSubnets;

        /// <summary>
        /// The local subnets.
        /// </summary>
        public InputList<string> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<string>());
            set => _localSubnets = value;
        }

        [Input("masterEip")]
        public Input<Inputs.VpnGatewayMasterEipArgs>? MasterEip { get; set; }

        /// <summary>
        /// The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network type of the VPN gateway.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("slaveEip")]
        public Input<Inputs.VpnGatewaySlaveEipArgs>? SlaveEip { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the VPC to which the VPN gateway is connected.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public VpnGatewayArgs()
        {
        }
        public static new VpnGatewayArgs Empty => new VpnGatewayArgs();
    }

    public sealed class VpnGatewayState : global::Pulumi.ResourceArgs
    {
        [Input("accessPrivateIp1")]
        public Input<string>? AccessPrivateIp1 { get; set; }

        [Input("accessPrivateIp2")]
        public Input<string>? AccessPrivateIp2 { get; set; }

        /// <summary>
        /// The access subnet ID of the VPN gateway.
        /// </summary>
        [Input("accessSubnetId")]
        public Input<string>? AccessSubnetId { get; set; }

        /// <summary>
        /// The access VPC ID of the VPN gateway.
        /// </summary>
        [Input("accessVpcId")]
        public Input<string>? AccessVpcId { get; set; }

        /// <summary>
        /// The ASN number of BGP
        /// </summary>
        [Input("asn")]
        public Input<int>? Asn { get; set; }

        /// <summary>
        /// The attachment type.
        /// </summary>
        [Input("attachmentType")]
        public Input<string>? AttachmentType { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// The availability zone IDs.
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("certificate")]
        public Input<Inputs.VpnGatewayCertificateGetArgs>? Certificate { get; set; }

        /// <summary>
        /// The Network ID of the VPC subnet used by the VPN gateway.
        /// </summary>
        [Input("connectSubnet")]
        public Input<string>? ConnectSubnet { get; set; }

        /// <summary>
        /// The create time.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Whether to delete the EIP when the VPN gateway is deleted.
        /// </summary>
        [Input("deleteEipOnTermination")]
        public Input<bool>? DeleteEipOnTermination { get; set; }

        [Input("eip1")]
        public Input<Inputs.VpnGatewayEip1GetArgs>? Eip1 { get; set; }

        [Input("eip2")]
        public Input<Inputs.VpnGatewayEip2GetArgs>? Eip2 { get; set; }

        /// <summary>
        /// The enterprise project ID
        /// </summary>
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        /// <summary>
        /// The ER attachment ID.
        /// </summary>
        [Input("erAttachmentId")]
        public Input<string>? ErAttachmentId { get; set; }

        /// <summary>
        /// The enterprise router ID to attach with to VPN gateway.
        /// </summary>
        [Input("erId")]
        public Input<string>? ErId { get; set; }

        /// <summary>
        /// The flavor of the VPN gateway.
        /// </summary>
        [Input("flavor")]
        public Input<string>? Flavor { get; set; }

        /// <summary>
        /// The HA mode of the VPN gateway.
        /// </summary>
        [Input("haMode")]
        public Input<string>? HaMode { get; set; }

        [Input("localSubnets")]
        private InputList<string>? _localSubnets;

        /// <summary>
        /// The local subnets.
        /// </summary>
        public InputList<string> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<string>());
            set => _localSubnets = value;
        }

        [Input("masterEip")]
        public Input<Inputs.VpnGatewayMasterEipGetArgs>? MasterEip { get; set; }

        /// <summary>
        /// The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network type of the VPN gateway.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("slaveEip")]
        public Input<Inputs.VpnGatewaySlaveEipGetArgs>? SlaveEip { get; set; }

        /// <summary>
        /// The status of VPN gateway.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The update time.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The number of used connection groups.
        /// </summary>
        [Input("usedConnectionGroup")]
        public Input<int>? UsedConnectionGroup { get; set; }

        /// <summary>
        /// The number of used connections.
        /// </summary>
        [Input("usedConnectionNumber")]
        public Input<int>? UsedConnectionNumber { get; set; }

        /// <summary>
        /// The ID of the VPC to which the VPN gateway is connected.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public VpnGatewayState()
        {
        }
        public static new VpnGatewayState Empty => new VpnGatewayState();
    }
}
