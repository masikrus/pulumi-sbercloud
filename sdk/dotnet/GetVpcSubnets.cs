// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetVpcSubnets
    {
        public static Task<GetVpcSubnetsResult> InvokeAsync(GetVpcSubnetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcSubnetsResult>("sbercloud:index/getVpcSubnets:getVpcSubnets", args ?? new GetVpcSubnetsArgs(), options.WithDefaults());

        public static Output<GetVpcSubnetsResult> Invoke(GetVpcSubnetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcSubnetsResult>("sbercloud:index/getVpcSubnets:getVpcSubnets", args ?? new GetVpcSubnetsInvokeArgs(), options.WithDefaults());

        public static Output<GetVpcSubnetsResult> Invoke(GetVpcSubnetsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcSubnetsResult>("sbercloud:index/getVpcSubnets:getVpcSubnets", args ?? new GetVpcSubnetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcSubnetsArgs : global::Pulumi.InvokeArgs
    {
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        [Input("cidr")]
        public string? Cidr { get; set; }

        [Input("gatewayIp")]
        public string? GatewayIp { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("primaryDns")]
        public string? PrimaryDns { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("secondaryDns")]
        public string? SecondaryDns { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetVpcSubnetsArgs()
        {
        }
        public static new GetVpcSubnetsArgs Empty => new GetVpcSubnetsArgs();
    }

    public sealed class GetVpcSubnetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("primaryDns")]
        public Input<string>? PrimaryDns { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secondaryDns")]
        public Input<string>? SecondaryDns { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetVpcSubnetsInvokeArgs()
        {
        }
        public static new GetVpcSubnetsInvokeArgs Empty => new GetVpcSubnetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcSubnetsResult
    {
        public readonly string? AvailabilityZone;
        public readonly string? Cidr;
        public readonly string? GatewayIp;
        public readonly string Id;
        public readonly string? Name;
        public readonly string? PrimaryDns;
        public readonly string Region;
        public readonly string? SecondaryDns;
        public readonly string? Status;
        public readonly ImmutableArray<Outputs.GetVpcSubnetsSubnetResult> Subnets;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? VpcId;

        [OutputConstructor]
        private GetVpcSubnetsResult(
            string? availabilityZone,

            string? cidr,

            string? gatewayIp,

            string id,

            string? name,

            string? primaryDns,

            string region,

            string? secondaryDns,

            string? status,

            ImmutableArray<Outputs.GetVpcSubnetsSubnetResult> subnets,

            ImmutableDictionary<string, string>? tags,

            string? vpcId)
        {
            AvailabilityZone = availabilityZone;
            Cidr = cidr;
            GatewayIp = gatewayIp;
            Id = id;
            Name = name;
            PrimaryDns = primaryDns;
            Region = region;
            SecondaryDns = secondaryDns;
            Status = status;
            Subnets = subnets;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
