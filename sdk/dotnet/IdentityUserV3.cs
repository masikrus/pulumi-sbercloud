// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/identityUserV3:IdentityUserV3")]
    public partial class IdentityUserV3 : global::Pulumi.CustomResource
    {
        [Output("accessType")]
        public Output<string> AccessType { get; private set; } = null!;

        [Output("countryCode")]
        public Output<string?> CountryCode { get; private set; } = null!;

        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("externalIdentityId")]
        public Output<string?> ExternalIdentityId { get; private set; } = null!;

        [Output("externalIdentityType")]
        public Output<string> ExternalIdentityType { get; private set; } = null!;

        [Output("lastLogin")]
        public Output<string> LastLogin { get; private set; } = null!;

        [Output("loginProtectVerificationMethod")]
        public Output<string?> LoginProtectVerificationMethod { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("passwordStrength")]
        public Output<string> PasswordStrength { get; private set; } = null!;

        [Output("phone")]
        public Output<string?> Phone { get; private set; } = null!;

        [Output("pwdReset")]
        public Output<bool?> PwdReset { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityUserV3 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityUserV3(string name, IdentityUserV3Args? args = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/identityUserV3:IdentityUserV3", name, args ?? new IdentityUserV3Args(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityUserV3(string name, Input<string> id, IdentityUserV3State? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/identityUserV3:IdentityUserV3", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityUserV3 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityUserV3 Get(string name, Input<string> id, IdentityUserV3State? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityUserV3(name, id, state, options);
        }
    }

    public sealed class IdentityUserV3Args : global::Pulumi.ResourceArgs
    {
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("externalIdentityId")]
        public Input<string>? ExternalIdentityId { get; set; }

        [Input("externalIdentityType")]
        public Input<string>? ExternalIdentityType { get; set; }

        [Input("loginProtectVerificationMethod")]
        public Input<string>? LoginProtectVerificationMethod { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("phone")]
        public Input<string>? Phone { get; set; }

        [Input("pwdReset")]
        public Input<bool>? PwdReset { get; set; }

        public IdentityUserV3Args()
        {
        }
        public static new IdentityUserV3Args Empty => new IdentityUserV3Args();
    }

    public sealed class IdentityUserV3State : global::Pulumi.ResourceArgs
    {
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("externalIdentityId")]
        public Input<string>? ExternalIdentityId { get; set; }

        [Input("externalIdentityType")]
        public Input<string>? ExternalIdentityType { get; set; }

        [Input("lastLogin")]
        public Input<string>? LastLogin { get; set; }

        [Input("loginProtectVerificationMethod")]
        public Input<string>? LoginProtectVerificationMethod { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("passwordStrength")]
        public Input<string>? PasswordStrength { get; set; }

        [Input("phone")]
        public Input<string>? Phone { get; set; }

        [Input("pwdReset")]
        public Input<bool>? PwdReset { get; set; }

        public IdentityUserV3State()
        {
        }
        public static new IdentityUserV3State Empty => new IdentityUserV3State();
    }
}
