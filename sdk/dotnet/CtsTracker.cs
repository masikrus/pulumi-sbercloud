// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/ctsTracker:CtsTracker")]
    public partial class CtsTracker : global::Pulumi.CustomResource
    {
        [Output("agencyName")]
        public Output<string> AgencyName { get; private set; } = null!;

        [Output("bucketName")]
        public Output<string?> BucketName { get; private set; } = null!;

        [Output("compressType")]
        public Output<string?> CompressType { get; private set; } = null!;

        [Output("createTime")]
        public Output<int> CreateTime { get; private set; } = null!;

        [Output("deleteTracker")]
        public Output<bool?> DeleteTracker { get; private set; } = null!;

        [Output("detail")]
        public Output<string> Detail { get; private set; } = null!;

        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("excludeServices")]
        public Output<ImmutableArray<string>> ExcludeServices { get; private set; } = null!;

        [Output("filePrefix")]
        public Output<string?> FilePrefix { get; private set; } = null!;

        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        [Output("isAuthorizedBucket")]
        public Output<bool> IsAuthorizedBucket { get; private set; } = null!;

        [Output("isSortByService")]
        public Output<bool?> IsSortByService { get; private set; } = null!;

        [Output("kmsId")]
        public Output<string?> KmsId { get; private set; } = null!;

        [Output("logGroupName")]
        public Output<string> LogGroupName { get; private set; } = null!;

        [Output("logTopicName")]
        public Output<string> LogTopicName { get; private set; } = null!;

        [Output("ltsEnabled")]
        public Output<bool?> LtsEnabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organizationEnabled")]
        public Output<bool> OrganizationEnabled { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("transferEnabled")]
        public Output<bool> TransferEnabled { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("validateFile")]
        public Output<bool?> ValidateFile { get; private set; } = null!;


        /// <summary>
        /// Create a CtsTracker resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CtsTracker(string name, CtsTrackerArgs? args = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/ctsTracker:CtsTracker", name, args ?? new CtsTrackerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CtsTracker(string name, Input<string> id, CtsTrackerState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/ctsTracker:CtsTracker", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CtsTracker resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CtsTracker Get(string name, Input<string> id, CtsTrackerState? state = null, CustomResourceOptions? options = null)
        {
            return new CtsTracker(name, id, state, options);
        }
    }

    public sealed class CtsTrackerArgs : global::Pulumi.ResourceArgs
    {
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        [Input("compressType")]
        public Input<string>? CompressType { get; set; }

        [Input("deleteTracker")]
        public Input<bool>? DeleteTracker { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("excludeServices")]
        private InputList<string>? _excludeServices;
        public InputList<string> ExcludeServices
        {
            get => _excludeServices ?? (_excludeServices = new InputList<string>());
            set => _excludeServices = value;
        }

        [Input("filePrefix")]
        public Input<string>? FilePrefix { get; set; }

        [Input("isSortByService")]
        public Input<bool>? IsSortByService { get; set; }

        [Input("kmsId")]
        public Input<string>? KmsId { get; set; }

        [Input("ltsEnabled")]
        public Input<bool>? LtsEnabled { get; set; }

        [Input("organizationEnabled")]
        public Input<bool>? OrganizationEnabled { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("validateFile")]
        public Input<bool>? ValidateFile { get; set; }

        public CtsTrackerArgs()
        {
        }
        public static new CtsTrackerArgs Empty => new CtsTrackerArgs();
    }

    public sealed class CtsTrackerState : global::Pulumi.ResourceArgs
    {
        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        [Input("compressType")]
        public Input<string>? CompressType { get; set; }

        [Input("createTime")]
        public Input<int>? CreateTime { get; set; }

        [Input("deleteTracker")]
        public Input<bool>? DeleteTracker { get; set; }

        [Input("detail")]
        public Input<string>? Detail { get; set; }

        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("excludeServices")]
        private InputList<string>? _excludeServices;
        public InputList<string> ExcludeServices
        {
            get => _excludeServices ?? (_excludeServices = new InputList<string>());
            set => _excludeServices = value;
        }

        [Input("filePrefix")]
        public Input<string>? FilePrefix { get; set; }

        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("isAuthorizedBucket")]
        public Input<bool>? IsAuthorizedBucket { get; set; }

        [Input("isSortByService")]
        public Input<bool>? IsSortByService { get; set; }

        [Input("kmsId")]
        public Input<string>? KmsId { get; set; }

        [Input("logGroupName")]
        public Input<string>? LogGroupName { get; set; }

        [Input("logTopicName")]
        public Input<string>? LogTopicName { get; set; }

        [Input("ltsEnabled")]
        public Input<bool>? LtsEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organizationEnabled")]
        public Input<bool>? OrganizationEnabled { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transferEnabled")]
        public Input<bool>? TransferEnabled { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("validateFile")]
        public Input<bool>? ValidateFile { get; set; }

        public CtsTrackerState()
        {
        }
        public static new CtsTrackerState Empty => new CtsTrackerState();
    }
}
