// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud.Inputs
{

    public sealed class AsConfigurationInstanceConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPass")]
        private Input<string>? _adminPass;
        public Input<string>? AdminPass
        {
            get => _adminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("dedicatedHostId")]
        public Input<string>? DedicatedHostId { get; set; }

        [Input("disks")]
        private InputList<Inputs.AsConfigurationInstanceConfigDiskArgs>? _disks;
        public InputList<Inputs.AsConfigurationInstanceConfigDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.AsConfigurationInstanceConfigDiskArgs>());
            set => _disks = value;
        }

        [Input("ecsGroupId")]
        public Input<string>? EcsGroupId { get; set; }

        [Input("flavor")]
        public Input<string>? Flavor { get; set; }

        [Input("flavorPriorityPolicy")]
        public Input<string>? FlavorPriorityPolicy { get; set; }

        [Input("image")]
        public Input<string>? Image { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("personalities")]
        private InputList<Inputs.AsConfigurationInstanceConfigPersonalityArgs>? _personalities;
        public InputList<Inputs.AsConfigurationInstanceConfigPersonalityArgs> Personalities
        {
            get => _personalities ?? (_personalities = new InputList<Inputs.AsConfigurationInstanceConfigPersonalityArgs>());
            set => _personalities = value;
        }

        [Input("publicIp")]
        public Input<Inputs.AsConfigurationInstanceConfigPublicIpArgs>? PublicIp { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// schema: Required
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("tenancy")]
        public Input<string>? Tenancy { get; set; }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public AsConfigurationInstanceConfigArgs()
        {
        }
        public static new AsConfigurationInstanceConfigArgs Empty => new AsConfigurationInstanceConfigArgs();
    }
}
