// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud.Inputs
{

    public sealed class ApigChannelHealthCheckArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable two-way authentication.
        /// </summary>
        [Input("enableClientSsl")]
        public Input<bool>? EnableClientSsl { get; set; }

        /// <summary>
        /// The response codes for determining a successful HTTP response.
        /// </summary>
        [Input("httpCodes")]
        public Input<string>? HttpCodes { get; set; }

        /// <summary>
        /// The interval between consecutive check, in second.
        /// </summary>
        [Input("interval", required: true)]
        public Input<int> Interval { get; set; } = null!;

        /// <summary>
        /// The request method for health check.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The destination path for health check.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The destination host port for health check.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The rotocol for performing health check on backend servers.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The status of health check.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// The unhealthy threshold, which refers to the number of consecutive failed check required for a backend server to be considered unhealthy.
        /// </summary>
        [Input("thresholdAbnormal", required: true)]
        public Input<int> ThresholdAbnormal { get; set; } = null!;

        /// <summary>
        /// The the healthy threshold, which refers to the number of consecutive successful checks required for a backend server to be considered healthy.
        /// </summary>
        [Input("thresholdNormal", required: true)]
        public Input<int> ThresholdNormal { get; set; } = null!;

        /// <summary>
        /// The timeout for determining whether a health check fails, in second.
        /// </summary>
        [Input("timeout", required: true)]
        public Input<int> Timeout { get; set; } = null!;

        public ApigChannelHealthCheckArgs()
        {
        }
        public static new ApigChannelHealthCheckArgs Empty => new ApigChannelHealthCheckArgs();
    }
}
