// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetCceClusterCertificate
    {
        public static Task<GetCceClusterCertificateResult> InvokeAsync(GetCceClusterCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCceClusterCertificateResult>("sbercloud:index/getCceClusterCertificate:getCceClusterCertificate", args ?? new GetCceClusterCertificateArgs(), options.WithDefaults());

        public static Output<GetCceClusterCertificateResult> Invoke(GetCceClusterCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCceClusterCertificateResult>("sbercloud:index/getCceClusterCertificate:getCceClusterCertificate", args ?? new GetCceClusterCertificateInvokeArgs(), options.WithDefaults());

        public static Output<GetCceClusterCertificateResult> Invoke(GetCceClusterCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCceClusterCertificateResult>("sbercloud:index/getCceClusterCertificate:getCceClusterCertificate", args ?? new GetCceClusterCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCceClusterCertificateArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("duration", required: true)]
        public int Duration { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        public GetCceClusterCertificateArgs()
        {
        }
        public static new GetCceClusterCertificateArgs Empty => new GetCceClusterCertificateArgs();
    }

    public sealed class GetCceClusterCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("duration", required: true)]
        public Input<int> Duration { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetCceClusterCertificateInvokeArgs()
        {
        }
        public static new GetCceClusterCertificateInvokeArgs Empty => new GetCceClusterCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCceClusterCertificateResult
    {
        public readonly string ClusterId;
        public readonly ImmutableArray<Outputs.GetCceClusterCertificateClusterResult> Clusters;
        public readonly ImmutableArray<Outputs.GetCceClusterCertificateContextResult> Contexts;
        public readonly string CurrentContext;
        public readonly int Duration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KubeConfigRaw;
        public readonly string Region;
        public readonly ImmutableArray<Outputs.GetCceClusterCertificateUserResult> Users;

        [OutputConstructor]
        private GetCceClusterCertificateResult(
            string clusterId,

            ImmutableArray<Outputs.GetCceClusterCertificateClusterResult> clusters,

            ImmutableArray<Outputs.GetCceClusterCertificateContextResult> contexts,

            string currentContext,

            int duration,

            string id,

            string kubeConfigRaw,

            string region,

            ImmutableArray<Outputs.GetCceClusterCertificateUserResult> users)
        {
            ClusterId = clusterId;
            Clusters = clusters;
            Contexts = contexts;
            CurrentContext = currentContext;
            Duration = duration;
            Id = id;
            KubeConfigRaw = kubeConfigRaw;
            Region = region;
            Users = users;
        }
    }
}
