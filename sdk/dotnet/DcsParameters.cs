// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/dcsParameters:DcsParameters")]
    public partial class DcsParameters : global::Pulumi.CustomResource
    {
        [Output("configurationParameters")]
        public Output<ImmutableArray<Outputs.DcsParametersConfigurationParameter>> ConfigurationParameters { get; private set; } = null!;

        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>> Parameters { get; private set; } = null!;

        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a DcsParameters resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DcsParameters(string name, DcsParametersArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsParameters:DcsParameters", name, args ?? new DcsParametersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DcsParameters(string name, Input<string> id, DcsParametersState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/dcsParameters:DcsParameters", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DcsParameters resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DcsParameters Get(string name, Input<string> id, DcsParametersState? state = null, CustomResourceOptions? options = null)
        {
            return new DcsParameters(name, id, state, options);
        }
    }

    public sealed class DcsParametersArgs : global::Pulumi.ResourceArgs
    {
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("parameters", required: true)]
        private InputMap<string>? _parameters;
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public DcsParametersArgs()
        {
        }
        public static new DcsParametersArgs Empty => new DcsParametersArgs();
    }

    public sealed class DcsParametersState : global::Pulumi.ResourceArgs
    {
        [Input("configurationParameters")]
        private InputList<Inputs.DcsParametersConfigurationParameterGetArgs>? _configurationParameters;
        public InputList<Inputs.DcsParametersConfigurationParameterGetArgs> ConfigurationParameters
        {
            get => _configurationParameters ?? (_configurationParameters = new InputList<Inputs.DcsParametersConfigurationParameterGetArgs>());
            set => _configurationParameters = value;
        }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public DcsParametersState()
        {
        }
        public static new DcsParametersState Empty => new DcsParametersState();
    }
}
