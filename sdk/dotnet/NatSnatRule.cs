// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/natSnatRule:NatSnatRule")]
    public partial class NatSnatRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The CIDR block connected by SNAT rule (DC side).
        /// </summary>
        [Output("cidr")]
        public Output<string?> Cidr { get; private set; } = null!;

        /// <summary>
        /// The creation time of the SNAT rule.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the SNAT rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The floating IP addresses (separated by commas) connected by SNAT rule.
        /// </summary>
        [Output("floatingIpAddress")]
        public Output<string> FloatingIpAddress { get; private set; } = null!;

        /// <summary>
        /// The IDs of floating IPs connected by SNAT rule.
        /// </summary>
        [Output("floatingIpId")]
        public Output<string> FloatingIpId { get; private set; } = null!;

        /// <summary>
        /// The frozen EIP associated with the SNAT rule.
        /// </summary>
        [Output("freezedIpAddress")]
        public Output<string> FreezedIpAddress { get; private set; } = null!;

        /// <summary>
        /// The global EIP addresses (separated by commas) connected by SNAT rule.
        /// </summary>
        [Output("globalEipAddress")]
        public Output<string> GlobalEipAddress { get; private set; } = null!;

        /// <summary>
        /// The IDs (separated by commas) of global EIPs connected by SNAT rule.
        /// </summary>
        [Output("globalEipId")]
        public Output<string> GlobalEipId { get; private set; } = null!;

        /// <summary>
        /// schema: Required; The ID of the gateway to which the SNAT rule belongs.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        [Output("networkId")]
        public Output<string?> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The region where the SNAT rule is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The resource type of the SNAT rule.
        /// </summary>
        [Output("sourceType")]
        public Output<int?> SourceType { get; private set; } = null!;

        /// <summary>
        /// The status of the SNAT rule.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The network IDs of subnet connected by SNAT rule (VPC side).
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a NatSnatRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatSnatRule(string name, NatSnatRuleArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/natSnatRule:NatSnatRule", name, args ?? new NatSnatRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatSnatRule(string name, Input<string> id, NatSnatRuleState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/natSnatRule:NatSnatRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatSnatRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatSnatRule Get(string name, Input<string> id, NatSnatRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NatSnatRule(name, id, state, options);
        }
    }

    public sealed class NatSnatRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block connected by SNAT rule (DC side).
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// The description of the SNAT rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The IDs of floating IPs connected by SNAT rule.
        /// </summary>
        [Input("floatingIpId")]
        public Input<string>? FloatingIpId { get; set; }

        /// <summary>
        /// The IDs (separated by commas) of global EIPs connected by SNAT rule.
        /// </summary>
        [Input("globalEipId")]
        public Input<string>? GlobalEipId { get; set; }

        /// <summary>
        /// schema: Required; The ID of the gateway to which the SNAT rule belongs.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The region where the SNAT rule is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The resource type of the SNAT rule.
        /// </summary>
        [Input("sourceType")]
        public Input<int>? SourceType { get; set; }

        /// <summary>
        /// The network IDs of subnet connected by SNAT rule (VPC side).
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public NatSnatRuleArgs()
        {
        }
        public static new NatSnatRuleArgs Empty => new NatSnatRuleArgs();
    }

    public sealed class NatSnatRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block connected by SNAT rule (DC side).
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// The creation time of the SNAT rule.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the SNAT rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The floating IP addresses (separated by commas) connected by SNAT rule.
        /// </summary>
        [Input("floatingIpAddress")]
        public Input<string>? FloatingIpAddress { get; set; }

        /// <summary>
        /// The IDs of floating IPs connected by SNAT rule.
        /// </summary>
        [Input("floatingIpId")]
        public Input<string>? FloatingIpId { get; set; }

        /// <summary>
        /// The frozen EIP associated with the SNAT rule.
        /// </summary>
        [Input("freezedIpAddress")]
        public Input<string>? FreezedIpAddress { get; set; }

        /// <summary>
        /// The global EIP addresses (separated by commas) connected by SNAT rule.
        /// </summary>
        [Input("globalEipAddress")]
        public Input<string>? GlobalEipAddress { get; set; }

        /// <summary>
        /// The IDs (separated by commas) of global EIPs connected by SNAT rule.
        /// </summary>
        [Input("globalEipId")]
        public Input<string>? GlobalEipId { get; set; }

        /// <summary>
        /// schema: Required; The ID of the gateway to which the SNAT rule belongs.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The region where the SNAT rule is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The resource type of the SNAT rule.
        /// </summary>
        [Input("sourceType")]
        public Input<int>? SourceType { get; set; }

        /// <summary>
        /// The status of the SNAT rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The network IDs of subnet connected by SNAT rule (VPC side).
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public NatSnatRuleState()
        {
        }
        public static new NatSnatRuleState Empty => new NatSnatRuleState();
    }
}
