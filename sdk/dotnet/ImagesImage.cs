// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/imagesImage:ImagesImage")]
    public partial class ImagesImage : global::Pulumi.CustomResource
    {
        [Output("backupId")]
        public Output<string> BackupId { get; private set; } = null!;

        [Output("checksum")]
        public Output<string> Checksum { get; private set; } = null!;

        [Output("cmkId")]
        public Output<string?> CmkId { get; private set; } = null!;

        [Output("dataOrigin")]
        public Output<string> DataOrigin { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("diskFormat")]
        public Output<string> DiskFormat { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("imageSize")]
        public Output<string> ImageSize { get; private set; } = null!;

        [Output("imageUrl")]
        public Output<string?> ImageUrl { get; private set; } = null!;

        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        [Output("isConfig")]
        public Output<bool?> IsConfig { get; private set; } = null!;

        [Output("maxRam")]
        public Output<int> MaxRam { get; private set; } = null!;

        [Output("minDisk")]
        public Output<int?> MinDisk { get; private set; } = null!;

        [Output("minRam")]
        public Output<int> MinRam { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("osVersion")]
        public Output<string> OsVersion { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("vaultId")]
        public Output<string?> VaultId { get; private set; } = null!;

        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;

        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a ImagesImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImagesImage(string name, ImagesImageArgs? args = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/imagesImage:ImagesImage", name, args ?? new ImagesImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImagesImage(string name, Input<string> id, ImagesImageState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/imagesImage:ImagesImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImagesImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImagesImage Get(string name, Input<string> id, ImagesImageState? state = null, CustomResourceOptions? options = null)
        {
            return new ImagesImage(name, id, state, options);
        }
    }

    public sealed class ImagesImageArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        [Input("cmkId")]
        public Input<string>? CmkId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("isConfig")]
        public Input<bool>? IsConfig { get; set; }

        [Input("maxRam")]
        public Input<int>? MaxRam { get; set; }

        [Input("minDisk")]
        public Input<int>? MinDisk { get; set; }

        [Input("minRam")]
        public Input<int>? MinRam { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public ImagesImageArgs()
        {
        }
        public static new ImagesImageArgs Empty => new ImagesImageArgs();
    }

    public sealed class ImagesImageState : global::Pulumi.ResourceArgs
    {
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        [Input("checksum")]
        public Input<string>? Checksum { get; set; }

        [Input("cmkId")]
        public Input<string>? CmkId { get; set; }

        [Input("dataOrigin")]
        public Input<string>? DataOrigin { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskFormat")]
        public Input<string>? DiskFormat { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("imageSize")]
        public Input<string>? ImageSize { get; set; }

        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("isConfig")]
        public Input<bool>? IsConfig { get; set; }

        [Input("maxRam")]
        public Input<int>? MaxRam { get; set; }

        [Input("minDisk")]
        public Input<int>? MinDisk { get; set; }

        [Input("minRam")]
        public Input<int>? MinRam { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public ImagesImageState()
        {
        }
        public static new ImagesImageState Empty => new ImagesImageState();
    }
}
