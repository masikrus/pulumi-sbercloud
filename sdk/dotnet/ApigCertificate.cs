// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/apigCertificate:ApigCertificate")]
    public partial class ApigCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The certificate content.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The effective time of the certificate.
        /// </summary>
        [Output("effectedAt")]
        public Output<string> EffectedAt { get; private set; } = null!;

        /// <summary>
        /// The expiration time of the certificate.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The dedicated instance ID to which the certificate belongs.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The certificate name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The private key of the certificate.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The region where the certificate is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The SAN (Subject Alternative Names) of the certificate.
        /// </summary>
        [Output("sans")]
        public Output<ImmutableArray<string>> Sans { get; private set; } = null!;

        /// <summary>
        /// What signature algorithm the certificate uses.
        /// </summary>
        [Output("signatureAlgorithm")]
        public Output<string> SignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// The trusted root CA certificate.
        /// </summary>
        [Output("trustedRootCa")]
        public Output<string?> TrustedRootCa { get; private set; } = null!;

        /// <summary>
        /// The certificate type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ApigCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApigCertificate(string name, ApigCertificateArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/apigCertificate:ApigCertificate", name, args ?? new ApigCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApigCertificate(string name, Input<string> id, ApigCertificateState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/apigCertificate:ApigCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "content",
                    "privateKey",
                    "trustedRootCa",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApigCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApigCertificate Get(string name, Input<string> id, ApigCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new ApigCertificate(name, id, state, options);
        }
    }

    public sealed class ApigCertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        private Input<string>? _content;

        /// <summary>
        /// The certificate content.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The dedicated instance ID to which the certificate belongs.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The certificate name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key of the certificate.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The region where the certificate is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("trustedRootCa")]
        private Input<string>? _trustedRootCa;

        /// <summary>
        /// The trusted root CA certificate.
        /// </summary>
        public Input<string>? TrustedRootCa
        {
            get => _trustedRootCa;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _trustedRootCa = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The certificate type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApigCertificateArgs()
        {
        }
        public static new ApigCertificateArgs Empty => new ApigCertificateArgs();
    }

    public sealed class ApigCertificateState : global::Pulumi.ResourceArgs
    {
        [Input("content")]
        private Input<string>? _content;

        /// <summary>
        /// The certificate content.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The effective time of the certificate.
        /// </summary>
        [Input("effectedAt")]
        public Input<string>? EffectedAt { get; set; }

        /// <summary>
        /// The expiration time of the certificate.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The dedicated instance ID to which the certificate belongs.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The certificate name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key of the certificate.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The region where the certificate is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("sans")]
        private InputList<string>? _sans;

        /// <summary>
        /// The SAN (Subject Alternative Names) of the certificate.
        /// </summary>
        public InputList<string> Sans
        {
            get => _sans ?? (_sans = new InputList<string>());
            set => _sans = value;
        }

        /// <summary>
        /// What signature algorithm the certificate uses.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        [Input("trustedRootCa")]
        private Input<string>? _trustedRootCa;

        /// <summary>
        /// The trusted root CA certificate.
        /// </summary>
        public Input<string>? TrustedRootCa
        {
            get => _trustedRootCa;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _trustedRootCa = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The certificate type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApigCertificateState()
        {
        }
        public static new ApigCertificateState Empty => new ApigCertificateState();
    }
}
