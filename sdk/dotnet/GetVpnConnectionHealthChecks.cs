// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetVpnConnectionHealthChecks
    {
        public static Task<GetVpnConnectionHealthChecksResult> InvokeAsync(GetVpnConnectionHealthChecksArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnConnectionHealthChecksResult>("sbercloud:index/getVpnConnectionHealthChecks:getVpnConnectionHealthChecks", args ?? new GetVpnConnectionHealthChecksArgs(), options.WithDefaults());

        public static Output<GetVpnConnectionHealthChecksResult> Invoke(GetVpnConnectionHealthChecksInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionHealthChecksResult>("sbercloud:index/getVpnConnectionHealthChecks:getVpnConnectionHealthChecks", args ?? new GetVpnConnectionHealthChecksInvokeArgs(), options.WithDefaults());

        public static Output<GetVpnConnectionHealthChecksResult> Invoke(GetVpnConnectionHealthChecksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionHealthChecksResult>("sbercloud:index/getVpnConnectionHealthChecks:getVpnConnectionHealthChecks", args ?? new GetVpnConnectionHealthChecksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnConnectionHealthChecksArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId")]
        public string? ConnectionId { get; set; }

        [Input("destinationIp")]
        public string? DestinationIp { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("sourceIp")]
        public string? SourceIp { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        public GetVpnConnectionHealthChecksArgs()
        {
        }
        public static new GetVpnConnectionHealthChecksArgs Empty => new GetVpnConnectionHealthChecksArgs();
    }

    public sealed class GetVpnConnectionHealthChecksInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        [Input("destinationIp")]
        public Input<string>? DestinationIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("sourceIp")]
        public Input<string>? SourceIp { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetVpnConnectionHealthChecksInvokeArgs()
        {
        }
        public static new GetVpnConnectionHealthChecksInvokeArgs Empty => new GetVpnConnectionHealthChecksInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnConnectionHealthChecksResult
    {
        public readonly ImmutableArray<Outputs.GetVpnConnectionHealthChecksConnectionHealthCheckResult> ConnectionHealthChecks;
        public readonly string? ConnectionId;
        public readonly string? DestinationIp;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Region;
        public readonly string? SourceIp;
        public readonly string? Status;

        [OutputConstructor]
        private GetVpnConnectionHealthChecksResult(
            ImmutableArray<Outputs.GetVpnConnectionHealthChecksConnectionHealthCheckResult> connectionHealthChecks,

            string? connectionId,

            string? destinationIp,

            string id,

            string region,

            string? sourceIp,

            string? status)
        {
            ConnectionHealthChecks = connectionHealthChecks;
            ConnectionId = connectionId;
            DestinationIp = destinationIp;
            Id = id;
            Region = region;
            SourceIp = sourceIp;
            Status = status;
        }
    }
}
