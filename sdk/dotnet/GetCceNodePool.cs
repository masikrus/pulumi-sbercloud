// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetCceNodePool
    {
        public static Task<GetCceNodePoolResult> InvokeAsync(GetCceNodePoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCceNodePoolResult>("sbercloud:index/getCceNodePool:getCceNodePool", args ?? new GetCceNodePoolArgs(), options.WithDefaults());

        public static Output<GetCceNodePoolResult> Invoke(GetCceNodePoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCceNodePoolResult>("sbercloud:index/getCceNodePool:getCceNodePool", args ?? new GetCceNodePoolInvokeArgs(), options.WithDefaults());

        public static Output<GetCceNodePoolResult> Invoke(GetCceNodePoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCceNodePoolResult>("sbercloud:index/getCceNodePool:getCceNodePool", args ?? new GetCceNodePoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCceNodePoolArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("name")]
        public string? Name { get; set; }

        [Input("nodePoolId")]
        public string? NodePoolId { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        public GetCceNodePoolArgs()
        {
        }
        public static new GetCceNodePoolArgs Empty => new GetCceNodePoolArgs();
    }

    public sealed class GetCceNodePoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodePoolId")]
        public Input<string>? NodePoolId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetCceNodePoolInvokeArgs()
        {
        }
        public static new GetCceNodePoolInvokeArgs Empty => new GetCceNodePoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetCceNodePoolResult
    {
        public readonly string AvailabilityZone;
        public readonly string ClusterId;
        public readonly int CurrentNodeCount;
        public readonly ImmutableArray<Outputs.GetCceNodePoolDataVolumeResult> DataVolumes;
        public readonly string EnterpriseProjectId;
        public readonly ImmutableDictionary<string, string> ExtendParam;
        public readonly string FlavorId;
        public readonly ImmutableArray<Outputs.GetCceNodePoolHostnameConfigResult> HostnameConfigs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int InitialNodeCount;
        public readonly string KeyPair;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly int MaxNodeCount;
        public readonly int MaxPods;
        public readonly int MinNodeCount;
        public readonly string Name;
        public readonly string NodePoolId;
        public readonly string Os;
        public readonly int Priority;
        public readonly string Region;
        public readonly ImmutableArray<Outputs.GetCceNodePoolRootVolumeResult> RootVolumes;
        public readonly int ScaleDownCooldownTime;
        public readonly bool ScallEnable;
        public readonly string Status;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Type;

        [OutputConstructor]
        private GetCceNodePoolResult(
            string availabilityZone,

            string clusterId,

            int currentNodeCount,

            ImmutableArray<Outputs.GetCceNodePoolDataVolumeResult> dataVolumes,

            string enterpriseProjectId,

            ImmutableDictionary<string, string> extendParam,

            string flavorId,

            ImmutableArray<Outputs.GetCceNodePoolHostnameConfigResult> hostnameConfigs,

            string id,

            int initialNodeCount,

            string keyPair,

            ImmutableDictionary<string, string> labels,

            int maxNodeCount,

            int maxPods,

            int minNodeCount,

            string name,

            string nodePoolId,

            string os,

            int priority,

            string region,

            ImmutableArray<Outputs.GetCceNodePoolRootVolumeResult> rootVolumes,

            int scaleDownCooldownTime,

            bool scallEnable,

            string status,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string type)
        {
            AvailabilityZone = availabilityZone;
            ClusterId = clusterId;
            CurrentNodeCount = currentNodeCount;
            DataVolumes = dataVolumes;
            EnterpriseProjectId = enterpriseProjectId;
            ExtendParam = extendParam;
            FlavorId = flavorId;
            HostnameConfigs = hostnameConfigs;
            Id = id;
            InitialNodeCount = initialNodeCount;
            KeyPair = keyPair;
            Labels = labels;
            MaxNodeCount = maxNodeCount;
            MaxPods = maxPods;
            MinNodeCount = minNodeCount;
            Name = name;
            NodePoolId = nodePoolId;
            Os = os;
            Priority = priority;
            Region = region;
            RootVolumes = rootVolumes;
            ScaleDownCooldownTime = scaleDownCooldownTime;
            ScallEnable = scallEnable;
            Status = status;
            SubnetId = subnetId;
            Tags = tags;
            Type = type;
        }
    }
}
