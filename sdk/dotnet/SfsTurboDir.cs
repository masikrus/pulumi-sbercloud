// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/sfsTurboDir:SfsTurboDir")]
    public partial class SfsTurboDir : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the group ID of the SFS Turbo directory.
        /// </summary>
        [Output("gid")]
        public Output<int?> Gid { get; private set; } = null!;

        /// <summary>
        /// Specifies the SFS Turbo directory permissions.
        /// </summary>
        [Output("mode")]
        public Output<int?> Mode { get; private set; } = null!;

        /// <summary>
        /// Specifies the valid full path of SFS Turbo directory.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Specifies the SFS Turbo ID.
        /// </summary>
        [Output("shareId")]
        public Output<string> ShareId { get; private set; } = null!;

        /// <summary>
        /// Specifies the user ID of the SFS Turbo directory.
        /// </summary>
        [Output("uid")]
        public Output<int?> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a SfsTurboDir resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SfsTurboDir(string name, SfsTurboDirArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/sfsTurboDir:SfsTurboDir", name, args ?? new SfsTurboDirArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SfsTurboDir(string name, Input<string> id, SfsTurboDirState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/sfsTurboDir:SfsTurboDir", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SfsTurboDir resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SfsTurboDir Get(string name, Input<string> id, SfsTurboDirState? state = null, CustomResourceOptions? options = null)
        {
            return new SfsTurboDir(name, id, state, options);
        }
    }

    public sealed class SfsTurboDirArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the group ID of the SFS Turbo directory.
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// Specifies the SFS Turbo directory permissions.
        /// </summary>
        [Input("mode")]
        public Input<int>? Mode { get; set; }

        /// <summary>
        /// Specifies the valid full path of SFS Turbo directory.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the SFS Turbo ID.
        /// </summary>
        [Input("shareId", required: true)]
        public Input<string> ShareId { get; set; } = null!;

        /// <summary>
        /// Specifies the user ID of the SFS Turbo directory.
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public SfsTurboDirArgs()
        {
        }
        public static new SfsTurboDirArgs Empty => new SfsTurboDirArgs();
    }

    public sealed class SfsTurboDirState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the group ID of the SFS Turbo directory.
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// Specifies the SFS Turbo directory permissions.
        /// </summary>
        [Input("mode")]
        public Input<int>? Mode { get; set; }

        /// <summary>
        /// Specifies the valid full path of SFS Turbo directory.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specifies the SFS Turbo ID.
        /// </summary>
        [Input("shareId")]
        public Input<string>? ShareId { get; set; }

        /// <summary>
        /// Specifies the user ID of the SFS Turbo directory.
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public SfsTurboDirState()
        {
        }
        public static new SfsTurboDirState Empty => new SfsTurboDirState();
    }
}
