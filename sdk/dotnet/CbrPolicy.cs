// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cbrPolicy:CbrPolicy")]
    public partial class CbrPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The scheduling rule for the CBR policy backup execution.
        /// </summary>
        [Output("backupCycle")]
        public Output<Outputs.CbrPolicyBackupCycle> BackupCycle { get; private set; } = null!;

        /// <summary>
        /// The maximum number of retained backups.
        /// </summary>
        [Output("backupQuantity")]
        public Output<int?> BackupQuantity { get; private set; } = null!;

        /// <summary>
        /// The ID of the replication destination project.
        /// </summary>
        [Output("destinationProjectId")]
        public Output<string?> DestinationProjectId { get; private set; } = null!;

        /// <summary>
        /// The name of the replication destination region.
        /// </summary>
        [Output("destinationRegion")]
        public Output<string?> DestinationRegion { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the acceleration function to shorten the replication time for cross-region
        /// </summary>
        [Output("enableAcceleration")]
        public Output<bool?> EnableAcceleration { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the CBR policy.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The long-term retention rules.
        /// </summary>
        [Output("longTermRetention")]
        public Output<Outputs.CbrPolicyLongTermRetention?> LongTermRetention { get; private set; } = null!;

        /// <summary>
        /// The policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region where the policy is located.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The duration (in days) for retained backups.
        /// </summary>
        [Output("timePeriod")]
        public Output<int?> TimePeriod { get; private set; } = null!;

        /// <summary>
        /// The UTC time zone.
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        /// <summary>
        /// The protection type of the CBR policy.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CbrPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CbrPolicy(string name, CbrPolicyArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cbrPolicy:CbrPolicy", name, args ?? new CbrPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CbrPolicy(string name, Input<string> id, CbrPolicyState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cbrPolicy:CbrPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CbrPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CbrPolicy Get(string name, Input<string> id, CbrPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new CbrPolicy(name, id, state, options);
        }
    }

    public sealed class CbrPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scheduling rule for the CBR policy backup execution.
        /// </summary>
        [Input("backupCycle", required: true)]
        public Input<Inputs.CbrPolicyBackupCycleArgs> BackupCycle { get; set; } = null!;

        /// <summary>
        /// The maximum number of retained backups.
        /// </summary>
        [Input("backupQuantity")]
        public Input<int>? BackupQuantity { get; set; }

        /// <summary>
        /// The ID of the replication destination project.
        /// </summary>
        [Input("destinationProjectId")]
        public Input<string>? DestinationProjectId { get; set; }

        /// <summary>
        /// The name of the replication destination region.
        /// </summary>
        [Input("destinationRegion")]
        public Input<string>? DestinationRegion { get; set; }

        /// <summary>
        /// Whether to enable the acceleration function to shorten the replication time for cross-region
        /// </summary>
        [Input("enableAcceleration")]
        public Input<bool>? EnableAcceleration { get; set; }

        /// <summary>
        /// Whether to enable the CBR policy.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The long-term retention rules.
        /// </summary>
        [Input("longTermRetention")]
        public Input<Inputs.CbrPolicyLongTermRetentionArgs>? LongTermRetention { get; set; }

        /// <summary>
        /// The policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the policy is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The duration (in days) for retained backups.
        /// </summary>
        [Input("timePeriod")]
        public Input<int>? TimePeriod { get; set; }

        /// <summary>
        /// The UTC time zone.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The protection type of the CBR policy.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public CbrPolicyArgs()
        {
        }
        public static new CbrPolicyArgs Empty => new CbrPolicyArgs();
    }

    public sealed class CbrPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scheduling rule for the CBR policy backup execution.
        /// </summary>
        [Input("backupCycle")]
        public Input<Inputs.CbrPolicyBackupCycleGetArgs>? BackupCycle { get; set; }

        /// <summary>
        /// The maximum number of retained backups.
        /// </summary>
        [Input("backupQuantity")]
        public Input<int>? BackupQuantity { get; set; }

        /// <summary>
        /// The ID of the replication destination project.
        /// </summary>
        [Input("destinationProjectId")]
        public Input<string>? DestinationProjectId { get; set; }

        /// <summary>
        /// The name of the replication destination region.
        /// </summary>
        [Input("destinationRegion")]
        public Input<string>? DestinationRegion { get; set; }

        /// <summary>
        /// Whether to enable the acceleration function to shorten the replication time for cross-region
        /// </summary>
        [Input("enableAcceleration")]
        public Input<bool>? EnableAcceleration { get; set; }

        /// <summary>
        /// Whether to enable the CBR policy.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The long-term retention rules.
        /// </summary>
        [Input("longTermRetention")]
        public Input<Inputs.CbrPolicyLongTermRetentionGetArgs>? LongTermRetention { get; set; }

        /// <summary>
        /// The policy name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where the policy is located.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The duration (in days) for retained backups.
        /// </summary>
        [Input("timePeriod")]
        public Input<int>? TimePeriod { get; set; }

        /// <summary>
        /// The UTC time zone.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The protection type of the CBR policy.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CbrPolicyState()
        {
        }
        public static new CbrPolicyState Empty => new CbrPolicyState();
    }
}
