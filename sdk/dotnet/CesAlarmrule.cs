// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/cesAlarmrule:CesAlarmrule")]
    public partial class CesAlarmrule : global::Pulumi.CustomResource
    {
        [Output("alarmActionEnabled")]
        public Output<bool?> AlarmActionEnabled { get; private set; } = null!;

        [Output("alarmActions")]
        public Output<ImmutableArray<Outputs.CesAlarmruleAlarmAction>> AlarmActions { get; private set; } = null!;

        [Output("alarmDescription")]
        public Output<string?> AlarmDescription { get; private set; } = null!;

        [Output("alarmEnabled")]
        public Output<bool?> AlarmEnabled { get; private set; } = null!;

        [Output("alarmLevel")]
        public Output<int?> AlarmLevel { get; private set; } = null!;

        [Output("alarmName")]
        public Output<string> AlarmName { get; private set; } = null!;

        [Output("alarmState")]
        public Output<string> AlarmState { get; private set; } = null!;

        [Output("alarmType")]
        public Output<string> AlarmType { get; private set; } = null!;

        [Output("condition")]
        public Output<Outputs.CesAlarmruleCondition> Condition { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("insufficientdataActions")]
        public Output<ImmutableArray<Outputs.CesAlarmruleInsufficientdataAction>> InsufficientdataActions { get; private set; } = null!;

        [Output("metric")]
        public Output<Outputs.CesAlarmruleMetric> Metric { get; private set; } = null!;

        [Output("okActions")]
        public Output<ImmutableArray<Outputs.CesAlarmruleOkAction>> OkActions { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("updateTime")]
        public Output<int> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a CesAlarmrule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CesAlarmrule(string name, CesAlarmruleArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/cesAlarmrule:CesAlarmrule", name, args ?? new CesAlarmruleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CesAlarmrule(string name, Input<string> id, CesAlarmruleState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/cesAlarmrule:CesAlarmrule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CesAlarmrule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CesAlarmrule Get(string name, Input<string> id, CesAlarmruleState? state = null, CustomResourceOptions? options = null)
        {
            return new CesAlarmrule(name, id, state, options);
        }
    }

    public sealed class CesAlarmruleArgs : global::Pulumi.ResourceArgs
    {
        [Input("alarmActionEnabled")]
        public Input<bool>? AlarmActionEnabled { get; set; }

        [Input("alarmActions")]
        private InputList<Inputs.CesAlarmruleAlarmActionArgs>? _alarmActions;
        public InputList<Inputs.CesAlarmruleAlarmActionArgs> AlarmActions
        {
            get => _alarmActions ?? (_alarmActions = new InputList<Inputs.CesAlarmruleAlarmActionArgs>());
            set => _alarmActions = value;
        }

        [Input("alarmDescription")]
        public Input<string>? AlarmDescription { get; set; }

        [Input("alarmEnabled")]
        public Input<bool>? AlarmEnabled { get; set; }

        [Input("alarmLevel")]
        public Input<int>? AlarmLevel { get; set; }

        [Input("alarmName", required: true)]
        public Input<string> AlarmName { get; set; } = null!;

        [Input("alarmType")]
        public Input<string>? AlarmType { get; set; }

        [Input("condition", required: true)]
        public Input<Inputs.CesAlarmruleConditionArgs> Condition { get; set; } = null!;

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("insufficientdataActions")]
        private InputList<Inputs.CesAlarmruleInsufficientdataActionArgs>? _insufficientdataActions;
        [Obsolete(@"insufficientdata_actions is deprecated")]
        public InputList<Inputs.CesAlarmruleInsufficientdataActionArgs> InsufficientdataActions
        {
            get => _insufficientdataActions ?? (_insufficientdataActions = new InputList<Inputs.CesAlarmruleInsufficientdataActionArgs>());
            set => _insufficientdataActions = value;
        }

        [Input("metric", required: true)]
        public Input<Inputs.CesAlarmruleMetricArgs> Metric { get; set; } = null!;

        [Input("okActions")]
        private InputList<Inputs.CesAlarmruleOkActionArgs>? _okActions;
        public InputList<Inputs.CesAlarmruleOkActionArgs> OkActions
        {
            get => _okActions ?? (_okActions = new InputList<Inputs.CesAlarmruleOkActionArgs>());
            set => _okActions = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        public CesAlarmruleArgs()
        {
        }
        public static new CesAlarmruleArgs Empty => new CesAlarmruleArgs();
    }

    public sealed class CesAlarmruleState : global::Pulumi.ResourceArgs
    {
        [Input("alarmActionEnabled")]
        public Input<bool>? AlarmActionEnabled { get; set; }

        [Input("alarmActions")]
        private InputList<Inputs.CesAlarmruleAlarmActionGetArgs>? _alarmActions;
        public InputList<Inputs.CesAlarmruleAlarmActionGetArgs> AlarmActions
        {
            get => _alarmActions ?? (_alarmActions = new InputList<Inputs.CesAlarmruleAlarmActionGetArgs>());
            set => _alarmActions = value;
        }

        [Input("alarmDescription")]
        public Input<string>? AlarmDescription { get; set; }

        [Input("alarmEnabled")]
        public Input<bool>? AlarmEnabled { get; set; }

        [Input("alarmLevel")]
        public Input<int>? AlarmLevel { get; set; }

        [Input("alarmName")]
        public Input<string>? AlarmName { get; set; }

        [Input("alarmState")]
        public Input<string>? AlarmState { get; set; }

        [Input("alarmType")]
        public Input<string>? AlarmType { get; set; }

        [Input("condition")]
        public Input<Inputs.CesAlarmruleConditionGetArgs>? Condition { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("insufficientdataActions")]
        private InputList<Inputs.CesAlarmruleInsufficientdataActionGetArgs>? _insufficientdataActions;
        [Obsolete(@"insufficientdata_actions is deprecated")]
        public InputList<Inputs.CesAlarmruleInsufficientdataActionGetArgs> InsufficientdataActions
        {
            get => _insufficientdataActions ?? (_insufficientdataActions = new InputList<Inputs.CesAlarmruleInsufficientdataActionGetArgs>());
            set => _insufficientdataActions = value;
        }

        [Input("metric")]
        public Input<Inputs.CesAlarmruleMetricGetArgs>? Metric { get; set; }

        [Input("okActions")]
        private InputList<Inputs.CesAlarmruleOkActionGetArgs>? _okActions;
        public InputList<Inputs.CesAlarmruleOkActionGetArgs> OkActions
        {
            get => _okActions ?? (_okActions = new InputList<Inputs.CesAlarmruleOkActionGetArgs>());
            set => _okActions = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("updateTime")]
        public Input<int>? UpdateTime { get; set; }

        public CesAlarmruleState()
        {
        }
        public static new CesAlarmruleState Empty => new CesAlarmruleState();
    }
}
