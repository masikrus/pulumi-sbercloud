// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    [SbercloudResourceType("sbercloud:index/computeInstance:ComputeInstance")]
    public partial class ComputeInstance : global::Pulumi.CustomResource
    {
        [Output("accessIpV4")]
        public Output<string> AccessIpV4 { get; private set; } = null!;

        [Output("accessIpV6")]
        public Output<string> AccessIpV6 { get; private set; } = null!;

        [Output("adminPass")]
        public Output<string?> AdminPass { get; private set; } = null!;

        [Output("agencyName")]
        public Output<string> AgencyName { get; private set; } = null!;

        [Output("agentList")]
        public Output<string> AgentList { get; private set; } = null!;

        [Output("autoPay")]
        public Output<string?> AutoPay { get; private set; } = null!;

        [Output("autoRenew")]
        public Output<string?> AutoRenew { get; private set; } = null!;

        [Output("autoTerminateTime")]
        public Output<string?> AutoTerminateTime { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("bandwidth")]
        public Output<Outputs.ComputeInstanceBandwidth?> Bandwidth { get; private set; } = null!;

        [Output("chargingMode")]
        public Output<string> ChargingMode { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.ComputeInstanceDataDisk>> DataDisks { get; private set; } = null!;

        [Output("deleteDisksOnTermination")]
        public Output<bool?> DeleteDisksOnTermination { get; private set; } = null!;

        [Output("deleteEipOnTermination")]
        public Output<bool?> DeleteEipOnTermination { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("eipId")]
        public Output<string?> EipId { get; private set; } = null!;

        [Output("eipType")]
        public Output<string?> EipType { get; private set; } = null!;

        [Output("enterpriseProjectId")]
        public Output<string> EnterpriseProjectId { get; private set; } = null!;

        [Output("expiredTime")]
        public Output<string> ExpiredTime { get; private set; } = null!;

        /// <summary>
        /// schema: Required
        /// </summary>
        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Output("flavorName")]
        public Output<string> FlavorName { get; private set; } = null!;

        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<Outputs.ComputeInstanceNetwork>> Networks { get; private set; } = null!;

        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        [Output("periodUnit")]
        public Output<string?> PeriodUnit { get; private set; } = null!;

        [Output("powerAction")]
        public Output<string> PowerAction { get; private set; } = null!;

        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("schedulerHints")]
        public Output<ImmutableArray<Outputs.ComputeInstanceSchedulerHint>> SchedulerHints { get; private set; } = null!;

        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        [Output("spotDuration")]
        public Output<int?> SpotDuration { get; private set; } = null!;

        [Output("spotDurationCount")]
        public Output<int> SpotDurationCount { get; private set; } = null!;

        [Output("spotMaximumPrice")]
        public Output<string?> SpotMaximumPrice { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("stopBeforeDestroy")]
        public Output<bool?> StopBeforeDestroy { get; private set; } = null!;

        [Output("systemDiskDssPoolId")]
        public Output<string?> SystemDiskDssPoolId { get; private set; } = null!;

        [Output("systemDiskId")]
        public Output<string> SystemDiskId { get; private set; } = null!;

        [Output("systemDiskIops")]
        public Output<int> SystemDiskIops { get; private set; } = null!;

        [Output("systemDiskKmsKeyId")]
        public Output<string> SystemDiskKmsKeyId { get; private set; } = null!;

        [Output("systemDiskSize")]
        public Output<int> SystemDiskSize { get; private set; } = null!;

        [Output("systemDiskThroughput")]
        public Output<int> SystemDiskThroughput { get; private set; } = null!;

        [Output("systemDiskType")]
        public Output<string> SystemDiskType { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        [Output("userId")]
        public Output<string?> UserId { get; private set; } = null!;

        [Output("volumeAttacheds")]
        public Output<ImmutableArray<Outputs.ComputeInstanceVolumeAttached>> VolumeAttacheds { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeInstance(string name, ComputeInstanceArgs args, CustomResourceOptions? options = null)
            : base("sbercloud:index/computeInstance:ComputeInstance", name, args ?? new ComputeInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeInstance(string name, Input<string> id, ComputeInstanceState? state = null, CustomResourceOptions? options = null)
            : base("sbercloud:index/computeInstance:ComputeInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "adminPass",
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeInstance Get(string name, Input<string> id, ComputeInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeInstance(name, id, state, options);
        }
    }

    public sealed class ComputeInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPass")]
        private Input<string>? _adminPass;
        public Input<string>? AdminPass
        {
            get => _adminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("agentList")]
        public Input<string>? AgentList { get; set; }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("autoTerminateTime")]
        public Input<string>? AutoTerminateTime { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bandwidth")]
        public Input<Inputs.ComputeInstanceBandwidthArgs>? Bandwidth { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.ComputeInstanceDataDiskArgs>? _dataDisks;
        public InputList<Inputs.ComputeInstanceDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.ComputeInstanceDataDiskArgs>());
            set => _dataDisks = value;
        }

        [Input("deleteDisksOnTermination")]
        public Input<bool>? DeleteDisksOnTermination { get; set; }

        [Input("deleteEipOnTermination")]
        public Input<bool>? DeleteEipOnTermination { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("eipType")]
        public Input<string>? EipType { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        /// <summary>
        /// schema: Required
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Input("flavorName")]
        public Input<string>? FlavorName { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.ComputeInstanceNetworkArgs>? _networks;
        public InputList<Inputs.ComputeInstanceNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ComputeInstanceNetworkArgs>());
            set => _networks = value;
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("powerAction")]
        public Input<string>? PowerAction { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("schedulerHints")]
        private InputList<Inputs.ComputeInstanceSchedulerHintArgs>? _schedulerHints;
        public InputList<Inputs.ComputeInstanceSchedulerHintArgs> SchedulerHints
        {
            get => _schedulerHints ?? (_schedulerHints = new InputList<Inputs.ComputeInstanceSchedulerHintArgs>());
            set => _schedulerHints = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// schema: Computed
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("spotDuration")]
        public Input<int>? SpotDuration { get; set; }

        [Input("spotDurationCount")]
        public Input<int>? SpotDurationCount { get; set; }

        [Input("spotMaximumPrice")]
        public Input<string>? SpotMaximumPrice { get; set; }

        [Input("stopBeforeDestroy")]
        public Input<bool>? StopBeforeDestroy { get; set; }

        [Input("systemDiskDssPoolId")]
        public Input<string>? SystemDiskDssPoolId { get; set; }

        [Input("systemDiskIops")]
        public Input<int>? SystemDiskIops { get; set; }

        [Input("systemDiskKmsKeyId")]
        public Input<string>? SystemDiskKmsKeyId { get; set; }

        [Input("systemDiskSize")]
        public Input<int>? SystemDiskSize { get; set; }

        [Input("systemDiskThroughput")]
        public Input<int>? SystemDiskThroughput { get; set; }

        [Input("systemDiskType")]
        public Input<string>? SystemDiskType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public ComputeInstanceArgs()
        {
        }
        public static new ComputeInstanceArgs Empty => new ComputeInstanceArgs();
    }

    public sealed class ComputeInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("accessIpV4")]
        public Input<string>? AccessIpV4 { get; set; }

        [Input("accessIpV6")]
        public Input<string>? AccessIpV6 { get; set; }

        [Input("adminPass")]
        private Input<string>? _adminPass;
        public Input<string>? AdminPass
        {
            get => _adminPass;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPass = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("agencyName")]
        public Input<string>? AgencyName { get; set; }

        [Input("agentList")]
        public Input<string>? AgentList { get; set; }

        [Input("autoPay")]
        public Input<string>? AutoPay { get; set; }

        [Input("autoRenew")]
        public Input<string>? AutoRenew { get; set; }

        [Input("autoTerminateTime")]
        public Input<string>? AutoTerminateTime { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bandwidth")]
        public Input<Inputs.ComputeInstanceBandwidthGetArgs>? Bandwidth { get; set; }

        [Input("chargingMode")]
        public Input<string>? ChargingMode { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.ComputeInstanceDataDiskGetArgs>? _dataDisks;
        public InputList<Inputs.ComputeInstanceDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.ComputeInstanceDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        [Input("deleteDisksOnTermination")]
        public Input<bool>? DeleteDisksOnTermination { get; set; }

        [Input("deleteEipOnTermination")]
        public Input<bool>? DeleteEipOnTermination { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("eipType")]
        public Input<string>? EipType { get; set; }

        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("expiredTime")]
        public Input<string>? ExpiredTime { get; set; }

        /// <summary>
        /// schema: Required
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// schema: Computed
        /// </summary>
        [Input("flavorName")]
        public Input<string>? FlavorName { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ComputeInstanceNetworkGetArgs>? _networks;
        public InputList<Inputs.ComputeInstanceNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ComputeInstanceNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        [Input("powerAction")]
        public Input<string>? PowerAction { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("schedulerHints")]
        private InputList<Inputs.ComputeInstanceSchedulerHintGetArgs>? _schedulerHints;
        public InputList<Inputs.ComputeInstanceSchedulerHintGetArgs> SchedulerHints
        {
            get => _schedulerHints ?? (_schedulerHints = new InputList<Inputs.ComputeInstanceSchedulerHintGetArgs>());
            set => _schedulerHints = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// schema: Computed
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("spotDuration")]
        public Input<int>? SpotDuration { get; set; }

        [Input("spotDurationCount")]
        public Input<int>? SpotDurationCount { get; set; }

        [Input("spotMaximumPrice")]
        public Input<string>? SpotMaximumPrice { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("stopBeforeDestroy")]
        public Input<bool>? StopBeforeDestroy { get; set; }

        [Input("systemDiskDssPoolId")]
        public Input<string>? SystemDiskDssPoolId { get; set; }

        [Input("systemDiskId")]
        public Input<string>? SystemDiskId { get; set; }

        [Input("systemDiskIops")]
        public Input<int>? SystemDiskIops { get; set; }

        [Input("systemDiskKmsKeyId")]
        public Input<string>? SystemDiskKmsKeyId { get; set; }

        [Input("systemDiskSize")]
        public Input<int>? SystemDiskSize { get; set; }

        [Input("systemDiskThroughput")]
        public Input<int>? SystemDiskThroughput { get; set; }

        [Input("systemDiskType")]
        public Input<string>? SystemDiskType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        [Input("volumeAttacheds")]
        private InputList<Inputs.ComputeInstanceVolumeAttachedGetArgs>? _volumeAttacheds;
        public InputList<Inputs.ComputeInstanceVolumeAttachedGetArgs> VolumeAttacheds
        {
            get => _volumeAttacheds ?? (_volumeAttacheds = new InputList<Inputs.ComputeInstanceVolumeAttachedGetArgs>());
            set => _volumeAttacheds = value;
        }

        public ComputeInstanceState()
        {
        }
        public static new ComputeInstanceState Empty => new ComputeInstanceState();
    }
}
