// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sbercloud
{
    public static class GetComputeInstance
    {
        public static Task<GetComputeInstanceResult> InvokeAsync(GetComputeInstanceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeInstanceResult>("sbercloud:index/getComputeInstance:getComputeInstance", args ?? new GetComputeInstanceArgs(), options.WithDefaults());

        public static Output<GetComputeInstanceResult> Invoke(GetComputeInstanceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeInstanceResult>("sbercloud:index/getComputeInstance:getComputeInstance", args ?? new GetComputeInstanceInvokeArgs(), options.WithDefaults());

        public static Output<GetComputeInstanceResult> Invoke(GetComputeInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeInstanceResult>("sbercloud:index/getComputeInstance:getComputeInstance", args ?? new GetComputeInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("enterpriseProjectId")]
        public string? EnterpriseProjectId { get; set; }

        [Input("fixedIpV4")]
        public string? FixedIpV4 { get; set; }

        [Input("flavorId")]
        public string? FlavorId { get; set; }

        [Input("instanceId")]
        public string? InstanceId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetComputeInstanceArgs()
        {
        }
        public static new GetComputeInstanceArgs Empty => new GetComputeInstanceArgs();
    }

    public sealed class GetComputeInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("enterpriseProjectId")]
        public Input<string>? EnterpriseProjectId { get; set; }

        [Input("fixedIpV4")]
        public Input<string>? FixedIpV4 { get; set; }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetComputeInstanceInvokeArgs()
        {
        }
        public static new GetComputeInstanceInvokeArgs Empty => new GetComputeInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeInstanceResult
    {
        public readonly string AvailabilityZone;
        public readonly string ChargingMode;
        public readonly string EnterpriseProjectId;
        public readonly string ExpiredTime;
        public readonly string? FixedIpV4;
        public readonly string FlavorId;
        public readonly string FlavorName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        public readonly string ImageName;
        public readonly string? InstanceId;
        public readonly string KeyPair;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetComputeInstanceNetworkResult> Networks;
        public readonly string PublicIp;
        public readonly string Region;
        public readonly ImmutableArray<Outputs.GetComputeInstanceSchedulerHintResult> SchedulerHints;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly ImmutableArray<string> SecurityGroups;
        public readonly string Status;
        public readonly string SystemDiskId;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string UserData;
        public readonly ImmutableArray<Outputs.GetComputeInstanceVolumeAttachedResult> VolumeAttacheds;

        [OutputConstructor]
        private GetComputeInstanceResult(
            string availabilityZone,

            string chargingMode,

            string enterpriseProjectId,

            string expiredTime,

            string? fixedIpV4,

            string flavorId,

            string flavorName,

            string id,

            string imageId,

            string imageName,

            string? instanceId,

            string keyPair,

            string name,

            ImmutableArray<Outputs.GetComputeInstanceNetworkResult> networks,

            string publicIp,

            string region,

            ImmutableArray<Outputs.GetComputeInstanceSchedulerHintResult> schedulerHints,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> securityGroups,

            string status,

            string systemDiskId,

            ImmutableDictionary<string, string>? tags,

            string userData,

            ImmutableArray<Outputs.GetComputeInstanceVolumeAttachedResult> volumeAttacheds)
        {
            AvailabilityZone = availabilityZone;
            ChargingMode = chargingMode;
            EnterpriseProjectId = enterpriseProjectId;
            ExpiredTime = expiredTime;
            FixedIpV4 = fixedIpV4;
            FlavorId = flavorId;
            FlavorName = flavorName;
            Id = id;
            ImageId = imageId;
            ImageName = imageName;
            InstanceId = instanceId;
            KeyPair = keyPair;
            Name = name;
            Networks = networks;
            PublicIp = publicIp;
            Region = region;
            SchedulerHints = schedulerHints;
            SecurityGroupIds = securityGroupIds;
            SecurityGroups = securityGroups;
            Status = status;
            SystemDiskId = systemDiskId;
            Tags = tags;
            UserData = userData;
            VolumeAttacheds = volumeAttacheds;
        }
    }
}
